
PID_regulator_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073ac  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800746c  0800746c  0000846c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007574  08007574  0000905c  2**0
                  CONTENTS
  4 .ARM          00000008  08007574  08007574  00008574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800757c  0800757c  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800757c  0800757c  0000857c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007580  08007580  00008580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007584  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  2000005c  080075e0  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  080075e0  000094cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cff  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de8  00000000  00000000  0001cd83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0001fb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da7  00000000  00000000  00020d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c76  00000000  00000000  00021aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ad0  00000000  00000000  00038725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ab63  00000000  00000000  0004f1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9d58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004524  00000000  00000000  000d9d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000de2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007454 	.word	0x08007454

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08007454 	.word	0x08007454

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_cfrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0008      	movs	r0, r1
 800041c:	4661      	mov	r1, ip
 800041e:	e7ff      	b.n	8000420 <__aeabi_cfcmpeq>

08000420 <__aeabi_cfcmpeq>:
 8000420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000422:	f000 fb4f 	bl	8000ac4 <__lesf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	d401      	bmi.n	800042e <__aeabi_cfcmpeq+0xe>
 800042a:	2100      	movs	r1, #0
 800042c:	42c8      	cmn	r0, r1
 800042e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000430 <__aeabi_fcmpeq>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 facf 	bl	80009d4 <__eqsf2>
 8000436:	4240      	negs	r0, r0
 8000438:	3001      	adds	r0, #1
 800043a:	bd10      	pop	{r4, pc}

0800043c <__aeabi_fcmplt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fb41 	bl	8000ac4 <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	db01      	blt.n	800044a <__aeabi_fcmplt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_fcmple>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fb37 	bl	8000ac4 <__lesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dd01      	ble.n	800045e <__aeabi_fcmple+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_fcmpgt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 fadd 	bl	8000a24 <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dc01      	bgt.n	8000472 <__aeabi_fcmpgt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_fcmpge>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 fad3 	bl	8000a24 <__gesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	da01      	bge.n	8000486 <__aeabi_fcmpge+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_uldivmod>:
 800048c:	2b00      	cmp	r3, #0
 800048e:	d111      	bne.n	80004b4 <__aeabi_uldivmod+0x28>
 8000490:	2a00      	cmp	r2, #0
 8000492:	d10f      	bne.n	80004b4 <__aeabi_uldivmod+0x28>
 8000494:	2900      	cmp	r1, #0
 8000496:	d100      	bne.n	800049a <__aeabi_uldivmod+0xe>
 8000498:	2800      	cmp	r0, #0
 800049a:	d002      	beq.n	80004a2 <__aeabi_uldivmod+0x16>
 800049c:	2100      	movs	r1, #0
 800049e:	43c9      	mvns	r1, r1
 80004a0:	0008      	movs	r0, r1
 80004a2:	b407      	push	{r0, r1, r2}
 80004a4:	4802      	ldr	r0, [pc, #8]	@ (80004b0 <__aeabi_uldivmod+0x24>)
 80004a6:	a102      	add	r1, pc, #8	@ (adr r1, 80004b0 <__aeabi_uldivmod+0x24>)
 80004a8:	1840      	adds	r0, r0, r1
 80004aa:	9002      	str	r0, [sp, #8]
 80004ac:	bd03      	pop	{r0, r1, pc}
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	ffffff65 	.word	0xffffff65
 80004b4:	b403      	push	{r0, r1}
 80004b6:	4668      	mov	r0, sp
 80004b8:	b501      	push	{r0, lr}
 80004ba:	9802      	ldr	r0, [sp, #8]
 80004bc:	f000 f834 	bl	8000528 <__udivmoddi4>
 80004c0:	9b01      	ldr	r3, [sp, #4]
 80004c2:	469e      	mov	lr, r3
 80004c4:	b002      	add	sp, #8
 80004c6:	bc0c      	pop	{r2, r3}
 80004c8:	4770      	bx	lr
 80004ca:	46c0      	nop			@ (mov r8, r8)

080004cc <__aeabi_lmul>:
 80004cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ce:	46ce      	mov	lr, r9
 80004d0:	4699      	mov	r9, r3
 80004d2:	0c03      	lsrs	r3, r0, #16
 80004d4:	469c      	mov	ip, r3
 80004d6:	0413      	lsls	r3, r2, #16
 80004d8:	4647      	mov	r7, r8
 80004da:	0c1b      	lsrs	r3, r3, #16
 80004dc:	001d      	movs	r5, r3
 80004de:	000e      	movs	r6, r1
 80004e0:	4661      	mov	r1, ip
 80004e2:	0404      	lsls	r4, r0, #16
 80004e4:	0c24      	lsrs	r4, r4, #16
 80004e6:	b580      	push	{r7, lr}
 80004e8:	0007      	movs	r7, r0
 80004ea:	0c10      	lsrs	r0, r2, #16
 80004ec:	434b      	muls	r3, r1
 80004ee:	4365      	muls	r5, r4
 80004f0:	4341      	muls	r1, r0
 80004f2:	4360      	muls	r0, r4
 80004f4:	0c2c      	lsrs	r4, r5, #16
 80004f6:	18c0      	adds	r0, r0, r3
 80004f8:	1824      	adds	r4, r4, r0
 80004fa:	468c      	mov	ip, r1
 80004fc:	42a3      	cmp	r3, r4
 80004fe:	d903      	bls.n	8000508 <__aeabi_lmul+0x3c>
 8000500:	2380      	movs	r3, #128	@ 0x80
 8000502:	025b      	lsls	r3, r3, #9
 8000504:	4698      	mov	r8, r3
 8000506:	44c4      	add	ip, r8
 8000508:	4649      	mov	r1, r9
 800050a:	4379      	muls	r1, r7
 800050c:	4356      	muls	r6, r2
 800050e:	0c23      	lsrs	r3, r4, #16
 8000510:	042d      	lsls	r5, r5, #16
 8000512:	0c2d      	lsrs	r5, r5, #16
 8000514:	1989      	adds	r1, r1, r6
 8000516:	4463      	add	r3, ip
 8000518:	0424      	lsls	r4, r4, #16
 800051a:	1960      	adds	r0, r4, r5
 800051c:	18c9      	adds	r1, r1, r3
 800051e:	bcc0      	pop	{r6, r7}
 8000520:	46b9      	mov	r9, r7
 8000522:	46b0      	mov	r8, r6
 8000524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000526:	46c0      	nop			@ (mov r8, r8)

08000528 <__udivmoddi4>:
 8000528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052a:	4657      	mov	r7, sl
 800052c:	464e      	mov	r6, r9
 800052e:	4645      	mov	r5, r8
 8000530:	46de      	mov	lr, fp
 8000532:	b5e0      	push	{r5, r6, r7, lr}
 8000534:	0004      	movs	r4, r0
 8000536:	000d      	movs	r5, r1
 8000538:	4692      	mov	sl, r2
 800053a:	4699      	mov	r9, r3
 800053c:	b083      	sub	sp, #12
 800053e:	428b      	cmp	r3, r1
 8000540:	d830      	bhi.n	80005a4 <__udivmoddi4+0x7c>
 8000542:	d02d      	beq.n	80005a0 <__udivmoddi4+0x78>
 8000544:	4649      	mov	r1, r9
 8000546:	4650      	mov	r0, sl
 8000548:	f000 fcd2 	bl	8000ef0 <__clzdi2>
 800054c:	0029      	movs	r1, r5
 800054e:	0006      	movs	r6, r0
 8000550:	0020      	movs	r0, r4
 8000552:	f000 fccd 	bl	8000ef0 <__clzdi2>
 8000556:	1a33      	subs	r3, r6, r0
 8000558:	4698      	mov	r8, r3
 800055a:	3b20      	subs	r3, #32
 800055c:	d434      	bmi.n	80005c8 <__udivmoddi4+0xa0>
 800055e:	469b      	mov	fp, r3
 8000560:	4653      	mov	r3, sl
 8000562:	465a      	mov	r2, fp
 8000564:	4093      	lsls	r3, r2
 8000566:	4642      	mov	r2, r8
 8000568:	001f      	movs	r7, r3
 800056a:	4653      	mov	r3, sl
 800056c:	4093      	lsls	r3, r2
 800056e:	001e      	movs	r6, r3
 8000570:	42af      	cmp	r7, r5
 8000572:	d83b      	bhi.n	80005ec <__udivmoddi4+0xc4>
 8000574:	42af      	cmp	r7, r5
 8000576:	d100      	bne.n	800057a <__udivmoddi4+0x52>
 8000578:	e079      	b.n	800066e <__udivmoddi4+0x146>
 800057a:	465b      	mov	r3, fp
 800057c:	1ba4      	subs	r4, r4, r6
 800057e:	41bd      	sbcs	r5, r7
 8000580:	2b00      	cmp	r3, #0
 8000582:	da00      	bge.n	8000586 <__udivmoddi4+0x5e>
 8000584:	e076      	b.n	8000674 <__udivmoddi4+0x14c>
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	9200      	str	r2, [sp, #0]
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2301      	movs	r3, #1
 8000590:	465a      	mov	r2, fp
 8000592:	4093      	lsls	r3, r2
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2301      	movs	r3, #1
 8000598:	4642      	mov	r2, r8
 800059a:	4093      	lsls	r3, r2
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	e029      	b.n	80005f4 <__udivmoddi4+0xcc>
 80005a0:	4282      	cmp	r2, r0
 80005a2:	d9cf      	bls.n	8000544 <__udivmoddi4+0x1c>
 80005a4:	2200      	movs	r2, #0
 80005a6:	2300      	movs	r3, #0
 80005a8:	9200      	str	r2, [sp, #0]
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <__udivmoddi4+0x8e>
 80005b2:	601c      	str	r4, [r3, #0]
 80005b4:	605d      	str	r5, [r3, #4]
 80005b6:	9800      	ldr	r0, [sp, #0]
 80005b8:	9901      	ldr	r1, [sp, #4]
 80005ba:	b003      	add	sp, #12
 80005bc:	bcf0      	pop	{r4, r5, r6, r7}
 80005be:	46bb      	mov	fp, r7
 80005c0:	46b2      	mov	sl, r6
 80005c2:	46a9      	mov	r9, r5
 80005c4:	46a0      	mov	r8, r4
 80005c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c8:	4642      	mov	r2, r8
 80005ca:	469b      	mov	fp, r3
 80005cc:	2320      	movs	r3, #32
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	4652      	mov	r2, sl
 80005d2:	40da      	lsrs	r2, r3
 80005d4:	4641      	mov	r1, r8
 80005d6:	0013      	movs	r3, r2
 80005d8:	464a      	mov	r2, r9
 80005da:	408a      	lsls	r2, r1
 80005dc:	0017      	movs	r7, r2
 80005de:	4642      	mov	r2, r8
 80005e0:	431f      	orrs	r7, r3
 80005e2:	4653      	mov	r3, sl
 80005e4:	4093      	lsls	r3, r2
 80005e6:	001e      	movs	r6, r3
 80005e8:	42af      	cmp	r7, r5
 80005ea:	d9c3      	bls.n	8000574 <__udivmoddi4+0x4c>
 80005ec:	2200      	movs	r2, #0
 80005ee:	2300      	movs	r3, #0
 80005f0:	9200      	str	r2, [sp, #0]
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	4643      	mov	r3, r8
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d0d8      	beq.n	80005ac <__udivmoddi4+0x84>
 80005fa:	07fb      	lsls	r3, r7, #31
 80005fc:	0872      	lsrs	r2, r6, #1
 80005fe:	431a      	orrs	r2, r3
 8000600:	4646      	mov	r6, r8
 8000602:	087b      	lsrs	r3, r7, #1
 8000604:	e00e      	b.n	8000624 <__udivmoddi4+0xfc>
 8000606:	42ab      	cmp	r3, r5
 8000608:	d101      	bne.n	800060e <__udivmoddi4+0xe6>
 800060a:	42a2      	cmp	r2, r4
 800060c:	d80c      	bhi.n	8000628 <__udivmoddi4+0x100>
 800060e:	1aa4      	subs	r4, r4, r2
 8000610:	419d      	sbcs	r5, r3
 8000612:	2001      	movs	r0, #1
 8000614:	1924      	adds	r4, r4, r4
 8000616:	416d      	adcs	r5, r5
 8000618:	2100      	movs	r1, #0
 800061a:	3e01      	subs	r6, #1
 800061c:	1824      	adds	r4, r4, r0
 800061e:	414d      	adcs	r5, r1
 8000620:	2e00      	cmp	r6, #0
 8000622:	d006      	beq.n	8000632 <__udivmoddi4+0x10a>
 8000624:	42ab      	cmp	r3, r5
 8000626:	d9ee      	bls.n	8000606 <__udivmoddi4+0xde>
 8000628:	3e01      	subs	r6, #1
 800062a:	1924      	adds	r4, r4, r4
 800062c:	416d      	adcs	r5, r5
 800062e:	2e00      	cmp	r6, #0
 8000630:	d1f8      	bne.n	8000624 <__udivmoddi4+0xfc>
 8000632:	9800      	ldr	r0, [sp, #0]
 8000634:	9901      	ldr	r1, [sp, #4]
 8000636:	465b      	mov	r3, fp
 8000638:	1900      	adds	r0, r0, r4
 800063a:	4169      	adcs	r1, r5
 800063c:	2b00      	cmp	r3, #0
 800063e:	db24      	blt.n	800068a <__udivmoddi4+0x162>
 8000640:	002b      	movs	r3, r5
 8000642:	465a      	mov	r2, fp
 8000644:	4644      	mov	r4, r8
 8000646:	40d3      	lsrs	r3, r2
 8000648:	002a      	movs	r2, r5
 800064a:	40e2      	lsrs	r2, r4
 800064c:	001c      	movs	r4, r3
 800064e:	465b      	mov	r3, fp
 8000650:	0015      	movs	r5, r2
 8000652:	2b00      	cmp	r3, #0
 8000654:	db2a      	blt.n	80006ac <__udivmoddi4+0x184>
 8000656:	0026      	movs	r6, r4
 8000658:	409e      	lsls	r6, r3
 800065a:	0033      	movs	r3, r6
 800065c:	0026      	movs	r6, r4
 800065e:	4647      	mov	r7, r8
 8000660:	40be      	lsls	r6, r7
 8000662:	0032      	movs	r2, r6
 8000664:	1a80      	subs	r0, r0, r2
 8000666:	4199      	sbcs	r1, r3
 8000668:	9000      	str	r0, [sp, #0]
 800066a:	9101      	str	r1, [sp, #4]
 800066c:	e79e      	b.n	80005ac <__udivmoddi4+0x84>
 800066e:	42a3      	cmp	r3, r4
 8000670:	d8bc      	bhi.n	80005ec <__udivmoddi4+0xc4>
 8000672:	e782      	b.n	800057a <__udivmoddi4+0x52>
 8000674:	4642      	mov	r2, r8
 8000676:	2320      	movs	r3, #32
 8000678:	2100      	movs	r1, #0
 800067a:	1a9b      	subs	r3, r3, r2
 800067c:	2200      	movs	r2, #0
 800067e:	9100      	str	r1, [sp, #0]
 8000680:	9201      	str	r2, [sp, #4]
 8000682:	2201      	movs	r2, #1
 8000684:	40da      	lsrs	r2, r3
 8000686:	9201      	str	r2, [sp, #4]
 8000688:	e785      	b.n	8000596 <__udivmoddi4+0x6e>
 800068a:	4642      	mov	r2, r8
 800068c:	2320      	movs	r3, #32
 800068e:	1a9b      	subs	r3, r3, r2
 8000690:	002a      	movs	r2, r5
 8000692:	4646      	mov	r6, r8
 8000694:	409a      	lsls	r2, r3
 8000696:	0023      	movs	r3, r4
 8000698:	40f3      	lsrs	r3, r6
 800069a:	4644      	mov	r4, r8
 800069c:	4313      	orrs	r3, r2
 800069e:	002a      	movs	r2, r5
 80006a0:	40e2      	lsrs	r2, r4
 80006a2:	001c      	movs	r4, r3
 80006a4:	465b      	mov	r3, fp
 80006a6:	0015      	movs	r5, r2
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	dad4      	bge.n	8000656 <__udivmoddi4+0x12e>
 80006ac:	4642      	mov	r2, r8
 80006ae:	002f      	movs	r7, r5
 80006b0:	2320      	movs	r3, #32
 80006b2:	0026      	movs	r6, r4
 80006b4:	4097      	lsls	r7, r2
 80006b6:	1a9b      	subs	r3, r3, r2
 80006b8:	40de      	lsrs	r6, r3
 80006ba:	003b      	movs	r3, r7
 80006bc:	4333      	orrs	r3, r6
 80006be:	e7cd      	b.n	800065c <__udivmoddi4+0x134>

080006c0 <__aeabi_fadd>:
 80006c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c2:	46ce      	mov	lr, r9
 80006c4:	4647      	mov	r7, r8
 80006c6:	0243      	lsls	r3, r0, #9
 80006c8:	0a5a      	lsrs	r2, r3, #9
 80006ca:	024e      	lsls	r6, r1, #9
 80006cc:	0045      	lsls	r5, r0, #1
 80006ce:	0fc4      	lsrs	r4, r0, #31
 80006d0:	0048      	lsls	r0, r1, #1
 80006d2:	4691      	mov	r9, r2
 80006d4:	0e2d      	lsrs	r5, r5, #24
 80006d6:	0a72      	lsrs	r2, r6, #9
 80006d8:	0e00      	lsrs	r0, r0, #24
 80006da:	4694      	mov	ip, r2
 80006dc:	b580      	push	{r7, lr}
 80006de:	099b      	lsrs	r3, r3, #6
 80006e0:	0fc9      	lsrs	r1, r1, #31
 80006e2:	09b6      	lsrs	r6, r6, #6
 80006e4:	1a2a      	subs	r2, r5, r0
 80006e6:	428c      	cmp	r4, r1
 80006e8:	d021      	beq.n	800072e <__aeabi_fadd+0x6e>
 80006ea:	2a00      	cmp	r2, #0
 80006ec:	dd0d      	ble.n	800070a <__aeabi_fadd+0x4a>
 80006ee:	2800      	cmp	r0, #0
 80006f0:	d12d      	bne.n	800074e <__aeabi_fadd+0x8e>
 80006f2:	2e00      	cmp	r6, #0
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fadd+0x38>
 80006f6:	e08d      	b.n	8000814 <__aeabi_fadd+0x154>
 80006f8:	1e51      	subs	r1, r2, #1
 80006fa:	2a01      	cmp	r2, #1
 80006fc:	d100      	bne.n	8000700 <__aeabi_fadd+0x40>
 80006fe:	e11d      	b.n	800093c <__aeabi_fadd+0x27c>
 8000700:	2aff      	cmp	r2, #255	@ 0xff
 8000702:	d100      	bne.n	8000706 <__aeabi_fadd+0x46>
 8000704:	e0ab      	b.n	800085e <__aeabi_fadd+0x19e>
 8000706:	000a      	movs	r2, r1
 8000708:	e027      	b.n	800075a <__aeabi_fadd+0x9a>
 800070a:	2a00      	cmp	r2, #0
 800070c:	d04d      	beq.n	80007aa <__aeabi_fadd+0xea>
 800070e:	1b42      	subs	r2, r0, r5
 8000710:	2d00      	cmp	r5, #0
 8000712:	d000      	beq.n	8000716 <__aeabi_fadd+0x56>
 8000714:	e0cc      	b.n	80008b0 <__aeabi_fadd+0x1f0>
 8000716:	2b00      	cmp	r3, #0
 8000718:	d100      	bne.n	800071c <__aeabi_fadd+0x5c>
 800071a:	e079      	b.n	8000810 <__aeabi_fadd+0x150>
 800071c:	1e54      	subs	r4, r2, #1
 800071e:	2a01      	cmp	r2, #1
 8000720:	d100      	bne.n	8000724 <__aeabi_fadd+0x64>
 8000722:	e128      	b.n	8000976 <__aeabi_fadd+0x2b6>
 8000724:	2aff      	cmp	r2, #255	@ 0xff
 8000726:	d100      	bne.n	800072a <__aeabi_fadd+0x6a>
 8000728:	e097      	b.n	800085a <__aeabi_fadd+0x19a>
 800072a:	0022      	movs	r2, r4
 800072c:	e0c5      	b.n	80008ba <__aeabi_fadd+0x1fa>
 800072e:	2a00      	cmp	r2, #0
 8000730:	dc00      	bgt.n	8000734 <__aeabi_fadd+0x74>
 8000732:	e096      	b.n	8000862 <__aeabi_fadd+0x1a2>
 8000734:	2800      	cmp	r0, #0
 8000736:	d04f      	beq.n	80007d8 <__aeabi_fadd+0x118>
 8000738:	2dff      	cmp	r5, #255	@ 0xff
 800073a:	d100      	bne.n	800073e <__aeabi_fadd+0x7e>
 800073c:	e08f      	b.n	800085e <__aeabi_fadd+0x19e>
 800073e:	2180      	movs	r1, #128	@ 0x80
 8000740:	04c9      	lsls	r1, r1, #19
 8000742:	430e      	orrs	r6, r1
 8000744:	2a1b      	cmp	r2, #27
 8000746:	dd51      	ble.n	80007ec <__aeabi_fadd+0x12c>
 8000748:	002a      	movs	r2, r5
 800074a:	3301      	adds	r3, #1
 800074c:	e018      	b.n	8000780 <__aeabi_fadd+0xc0>
 800074e:	2dff      	cmp	r5, #255	@ 0xff
 8000750:	d100      	bne.n	8000754 <__aeabi_fadd+0x94>
 8000752:	e084      	b.n	800085e <__aeabi_fadd+0x19e>
 8000754:	2180      	movs	r1, #128	@ 0x80
 8000756:	04c9      	lsls	r1, r1, #19
 8000758:	430e      	orrs	r6, r1
 800075a:	2101      	movs	r1, #1
 800075c:	2a1b      	cmp	r2, #27
 800075e:	dc08      	bgt.n	8000772 <__aeabi_fadd+0xb2>
 8000760:	0031      	movs	r1, r6
 8000762:	2020      	movs	r0, #32
 8000764:	40d1      	lsrs	r1, r2
 8000766:	1a82      	subs	r2, r0, r2
 8000768:	4096      	lsls	r6, r2
 800076a:	0032      	movs	r2, r6
 800076c:	1e50      	subs	r0, r2, #1
 800076e:	4182      	sbcs	r2, r0
 8000770:	4311      	orrs	r1, r2
 8000772:	1a5b      	subs	r3, r3, r1
 8000774:	015a      	lsls	r2, r3, #5
 8000776:	d459      	bmi.n	800082c <__aeabi_fadd+0x16c>
 8000778:	2107      	movs	r1, #7
 800077a:	002a      	movs	r2, r5
 800077c:	4019      	ands	r1, r3
 800077e:	d049      	beq.n	8000814 <__aeabi_fadd+0x154>
 8000780:	210f      	movs	r1, #15
 8000782:	4019      	ands	r1, r3
 8000784:	2904      	cmp	r1, #4
 8000786:	d000      	beq.n	800078a <__aeabi_fadd+0xca>
 8000788:	3304      	adds	r3, #4
 800078a:	0159      	lsls	r1, r3, #5
 800078c:	d542      	bpl.n	8000814 <__aeabi_fadd+0x154>
 800078e:	1c50      	adds	r0, r2, #1
 8000790:	2afe      	cmp	r2, #254	@ 0xfe
 8000792:	d03a      	beq.n	800080a <__aeabi_fadd+0x14a>
 8000794:	019b      	lsls	r3, r3, #6
 8000796:	b2c0      	uxtb	r0, r0
 8000798:	0a5b      	lsrs	r3, r3, #9
 800079a:	05c0      	lsls	r0, r0, #23
 800079c:	4318      	orrs	r0, r3
 800079e:	07e4      	lsls	r4, r4, #31
 80007a0:	4320      	orrs	r0, r4
 80007a2:	bcc0      	pop	{r6, r7}
 80007a4:	46b9      	mov	r9, r7
 80007a6:	46b0      	mov	r8, r6
 80007a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007aa:	20fe      	movs	r0, #254	@ 0xfe
 80007ac:	4680      	mov	r8, r0
 80007ae:	1c6f      	adds	r7, r5, #1
 80007b0:	0038      	movs	r0, r7
 80007b2:	4647      	mov	r7, r8
 80007b4:	4207      	tst	r7, r0
 80007b6:	d000      	beq.n	80007ba <__aeabi_fadd+0xfa>
 80007b8:	e08e      	b.n	80008d8 <__aeabi_fadd+0x218>
 80007ba:	2d00      	cmp	r5, #0
 80007bc:	d000      	beq.n	80007c0 <__aeabi_fadd+0x100>
 80007be:	e0b4      	b.n	800092a <__aeabi_fadd+0x26a>
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d100      	bne.n	80007c6 <__aeabi_fadd+0x106>
 80007c4:	e0db      	b.n	800097e <__aeabi_fadd+0x2be>
 80007c6:	2e00      	cmp	r6, #0
 80007c8:	d06c      	beq.n	80008a4 <__aeabi_fadd+0x1e4>
 80007ca:	1b98      	subs	r0, r3, r6
 80007cc:	0145      	lsls	r5, r0, #5
 80007ce:	d400      	bmi.n	80007d2 <__aeabi_fadd+0x112>
 80007d0:	e0f7      	b.n	80009c2 <__aeabi_fadd+0x302>
 80007d2:	000c      	movs	r4, r1
 80007d4:	1af3      	subs	r3, r6, r3
 80007d6:	e03d      	b.n	8000854 <__aeabi_fadd+0x194>
 80007d8:	2e00      	cmp	r6, #0
 80007da:	d01b      	beq.n	8000814 <__aeabi_fadd+0x154>
 80007dc:	1e51      	subs	r1, r2, #1
 80007de:	2a01      	cmp	r2, #1
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fadd+0x124>
 80007e2:	e082      	b.n	80008ea <__aeabi_fadd+0x22a>
 80007e4:	2aff      	cmp	r2, #255	@ 0xff
 80007e6:	d03a      	beq.n	800085e <__aeabi_fadd+0x19e>
 80007e8:	000a      	movs	r2, r1
 80007ea:	e7ab      	b.n	8000744 <__aeabi_fadd+0x84>
 80007ec:	0031      	movs	r1, r6
 80007ee:	2020      	movs	r0, #32
 80007f0:	40d1      	lsrs	r1, r2
 80007f2:	1a82      	subs	r2, r0, r2
 80007f4:	4096      	lsls	r6, r2
 80007f6:	0032      	movs	r2, r6
 80007f8:	1e50      	subs	r0, r2, #1
 80007fa:	4182      	sbcs	r2, r0
 80007fc:	430a      	orrs	r2, r1
 80007fe:	189b      	adds	r3, r3, r2
 8000800:	015a      	lsls	r2, r3, #5
 8000802:	d5b9      	bpl.n	8000778 <__aeabi_fadd+0xb8>
 8000804:	1c6a      	adds	r2, r5, #1
 8000806:	2dfe      	cmp	r5, #254	@ 0xfe
 8000808:	d175      	bne.n	80008f6 <__aeabi_fadd+0x236>
 800080a:	20ff      	movs	r0, #255	@ 0xff
 800080c:	2300      	movs	r3, #0
 800080e:	e7c4      	b.n	800079a <__aeabi_fadd+0xda>
 8000810:	000c      	movs	r4, r1
 8000812:	0033      	movs	r3, r6
 8000814:	08db      	lsrs	r3, r3, #3
 8000816:	2aff      	cmp	r2, #255	@ 0xff
 8000818:	d146      	bne.n	80008a8 <__aeabi_fadd+0x1e8>
 800081a:	2b00      	cmp	r3, #0
 800081c:	d0f5      	beq.n	800080a <__aeabi_fadd+0x14a>
 800081e:	2280      	movs	r2, #128	@ 0x80
 8000820:	03d2      	lsls	r2, r2, #15
 8000822:	4313      	orrs	r3, r2
 8000824:	025b      	lsls	r3, r3, #9
 8000826:	20ff      	movs	r0, #255	@ 0xff
 8000828:	0a5b      	lsrs	r3, r3, #9
 800082a:	e7b6      	b.n	800079a <__aeabi_fadd+0xda>
 800082c:	019f      	lsls	r7, r3, #6
 800082e:	09bf      	lsrs	r7, r7, #6
 8000830:	0038      	movs	r0, r7
 8000832:	f000 fb3f 	bl	8000eb4 <__clzsi2>
 8000836:	3805      	subs	r0, #5
 8000838:	4087      	lsls	r7, r0
 800083a:	4285      	cmp	r5, r0
 800083c:	dc24      	bgt.n	8000888 <__aeabi_fadd+0x1c8>
 800083e:	003b      	movs	r3, r7
 8000840:	2120      	movs	r1, #32
 8000842:	1b42      	subs	r2, r0, r5
 8000844:	3201      	adds	r2, #1
 8000846:	40d3      	lsrs	r3, r2
 8000848:	1a8a      	subs	r2, r1, r2
 800084a:	4097      	lsls	r7, r2
 800084c:	1e7a      	subs	r2, r7, #1
 800084e:	4197      	sbcs	r7, r2
 8000850:	2200      	movs	r2, #0
 8000852:	433b      	orrs	r3, r7
 8000854:	0759      	lsls	r1, r3, #29
 8000856:	d193      	bne.n	8000780 <__aeabi_fadd+0xc0>
 8000858:	e797      	b.n	800078a <__aeabi_fadd+0xca>
 800085a:	000c      	movs	r4, r1
 800085c:	0033      	movs	r3, r6
 800085e:	08db      	lsrs	r3, r3, #3
 8000860:	e7db      	b.n	800081a <__aeabi_fadd+0x15a>
 8000862:	2a00      	cmp	r2, #0
 8000864:	d014      	beq.n	8000890 <__aeabi_fadd+0x1d0>
 8000866:	1b42      	subs	r2, r0, r5
 8000868:	2d00      	cmp	r5, #0
 800086a:	d14b      	bne.n	8000904 <__aeabi_fadd+0x244>
 800086c:	2b00      	cmp	r3, #0
 800086e:	d0d0      	beq.n	8000812 <__aeabi_fadd+0x152>
 8000870:	1e51      	subs	r1, r2, #1
 8000872:	2a01      	cmp	r2, #1
 8000874:	d100      	bne.n	8000878 <__aeabi_fadd+0x1b8>
 8000876:	e09e      	b.n	80009b6 <__aeabi_fadd+0x2f6>
 8000878:	2aff      	cmp	r2, #255	@ 0xff
 800087a:	d0ef      	beq.n	800085c <__aeabi_fadd+0x19c>
 800087c:	000a      	movs	r2, r1
 800087e:	2a1b      	cmp	r2, #27
 8000880:	dd5f      	ble.n	8000942 <__aeabi_fadd+0x282>
 8000882:	0002      	movs	r2, r0
 8000884:	1c73      	adds	r3, r6, #1
 8000886:	e77b      	b.n	8000780 <__aeabi_fadd+0xc0>
 8000888:	4b50      	ldr	r3, [pc, #320]	@ (80009cc <__aeabi_fadd+0x30c>)
 800088a:	1a2a      	subs	r2, r5, r0
 800088c:	403b      	ands	r3, r7
 800088e:	e7e1      	b.n	8000854 <__aeabi_fadd+0x194>
 8000890:	21fe      	movs	r1, #254	@ 0xfe
 8000892:	1c6a      	adds	r2, r5, #1
 8000894:	4211      	tst	r1, r2
 8000896:	d13b      	bne.n	8000910 <__aeabi_fadd+0x250>
 8000898:	2d00      	cmp	r5, #0
 800089a:	d15d      	bne.n	8000958 <__aeabi_fadd+0x298>
 800089c:	2b00      	cmp	r3, #0
 800089e:	d07f      	beq.n	80009a0 <__aeabi_fadd+0x2e0>
 80008a0:	2e00      	cmp	r6, #0
 80008a2:	d17f      	bne.n	80009a4 <__aeabi_fadd+0x2e4>
 80008a4:	2200      	movs	r2, #0
 80008a6:	08db      	lsrs	r3, r3, #3
 80008a8:	025b      	lsls	r3, r3, #9
 80008aa:	0a5b      	lsrs	r3, r3, #9
 80008ac:	b2d0      	uxtb	r0, r2
 80008ae:	e774      	b.n	800079a <__aeabi_fadd+0xda>
 80008b0:	28ff      	cmp	r0, #255	@ 0xff
 80008b2:	d0d2      	beq.n	800085a <__aeabi_fadd+0x19a>
 80008b4:	2480      	movs	r4, #128	@ 0x80
 80008b6:	04e4      	lsls	r4, r4, #19
 80008b8:	4323      	orrs	r3, r4
 80008ba:	2401      	movs	r4, #1
 80008bc:	2a1b      	cmp	r2, #27
 80008be:	dc07      	bgt.n	80008d0 <__aeabi_fadd+0x210>
 80008c0:	001c      	movs	r4, r3
 80008c2:	2520      	movs	r5, #32
 80008c4:	40d4      	lsrs	r4, r2
 80008c6:	1aaa      	subs	r2, r5, r2
 80008c8:	4093      	lsls	r3, r2
 80008ca:	1e5a      	subs	r2, r3, #1
 80008cc:	4193      	sbcs	r3, r2
 80008ce:	431c      	orrs	r4, r3
 80008d0:	1b33      	subs	r3, r6, r4
 80008d2:	0005      	movs	r5, r0
 80008d4:	000c      	movs	r4, r1
 80008d6:	e74d      	b.n	8000774 <__aeabi_fadd+0xb4>
 80008d8:	1b9f      	subs	r7, r3, r6
 80008da:	017a      	lsls	r2, r7, #5
 80008dc:	d422      	bmi.n	8000924 <__aeabi_fadd+0x264>
 80008de:	2f00      	cmp	r7, #0
 80008e0:	d1a6      	bne.n	8000830 <__aeabi_fadd+0x170>
 80008e2:	2400      	movs	r4, #0
 80008e4:	2000      	movs	r0, #0
 80008e6:	2300      	movs	r3, #0
 80008e8:	e757      	b.n	800079a <__aeabi_fadd+0xda>
 80008ea:	199b      	adds	r3, r3, r6
 80008ec:	2501      	movs	r5, #1
 80008ee:	3201      	adds	r2, #1
 80008f0:	0159      	lsls	r1, r3, #5
 80008f2:	d400      	bmi.n	80008f6 <__aeabi_fadd+0x236>
 80008f4:	e740      	b.n	8000778 <__aeabi_fadd+0xb8>
 80008f6:	2101      	movs	r1, #1
 80008f8:	4835      	ldr	r0, [pc, #212]	@ (80009d0 <__aeabi_fadd+0x310>)
 80008fa:	4019      	ands	r1, r3
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	4003      	ands	r3, r0
 8000900:	430b      	orrs	r3, r1
 8000902:	e7a7      	b.n	8000854 <__aeabi_fadd+0x194>
 8000904:	28ff      	cmp	r0, #255	@ 0xff
 8000906:	d0a9      	beq.n	800085c <__aeabi_fadd+0x19c>
 8000908:	2180      	movs	r1, #128	@ 0x80
 800090a:	04c9      	lsls	r1, r1, #19
 800090c:	430b      	orrs	r3, r1
 800090e:	e7b6      	b.n	800087e <__aeabi_fadd+0x1be>
 8000910:	2aff      	cmp	r2, #255	@ 0xff
 8000912:	d100      	bne.n	8000916 <__aeabi_fadd+0x256>
 8000914:	e779      	b.n	800080a <__aeabi_fadd+0x14a>
 8000916:	199b      	adds	r3, r3, r6
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	0759      	lsls	r1, r3, #29
 800091c:	d000      	beq.n	8000920 <__aeabi_fadd+0x260>
 800091e:	e72f      	b.n	8000780 <__aeabi_fadd+0xc0>
 8000920:	08db      	lsrs	r3, r3, #3
 8000922:	e7c1      	b.n	80008a8 <__aeabi_fadd+0x1e8>
 8000924:	000c      	movs	r4, r1
 8000926:	1af7      	subs	r7, r6, r3
 8000928:	e782      	b.n	8000830 <__aeabi_fadd+0x170>
 800092a:	2b00      	cmp	r3, #0
 800092c:	d12c      	bne.n	8000988 <__aeabi_fadd+0x2c8>
 800092e:	2e00      	cmp	r6, #0
 8000930:	d193      	bne.n	800085a <__aeabi_fadd+0x19a>
 8000932:	2380      	movs	r3, #128	@ 0x80
 8000934:	2400      	movs	r4, #0
 8000936:	20ff      	movs	r0, #255	@ 0xff
 8000938:	03db      	lsls	r3, r3, #15
 800093a:	e72e      	b.n	800079a <__aeabi_fadd+0xda>
 800093c:	2501      	movs	r5, #1
 800093e:	1b9b      	subs	r3, r3, r6
 8000940:	e718      	b.n	8000774 <__aeabi_fadd+0xb4>
 8000942:	0019      	movs	r1, r3
 8000944:	2520      	movs	r5, #32
 8000946:	40d1      	lsrs	r1, r2
 8000948:	1aaa      	subs	r2, r5, r2
 800094a:	4093      	lsls	r3, r2
 800094c:	1e5a      	subs	r2, r3, #1
 800094e:	4193      	sbcs	r3, r2
 8000950:	430b      	orrs	r3, r1
 8000952:	0005      	movs	r5, r0
 8000954:	199b      	adds	r3, r3, r6
 8000956:	e753      	b.n	8000800 <__aeabi_fadd+0x140>
 8000958:	2b00      	cmp	r3, #0
 800095a:	d100      	bne.n	800095e <__aeabi_fadd+0x29e>
 800095c:	e77e      	b.n	800085c <__aeabi_fadd+0x19c>
 800095e:	2e00      	cmp	r6, #0
 8000960:	d100      	bne.n	8000964 <__aeabi_fadd+0x2a4>
 8000962:	e77c      	b.n	800085e <__aeabi_fadd+0x19e>
 8000964:	2280      	movs	r2, #128	@ 0x80
 8000966:	03d2      	lsls	r2, r2, #15
 8000968:	4591      	cmp	r9, r2
 800096a:	d302      	bcc.n	8000972 <__aeabi_fadd+0x2b2>
 800096c:	4594      	cmp	ip, r2
 800096e:	d200      	bcs.n	8000972 <__aeabi_fadd+0x2b2>
 8000970:	0033      	movs	r3, r6
 8000972:	08db      	lsrs	r3, r3, #3
 8000974:	e753      	b.n	800081e <__aeabi_fadd+0x15e>
 8000976:	000c      	movs	r4, r1
 8000978:	1af3      	subs	r3, r6, r3
 800097a:	3501      	adds	r5, #1
 800097c:	e6fa      	b.n	8000774 <__aeabi_fadd+0xb4>
 800097e:	2e00      	cmp	r6, #0
 8000980:	d0af      	beq.n	80008e2 <__aeabi_fadd+0x222>
 8000982:	000c      	movs	r4, r1
 8000984:	0033      	movs	r3, r6
 8000986:	e78d      	b.n	80008a4 <__aeabi_fadd+0x1e4>
 8000988:	2e00      	cmp	r6, #0
 800098a:	d100      	bne.n	800098e <__aeabi_fadd+0x2ce>
 800098c:	e767      	b.n	800085e <__aeabi_fadd+0x19e>
 800098e:	2280      	movs	r2, #128	@ 0x80
 8000990:	03d2      	lsls	r2, r2, #15
 8000992:	4591      	cmp	r9, r2
 8000994:	d3ed      	bcc.n	8000972 <__aeabi_fadd+0x2b2>
 8000996:	4594      	cmp	ip, r2
 8000998:	d2eb      	bcs.n	8000972 <__aeabi_fadd+0x2b2>
 800099a:	000c      	movs	r4, r1
 800099c:	0033      	movs	r3, r6
 800099e:	e7e8      	b.n	8000972 <__aeabi_fadd+0x2b2>
 80009a0:	0033      	movs	r3, r6
 80009a2:	e77f      	b.n	80008a4 <__aeabi_fadd+0x1e4>
 80009a4:	199b      	adds	r3, r3, r6
 80009a6:	2200      	movs	r2, #0
 80009a8:	0159      	lsls	r1, r3, #5
 80009aa:	d5b9      	bpl.n	8000920 <__aeabi_fadd+0x260>
 80009ac:	4a07      	ldr	r2, [pc, #28]	@ (80009cc <__aeabi_fadd+0x30c>)
 80009ae:	4013      	ands	r3, r2
 80009b0:	08db      	lsrs	r3, r3, #3
 80009b2:	2201      	movs	r2, #1
 80009b4:	e778      	b.n	80008a8 <__aeabi_fadd+0x1e8>
 80009b6:	199b      	adds	r3, r3, r6
 80009b8:	3201      	adds	r2, #1
 80009ba:	3501      	adds	r5, #1
 80009bc:	0159      	lsls	r1, r3, #5
 80009be:	d49a      	bmi.n	80008f6 <__aeabi_fadd+0x236>
 80009c0:	e6da      	b.n	8000778 <__aeabi_fadd+0xb8>
 80009c2:	1e03      	subs	r3, r0, #0
 80009c4:	d08d      	beq.n	80008e2 <__aeabi_fadd+0x222>
 80009c6:	08db      	lsrs	r3, r3, #3
 80009c8:	e76e      	b.n	80008a8 <__aeabi_fadd+0x1e8>
 80009ca:	46c0      	nop			@ (mov r8, r8)
 80009cc:	fbffffff 	.word	0xfbffffff
 80009d0:	7dffffff 	.word	0x7dffffff

080009d4 <__eqsf2>:
 80009d4:	b570      	push	{r4, r5, r6, lr}
 80009d6:	0042      	lsls	r2, r0, #1
 80009d8:	024e      	lsls	r6, r1, #9
 80009da:	004c      	lsls	r4, r1, #1
 80009dc:	0245      	lsls	r5, r0, #9
 80009de:	0a6d      	lsrs	r5, r5, #9
 80009e0:	0e12      	lsrs	r2, r2, #24
 80009e2:	0fc3      	lsrs	r3, r0, #31
 80009e4:	0a76      	lsrs	r6, r6, #9
 80009e6:	0e24      	lsrs	r4, r4, #24
 80009e8:	0fc9      	lsrs	r1, r1, #31
 80009ea:	2aff      	cmp	r2, #255	@ 0xff
 80009ec:	d010      	beq.n	8000a10 <__eqsf2+0x3c>
 80009ee:	2cff      	cmp	r4, #255	@ 0xff
 80009f0:	d00c      	beq.n	8000a0c <__eqsf2+0x38>
 80009f2:	2001      	movs	r0, #1
 80009f4:	42a2      	cmp	r2, r4
 80009f6:	d10a      	bne.n	8000a0e <__eqsf2+0x3a>
 80009f8:	42b5      	cmp	r5, r6
 80009fa:	d108      	bne.n	8000a0e <__eqsf2+0x3a>
 80009fc:	428b      	cmp	r3, r1
 80009fe:	d00f      	beq.n	8000a20 <__eqsf2+0x4c>
 8000a00:	2a00      	cmp	r2, #0
 8000a02:	d104      	bne.n	8000a0e <__eqsf2+0x3a>
 8000a04:	0028      	movs	r0, r5
 8000a06:	1e43      	subs	r3, r0, #1
 8000a08:	4198      	sbcs	r0, r3
 8000a0a:	e000      	b.n	8000a0e <__eqsf2+0x3a>
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
 8000a10:	2001      	movs	r0, #1
 8000a12:	2cff      	cmp	r4, #255	@ 0xff
 8000a14:	d1fb      	bne.n	8000a0e <__eqsf2+0x3a>
 8000a16:	4335      	orrs	r5, r6
 8000a18:	d1f9      	bne.n	8000a0e <__eqsf2+0x3a>
 8000a1a:	404b      	eors	r3, r1
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	e7f6      	b.n	8000a0e <__eqsf2+0x3a>
 8000a20:	2000      	movs	r0, #0
 8000a22:	e7f4      	b.n	8000a0e <__eqsf2+0x3a>

08000a24 <__gesf2>:
 8000a24:	b530      	push	{r4, r5, lr}
 8000a26:	0042      	lsls	r2, r0, #1
 8000a28:	0244      	lsls	r4, r0, #9
 8000a2a:	024d      	lsls	r5, r1, #9
 8000a2c:	0fc3      	lsrs	r3, r0, #31
 8000a2e:	0048      	lsls	r0, r1, #1
 8000a30:	0a64      	lsrs	r4, r4, #9
 8000a32:	0e12      	lsrs	r2, r2, #24
 8000a34:	0a6d      	lsrs	r5, r5, #9
 8000a36:	0e00      	lsrs	r0, r0, #24
 8000a38:	0fc9      	lsrs	r1, r1, #31
 8000a3a:	2aff      	cmp	r2, #255	@ 0xff
 8000a3c:	d019      	beq.n	8000a72 <__gesf2+0x4e>
 8000a3e:	28ff      	cmp	r0, #255	@ 0xff
 8000a40:	d00b      	beq.n	8000a5a <__gesf2+0x36>
 8000a42:	2a00      	cmp	r2, #0
 8000a44:	d11e      	bne.n	8000a84 <__gesf2+0x60>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	d10b      	bne.n	8000a62 <__gesf2+0x3e>
 8000a4a:	2d00      	cmp	r5, #0
 8000a4c:	d027      	beq.n	8000a9e <__gesf2+0x7a>
 8000a4e:	2c00      	cmp	r4, #0
 8000a50:	d134      	bne.n	8000abc <__gesf2+0x98>
 8000a52:	2900      	cmp	r1, #0
 8000a54:	d02f      	beq.n	8000ab6 <__gesf2+0x92>
 8000a56:	0008      	movs	r0, r1
 8000a58:	bd30      	pop	{r4, r5, pc}
 8000a5a:	2d00      	cmp	r5, #0
 8000a5c:	d128      	bne.n	8000ab0 <__gesf2+0x8c>
 8000a5e:	2a00      	cmp	r2, #0
 8000a60:	d101      	bne.n	8000a66 <__gesf2+0x42>
 8000a62:	2c00      	cmp	r4, #0
 8000a64:	d0f5      	beq.n	8000a52 <__gesf2+0x2e>
 8000a66:	428b      	cmp	r3, r1
 8000a68:	d107      	bne.n	8000a7a <__gesf2+0x56>
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d023      	beq.n	8000ab6 <__gesf2+0x92>
 8000a6e:	0018      	movs	r0, r3
 8000a70:	e7f2      	b.n	8000a58 <__gesf2+0x34>
 8000a72:	2c00      	cmp	r4, #0
 8000a74:	d11c      	bne.n	8000ab0 <__gesf2+0x8c>
 8000a76:	28ff      	cmp	r0, #255	@ 0xff
 8000a78:	d014      	beq.n	8000aa4 <__gesf2+0x80>
 8000a7a:	1e58      	subs	r0, r3, #1
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	4018      	ands	r0, r3
 8000a80:	3801      	subs	r0, #1
 8000a82:	e7e9      	b.n	8000a58 <__gesf2+0x34>
 8000a84:	2800      	cmp	r0, #0
 8000a86:	d0f8      	beq.n	8000a7a <__gesf2+0x56>
 8000a88:	428b      	cmp	r3, r1
 8000a8a:	d1f6      	bne.n	8000a7a <__gesf2+0x56>
 8000a8c:	4282      	cmp	r2, r0
 8000a8e:	dcf4      	bgt.n	8000a7a <__gesf2+0x56>
 8000a90:	dbeb      	blt.n	8000a6a <__gesf2+0x46>
 8000a92:	42ac      	cmp	r4, r5
 8000a94:	d8f1      	bhi.n	8000a7a <__gesf2+0x56>
 8000a96:	2000      	movs	r0, #0
 8000a98:	42ac      	cmp	r4, r5
 8000a9a:	d2dd      	bcs.n	8000a58 <__gesf2+0x34>
 8000a9c:	e7e5      	b.n	8000a6a <__gesf2+0x46>
 8000a9e:	2c00      	cmp	r4, #0
 8000aa0:	d0da      	beq.n	8000a58 <__gesf2+0x34>
 8000aa2:	e7ea      	b.n	8000a7a <__gesf2+0x56>
 8000aa4:	2d00      	cmp	r5, #0
 8000aa6:	d103      	bne.n	8000ab0 <__gesf2+0x8c>
 8000aa8:	428b      	cmp	r3, r1
 8000aaa:	d1e6      	bne.n	8000a7a <__gesf2+0x56>
 8000aac:	2000      	movs	r0, #0
 8000aae:	e7d3      	b.n	8000a58 <__gesf2+0x34>
 8000ab0:	2002      	movs	r0, #2
 8000ab2:	4240      	negs	r0, r0
 8000ab4:	e7d0      	b.n	8000a58 <__gesf2+0x34>
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	4240      	negs	r0, r0
 8000aba:	e7cd      	b.n	8000a58 <__gesf2+0x34>
 8000abc:	428b      	cmp	r3, r1
 8000abe:	d0e8      	beq.n	8000a92 <__gesf2+0x6e>
 8000ac0:	e7db      	b.n	8000a7a <__gesf2+0x56>
 8000ac2:	46c0      	nop			@ (mov r8, r8)

08000ac4 <__lesf2>:
 8000ac4:	b530      	push	{r4, r5, lr}
 8000ac6:	0042      	lsls	r2, r0, #1
 8000ac8:	0244      	lsls	r4, r0, #9
 8000aca:	024d      	lsls	r5, r1, #9
 8000acc:	0fc3      	lsrs	r3, r0, #31
 8000ace:	0048      	lsls	r0, r1, #1
 8000ad0:	0a64      	lsrs	r4, r4, #9
 8000ad2:	0e12      	lsrs	r2, r2, #24
 8000ad4:	0a6d      	lsrs	r5, r5, #9
 8000ad6:	0e00      	lsrs	r0, r0, #24
 8000ad8:	0fc9      	lsrs	r1, r1, #31
 8000ada:	2aff      	cmp	r2, #255	@ 0xff
 8000adc:	d01a      	beq.n	8000b14 <__lesf2+0x50>
 8000ade:	28ff      	cmp	r0, #255	@ 0xff
 8000ae0:	d00e      	beq.n	8000b00 <__lesf2+0x3c>
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d11e      	bne.n	8000b24 <__lesf2+0x60>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	d10e      	bne.n	8000b08 <__lesf2+0x44>
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	d02a      	beq.n	8000b44 <__lesf2+0x80>
 8000aee:	2c00      	cmp	r4, #0
 8000af0:	d00c      	beq.n	8000b0c <__lesf2+0x48>
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d01d      	beq.n	8000b32 <__lesf2+0x6e>
 8000af6:	1e58      	subs	r0, r3, #1
 8000af8:	2302      	movs	r3, #2
 8000afa:	4018      	ands	r0, r3
 8000afc:	3801      	subs	r0, #1
 8000afe:	e010      	b.n	8000b22 <__lesf2+0x5e>
 8000b00:	2d00      	cmp	r5, #0
 8000b02:	d10d      	bne.n	8000b20 <__lesf2+0x5c>
 8000b04:	2a00      	cmp	r2, #0
 8000b06:	d120      	bne.n	8000b4a <__lesf2+0x86>
 8000b08:	2c00      	cmp	r4, #0
 8000b0a:	d11e      	bne.n	8000b4a <__lesf2+0x86>
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	d023      	beq.n	8000b58 <__lesf2+0x94>
 8000b10:	0008      	movs	r0, r1
 8000b12:	e006      	b.n	8000b22 <__lesf2+0x5e>
 8000b14:	2c00      	cmp	r4, #0
 8000b16:	d103      	bne.n	8000b20 <__lesf2+0x5c>
 8000b18:	28ff      	cmp	r0, #255	@ 0xff
 8000b1a:	d1ec      	bne.n	8000af6 <__lesf2+0x32>
 8000b1c:	2d00      	cmp	r5, #0
 8000b1e:	d017      	beq.n	8000b50 <__lesf2+0x8c>
 8000b20:	2002      	movs	r0, #2
 8000b22:	bd30      	pop	{r4, r5, pc}
 8000b24:	2800      	cmp	r0, #0
 8000b26:	d0e6      	beq.n	8000af6 <__lesf2+0x32>
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	d1e4      	bne.n	8000af6 <__lesf2+0x32>
 8000b2c:	4282      	cmp	r2, r0
 8000b2e:	dce2      	bgt.n	8000af6 <__lesf2+0x32>
 8000b30:	db04      	blt.n	8000b3c <__lesf2+0x78>
 8000b32:	42ac      	cmp	r4, r5
 8000b34:	d8df      	bhi.n	8000af6 <__lesf2+0x32>
 8000b36:	2000      	movs	r0, #0
 8000b38:	42ac      	cmp	r4, r5
 8000b3a:	d2f2      	bcs.n	8000b22 <__lesf2+0x5e>
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d00b      	beq.n	8000b58 <__lesf2+0x94>
 8000b40:	0018      	movs	r0, r3
 8000b42:	e7ee      	b.n	8000b22 <__lesf2+0x5e>
 8000b44:	2c00      	cmp	r4, #0
 8000b46:	d0ec      	beq.n	8000b22 <__lesf2+0x5e>
 8000b48:	e7d5      	b.n	8000af6 <__lesf2+0x32>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d1d3      	bne.n	8000af6 <__lesf2+0x32>
 8000b4e:	e7f5      	b.n	8000b3c <__lesf2+0x78>
 8000b50:	2000      	movs	r0, #0
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d0e5      	beq.n	8000b22 <__lesf2+0x5e>
 8000b56:	e7ce      	b.n	8000af6 <__lesf2+0x32>
 8000b58:	2001      	movs	r0, #1
 8000b5a:	4240      	negs	r0, r0
 8000b5c:	e7e1      	b.n	8000b22 <__lesf2+0x5e>
 8000b5e:	46c0      	nop			@ (mov r8, r8)

08000b60 <__aeabi_fmul>:
 8000b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b62:	464f      	mov	r7, r9
 8000b64:	4646      	mov	r6, r8
 8000b66:	46d6      	mov	lr, sl
 8000b68:	0243      	lsls	r3, r0, #9
 8000b6a:	0a5b      	lsrs	r3, r3, #9
 8000b6c:	0045      	lsls	r5, r0, #1
 8000b6e:	b5c0      	push	{r6, r7, lr}
 8000b70:	4699      	mov	r9, r3
 8000b72:	1c0f      	adds	r7, r1, #0
 8000b74:	0e2d      	lsrs	r5, r5, #24
 8000b76:	0fc6      	lsrs	r6, r0, #31
 8000b78:	2d00      	cmp	r5, #0
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_fmul+0x1e>
 8000b7c:	e088      	b.n	8000c90 <__aeabi_fmul+0x130>
 8000b7e:	2dff      	cmp	r5, #255	@ 0xff
 8000b80:	d100      	bne.n	8000b84 <__aeabi_fmul+0x24>
 8000b82:	e08d      	b.n	8000ca0 <__aeabi_fmul+0x140>
 8000b84:	2280      	movs	r2, #128	@ 0x80
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	04d2      	lsls	r2, r2, #19
 8000b8a:	431a      	orrs	r2, r3
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	4691      	mov	r9, r2
 8000b90:	4698      	mov	r8, r3
 8000b92:	469a      	mov	sl, r3
 8000b94:	3d7f      	subs	r5, #127	@ 0x7f
 8000b96:	027c      	lsls	r4, r7, #9
 8000b98:	007b      	lsls	r3, r7, #1
 8000b9a:	0a64      	lsrs	r4, r4, #9
 8000b9c:	0e1b      	lsrs	r3, r3, #24
 8000b9e:	0fff      	lsrs	r7, r7, #31
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d068      	beq.n	8000c76 <__aeabi_fmul+0x116>
 8000ba4:	2bff      	cmp	r3, #255	@ 0xff
 8000ba6:	d021      	beq.n	8000bec <__aeabi_fmul+0x8c>
 8000ba8:	2280      	movs	r2, #128	@ 0x80
 8000baa:	00e4      	lsls	r4, r4, #3
 8000bac:	04d2      	lsls	r2, r2, #19
 8000bae:	4314      	orrs	r4, r2
 8000bb0:	4642      	mov	r2, r8
 8000bb2:	3b7f      	subs	r3, #127	@ 0x7f
 8000bb4:	195b      	adds	r3, r3, r5
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	1c5d      	adds	r5, r3, #1
 8000bba:	2a0a      	cmp	r2, #10
 8000bbc:	dc2e      	bgt.n	8000c1c <__aeabi_fmul+0xbc>
 8000bbe:	407e      	eors	r6, r7
 8000bc0:	4642      	mov	r2, r8
 8000bc2:	2a02      	cmp	r2, #2
 8000bc4:	dc23      	bgt.n	8000c0e <__aeabi_fmul+0xae>
 8000bc6:	3a01      	subs	r2, #1
 8000bc8:	2a01      	cmp	r2, #1
 8000bca:	d900      	bls.n	8000bce <__aeabi_fmul+0x6e>
 8000bcc:	e0bd      	b.n	8000d4a <__aeabi_fmul+0x1ea>
 8000bce:	2902      	cmp	r1, #2
 8000bd0:	d06e      	beq.n	8000cb0 <__aeabi_fmul+0x150>
 8000bd2:	2901      	cmp	r1, #1
 8000bd4:	d12c      	bne.n	8000c30 <__aeabi_fmul+0xd0>
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	2200      	movs	r2, #0
 8000bda:	05c0      	lsls	r0, r0, #23
 8000bdc:	07f6      	lsls	r6, r6, #31
 8000bde:	4310      	orrs	r0, r2
 8000be0:	4330      	orrs	r0, r6
 8000be2:	bce0      	pop	{r5, r6, r7}
 8000be4:	46ba      	mov	sl, r7
 8000be6:	46b1      	mov	r9, r6
 8000be8:	46a8      	mov	r8, r5
 8000bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bec:	002b      	movs	r3, r5
 8000bee:	33ff      	adds	r3, #255	@ 0xff
 8000bf0:	2c00      	cmp	r4, #0
 8000bf2:	d065      	beq.n	8000cc0 <__aeabi_fmul+0x160>
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	4641      	mov	r1, r8
 8000bf8:	4311      	orrs	r1, r2
 8000bfa:	0032      	movs	r2, r6
 8000bfc:	3501      	adds	r5, #1
 8000bfe:	4688      	mov	r8, r1
 8000c00:	407a      	eors	r2, r7
 8000c02:	35ff      	adds	r5, #255	@ 0xff
 8000c04:	290a      	cmp	r1, #10
 8000c06:	dd00      	ble.n	8000c0a <__aeabi_fmul+0xaa>
 8000c08:	e0d8      	b.n	8000dbc <__aeabi_fmul+0x25c>
 8000c0a:	0016      	movs	r6, r2
 8000c0c:	2103      	movs	r1, #3
 8000c0e:	4640      	mov	r0, r8
 8000c10:	2201      	movs	r2, #1
 8000c12:	4082      	lsls	r2, r0
 8000c14:	20a6      	movs	r0, #166	@ 0xa6
 8000c16:	00c0      	lsls	r0, r0, #3
 8000c18:	4202      	tst	r2, r0
 8000c1a:	d020      	beq.n	8000c5e <__aeabi_fmul+0xfe>
 8000c1c:	4653      	mov	r3, sl
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d046      	beq.n	8000cb0 <__aeabi_fmul+0x150>
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d100      	bne.n	8000c28 <__aeabi_fmul+0xc8>
 8000c26:	e0bb      	b.n	8000da0 <__aeabi_fmul+0x240>
 8000c28:	4651      	mov	r1, sl
 8000c2a:	464c      	mov	r4, r9
 8000c2c:	2901      	cmp	r1, #1
 8000c2e:	d0d2      	beq.n	8000bd6 <__aeabi_fmul+0x76>
 8000c30:	002b      	movs	r3, r5
 8000c32:	337f      	adds	r3, #127	@ 0x7f
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	dd70      	ble.n	8000d1a <__aeabi_fmul+0x1ba>
 8000c38:	0762      	lsls	r2, r4, #29
 8000c3a:	d004      	beq.n	8000c46 <__aeabi_fmul+0xe6>
 8000c3c:	220f      	movs	r2, #15
 8000c3e:	4022      	ands	r2, r4
 8000c40:	2a04      	cmp	r2, #4
 8000c42:	d000      	beq.n	8000c46 <__aeabi_fmul+0xe6>
 8000c44:	3404      	adds	r4, #4
 8000c46:	0122      	lsls	r2, r4, #4
 8000c48:	d503      	bpl.n	8000c52 <__aeabi_fmul+0xf2>
 8000c4a:	4b63      	ldr	r3, [pc, #396]	@ (8000dd8 <__aeabi_fmul+0x278>)
 8000c4c:	401c      	ands	r4, r3
 8000c4e:	002b      	movs	r3, r5
 8000c50:	3380      	adds	r3, #128	@ 0x80
 8000c52:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c54:	dc2c      	bgt.n	8000cb0 <__aeabi_fmul+0x150>
 8000c56:	01a2      	lsls	r2, r4, #6
 8000c58:	0a52      	lsrs	r2, r2, #9
 8000c5a:	b2d8      	uxtb	r0, r3
 8000c5c:	e7bd      	b.n	8000bda <__aeabi_fmul+0x7a>
 8000c5e:	2090      	movs	r0, #144	@ 0x90
 8000c60:	0080      	lsls	r0, r0, #2
 8000c62:	4202      	tst	r2, r0
 8000c64:	d127      	bne.n	8000cb6 <__aeabi_fmul+0x156>
 8000c66:	38b9      	subs	r0, #185	@ 0xb9
 8000c68:	38ff      	subs	r0, #255	@ 0xff
 8000c6a:	4210      	tst	r0, r2
 8000c6c:	d06d      	beq.n	8000d4a <__aeabi_fmul+0x1ea>
 8000c6e:	003e      	movs	r6, r7
 8000c70:	46a1      	mov	r9, r4
 8000c72:	468a      	mov	sl, r1
 8000c74:	e7d2      	b.n	8000c1c <__aeabi_fmul+0xbc>
 8000c76:	2c00      	cmp	r4, #0
 8000c78:	d141      	bne.n	8000cfe <__aeabi_fmul+0x19e>
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	4642      	mov	r2, r8
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	4690      	mov	r8, r2
 8000c82:	002b      	movs	r3, r5
 8000c84:	4642      	mov	r2, r8
 8000c86:	2101      	movs	r1, #1
 8000c88:	1c5d      	adds	r5, r3, #1
 8000c8a:	2a0a      	cmp	r2, #10
 8000c8c:	dd97      	ble.n	8000bbe <__aeabi_fmul+0x5e>
 8000c8e:	e7c5      	b.n	8000c1c <__aeabi_fmul+0xbc>
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d126      	bne.n	8000ce2 <__aeabi_fmul+0x182>
 8000c94:	2304      	movs	r3, #4
 8000c96:	4698      	mov	r8, r3
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	2500      	movs	r5, #0
 8000c9c:	469a      	mov	sl, r3
 8000c9e:	e77a      	b.n	8000b96 <__aeabi_fmul+0x36>
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d118      	bne.n	8000cd6 <__aeabi_fmul+0x176>
 8000ca4:	2308      	movs	r3, #8
 8000ca6:	4698      	mov	r8, r3
 8000ca8:	3b06      	subs	r3, #6
 8000caa:	25ff      	movs	r5, #255	@ 0xff
 8000cac:	469a      	mov	sl, r3
 8000cae:	e772      	b.n	8000b96 <__aeabi_fmul+0x36>
 8000cb0:	20ff      	movs	r0, #255	@ 0xff
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	e791      	b.n	8000bda <__aeabi_fmul+0x7a>
 8000cb6:	2280      	movs	r2, #128	@ 0x80
 8000cb8:	2600      	movs	r6, #0
 8000cba:	20ff      	movs	r0, #255	@ 0xff
 8000cbc:	03d2      	lsls	r2, r2, #15
 8000cbe:	e78c      	b.n	8000bda <__aeabi_fmul+0x7a>
 8000cc0:	4641      	mov	r1, r8
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	3501      	adds	r5, #1
 8000cc6:	4311      	orrs	r1, r2
 8000cc8:	4688      	mov	r8, r1
 8000cca:	35ff      	adds	r5, #255	@ 0xff
 8000ccc:	290a      	cmp	r1, #10
 8000cce:	dca5      	bgt.n	8000c1c <__aeabi_fmul+0xbc>
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	407e      	eors	r6, r7
 8000cd4:	e774      	b.n	8000bc0 <__aeabi_fmul+0x60>
 8000cd6:	230c      	movs	r3, #12
 8000cd8:	4698      	mov	r8, r3
 8000cda:	3b09      	subs	r3, #9
 8000cdc:	25ff      	movs	r5, #255	@ 0xff
 8000cde:	469a      	mov	sl, r3
 8000ce0:	e759      	b.n	8000b96 <__aeabi_fmul+0x36>
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f000 f8e6 	bl	8000eb4 <__clzsi2>
 8000ce8:	464a      	mov	r2, r9
 8000cea:	1f43      	subs	r3, r0, #5
 8000cec:	2576      	movs	r5, #118	@ 0x76
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	426d      	negs	r5, r5
 8000cf4:	4691      	mov	r9, r2
 8000cf6:	4698      	mov	r8, r3
 8000cf8:	469a      	mov	sl, r3
 8000cfa:	1a2d      	subs	r5, r5, r0
 8000cfc:	e74b      	b.n	8000b96 <__aeabi_fmul+0x36>
 8000cfe:	0020      	movs	r0, r4
 8000d00:	f000 f8d8 	bl	8000eb4 <__clzsi2>
 8000d04:	4642      	mov	r2, r8
 8000d06:	1f43      	subs	r3, r0, #5
 8000d08:	409c      	lsls	r4, r3
 8000d0a:	1a2b      	subs	r3, r5, r0
 8000d0c:	3b76      	subs	r3, #118	@ 0x76
 8000d0e:	2100      	movs	r1, #0
 8000d10:	1c5d      	adds	r5, r3, #1
 8000d12:	2a0a      	cmp	r2, #10
 8000d14:	dc00      	bgt.n	8000d18 <__aeabi_fmul+0x1b8>
 8000d16:	e752      	b.n	8000bbe <__aeabi_fmul+0x5e>
 8000d18:	e780      	b.n	8000c1c <__aeabi_fmul+0xbc>
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b1b      	cmp	r3, #27
 8000d20:	dd00      	ble.n	8000d24 <__aeabi_fmul+0x1c4>
 8000d22:	e758      	b.n	8000bd6 <__aeabi_fmul+0x76>
 8000d24:	359e      	adds	r5, #158	@ 0x9e
 8000d26:	0022      	movs	r2, r4
 8000d28:	40ac      	lsls	r4, r5
 8000d2a:	40da      	lsrs	r2, r3
 8000d2c:	1e63      	subs	r3, r4, #1
 8000d2e:	419c      	sbcs	r4, r3
 8000d30:	4322      	orrs	r2, r4
 8000d32:	0753      	lsls	r3, r2, #29
 8000d34:	d004      	beq.n	8000d40 <__aeabi_fmul+0x1e0>
 8000d36:	230f      	movs	r3, #15
 8000d38:	4013      	ands	r3, r2
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	d000      	beq.n	8000d40 <__aeabi_fmul+0x1e0>
 8000d3e:	3204      	adds	r2, #4
 8000d40:	0153      	lsls	r3, r2, #5
 8000d42:	d537      	bpl.n	8000db4 <__aeabi_fmul+0x254>
 8000d44:	2001      	movs	r0, #1
 8000d46:	2200      	movs	r2, #0
 8000d48:	e747      	b.n	8000bda <__aeabi_fmul+0x7a>
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	464a      	mov	r2, r9
 8000d4e:	0424      	lsls	r4, r4, #16
 8000d50:	0c24      	lsrs	r4, r4, #16
 8000d52:	0027      	movs	r7, r4
 8000d54:	0c10      	lsrs	r0, r2, #16
 8000d56:	0412      	lsls	r2, r2, #16
 8000d58:	0c12      	lsrs	r2, r2, #16
 8000d5a:	4344      	muls	r4, r0
 8000d5c:	4357      	muls	r7, r2
 8000d5e:	4348      	muls	r0, r1
 8000d60:	4351      	muls	r1, r2
 8000d62:	0c3a      	lsrs	r2, r7, #16
 8000d64:	1909      	adds	r1, r1, r4
 8000d66:	1852      	adds	r2, r2, r1
 8000d68:	4294      	cmp	r4, r2
 8000d6a:	d903      	bls.n	8000d74 <__aeabi_fmul+0x214>
 8000d6c:	2180      	movs	r1, #128	@ 0x80
 8000d6e:	0249      	lsls	r1, r1, #9
 8000d70:	468c      	mov	ip, r1
 8000d72:	4460      	add	r0, ip
 8000d74:	043f      	lsls	r7, r7, #16
 8000d76:	0411      	lsls	r1, r2, #16
 8000d78:	0c3f      	lsrs	r7, r7, #16
 8000d7a:	19c9      	adds	r1, r1, r7
 8000d7c:	018c      	lsls	r4, r1, #6
 8000d7e:	1e67      	subs	r7, r4, #1
 8000d80:	41bc      	sbcs	r4, r7
 8000d82:	0c12      	lsrs	r2, r2, #16
 8000d84:	0e89      	lsrs	r1, r1, #26
 8000d86:	1812      	adds	r2, r2, r0
 8000d88:	430c      	orrs	r4, r1
 8000d8a:	0192      	lsls	r2, r2, #6
 8000d8c:	4314      	orrs	r4, r2
 8000d8e:	0112      	lsls	r2, r2, #4
 8000d90:	d50e      	bpl.n	8000db0 <__aeabi_fmul+0x250>
 8000d92:	2301      	movs	r3, #1
 8000d94:	0862      	lsrs	r2, r4, #1
 8000d96:	401c      	ands	r4, r3
 8000d98:	4314      	orrs	r4, r2
 8000d9a:	e749      	b.n	8000c30 <__aeabi_fmul+0xd0>
 8000d9c:	003e      	movs	r6, r7
 8000d9e:	46a1      	mov	r9, r4
 8000da0:	2280      	movs	r2, #128	@ 0x80
 8000da2:	464b      	mov	r3, r9
 8000da4:	03d2      	lsls	r2, r2, #15
 8000da6:	431a      	orrs	r2, r3
 8000da8:	0252      	lsls	r2, r2, #9
 8000daa:	20ff      	movs	r0, #255	@ 0xff
 8000dac:	0a52      	lsrs	r2, r2, #9
 8000dae:	e714      	b.n	8000bda <__aeabi_fmul+0x7a>
 8000db0:	001d      	movs	r5, r3
 8000db2:	e73d      	b.n	8000c30 <__aeabi_fmul+0xd0>
 8000db4:	0192      	lsls	r2, r2, #6
 8000db6:	2000      	movs	r0, #0
 8000db8:	0a52      	lsrs	r2, r2, #9
 8000dba:	e70e      	b.n	8000bda <__aeabi_fmul+0x7a>
 8000dbc:	290f      	cmp	r1, #15
 8000dbe:	d1ed      	bne.n	8000d9c <__aeabi_fmul+0x23c>
 8000dc0:	2280      	movs	r2, #128	@ 0x80
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	03d2      	lsls	r2, r2, #15
 8000dc6:	4213      	tst	r3, r2
 8000dc8:	d0ea      	beq.n	8000da0 <__aeabi_fmul+0x240>
 8000dca:	4214      	tst	r4, r2
 8000dcc:	d1e8      	bne.n	8000da0 <__aeabi_fmul+0x240>
 8000dce:	003e      	movs	r6, r7
 8000dd0:	20ff      	movs	r0, #255	@ 0xff
 8000dd2:	4322      	orrs	r2, r4
 8000dd4:	e701      	b.n	8000bda <__aeabi_fmul+0x7a>
 8000dd6:	46c0      	nop			@ (mov r8, r8)
 8000dd8:	f7ffffff 	.word	0xf7ffffff

08000ddc <__aeabi_f2iz>:
 8000ddc:	0241      	lsls	r1, r0, #9
 8000dde:	0042      	lsls	r2, r0, #1
 8000de0:	0fc3      	lsrs	r3, r0, #31
 8000de2:	0a49      	lsrs	r1, r1, #9
 8000de4:	2000      	movs	r0, #0
 8000de6:	0e12      	lsrs	r2, r2, #24
 8000de8:	2a7e      	cmp	r2, #126	@ 0x7e
 8000dea:	dd03      	ble.n	8000df4 <__aeabi_f2iz+0x18>
 8000dec:	2a9d      	cmp	r2, #157	@ 0x9d
 8000dee:	dd02      	ble.n	8000df6 <__aeabi_f2iz+0x1a>
 8000df0:	4a09      	ldr	r2, [pc, #36]	@ (8000e18 <__aeabi_f2iz+0x3c>)
 8000df2:	1898      	adds	r0, r3, r2
 8000df4:	4770      	bx	lr
 8000df6:	2080      	movs	r0, #128	@ 0x80
 8000df8:	0400      	lsls	r0, r0, #16
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	2a95      	cmp	r2, #149	@ 0x95
 8000dfe:	dc07      	bgt.n	8000e10 <__aeabi_f2iz+0x34>
 8000e00:	2096      	movs	r0, #150	@ 0x96
 8000e02:	1a82      	subs	r2, r0, r2
 8000e04:	40d1      	lsrs	r1, r2
 8000e06:	4248      	negs	r0, r1
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1f3      	bne.n	8000df4 <__aeabi_f2iz+0x18>
 8000e0c:	0008      	movs	r0, r1
 8000e0e:	e7f1      	b.n	8000df4 <__aeabi_f2iz+0x18>
 8000e10:	3a96      	subs	r2, #150	@ 0x96
 8000e12:	4091      	lsls	r1, r2
 8000e14:	e7f7      	b.n	8000e06 <__aeabi_f2iz+0x2a>
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	7fffffff 	.word	0x7fffffff

08000e1c <__aeabi_i2f>:
 8000e1c:	b570      	push	{r4, r5, r6, lr}
 8000e1e:	2800      	cmp	r0, #0
 8000e20:	d013      	beq.n	8000e4a <__aeabi_i2f+0x2e>
 8000e22:	17c3      	asrs	r3, r0, #31
 8000e24:	18c5      	adds	r5, r0, r3
 8000e26:	405d      	eors	r5, r3
 8000e28:	0fc4      	lsrs	r4, r0, #31
 8000e2a:	0028      	movs	r0, r5
 8000e2c:	f000 f842 	bl	8000eb4 <__clzsi2>
 8000e30:	239e      	movs	r3, #158	@ 0x9e
 8000e32:	0001      	movs	r1, r0
 8000e34:	1a1b      	subs	r3, r3, r0
 8000e36:	2b96      	cmp	r3, #150	@ 0x96
 8000e38:	dc0f      	bgt.n	8000e5a <__aeabi_i2f+0x3e>
 8000e3a:	2808      	cmp	r0, #8
 8000e3c:	d034      	beq.n	8000ea8 <__aeabi_i2f+0x8c>
 8000e3e:	3908      	subs	r1, #8
 8000e40:	408d      	lsls	r5, r1
 8000e42:	026d      	lsls	r5, r5, #9
 8000e44:	0a6d      	lsrs	r5, r5, #9
 8000e46:	b2d8      	uxtb	r0, r3
 8000e48:	e002      	b.n	8000e50 <__aeabi_i2f+0x34>
 8000e4a:	2400      	movs	r4, #0
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	2500      	movs	r5, #0
 8000e50:	05c0      	lsls	r0, r0, #23
 8000e52:	4328      	orrs	r0, r5
 8000e54:	07e4      	lsls	r4, r4, #31
 8000e56:	4320      	orrs	r0, r4
 8000e58:	bd70      	pop	{r4, r5, r6, pc}
 8000e5a:	2b99      	cmp	r3, #153	@ 0x99
 8000e5c:	dc16      	bgt.n	8000e8c <__aeabi_i2f+0x70>
 8000e5e:	1f42      	subs	r2, r0, #5
 8000e60:	2805      	cmp	r0, #5
 8000e62:	d000      	beq.n	8000e66 <__aeabi_i2f+0x4a>
 8000e64:	4095      	lsls	r5, r2
 8000e66:	002a      	movs	r2, r5
 8000e68:	4811      	ldr	r0, [pc, #68]	@ (8000eb0 <__aeabi_i2f+0x94>)
 8000e6a:	4002      	ands	r2, r0
 8000e6c:	076e      	lsls	r6, r5, #29
 8000e6e:	d009      	beq.n	8000e84 <__aeabi_i2f+0x68>
 8000e70:	260f      	movs	r6, #15
 8000e72:	4035      	ands	r5, r6
 8000e74:	2d04      	cmp	r5, #4
 8000e76:	d005      	beq.n	8000e84 <__aeabi_i2f+0x68>
 8000e78:	3204      	adds	r2, #4
 8000e7a:	0155      	lsls	r5, r2, #5
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_i2f+0x68>
 8000e7e:	239f      	movs	r3, #159	@ 0x9f
 8000e80:	4002      	ands	r2, r0
 8000e82:	1a5b      	subs	r3, r3, r1
 8000e84:	0192      	lsls	r2, r2, #6
 8000e86:	0a55      	lsrs	r5, r2, #9
 8000e88:	b2d8      	uxtb	r0, r3
 8000e8a:	e7e1      	b.n	8000e50 <__aeabi_i2f+0x34>
 8000e8c:	2205      	movs	r2, #5
 8000e8e:	1a12      	subs	r2, r2, r0
 8000e90:	0028      	movs	r0, r5
 8000e92:	40d0      	lsrs	r0, r2
 8000e94:	0002      	movs	r2, r0
 8000e96:	0008      	movs	r0, r1
 8000e98:	301b      	adds	r0, #27
 8000e9a:	4085      	lsls	r5, r0
 8000e9c:	0028      	movs	r0, r5
 8000e9e:	1e45      	subs	r5, r0, #1
 8000ea0:	41a8      	sbcs	r0, r5
 8000ea2:	4302      	orrs	r2, r0
 8000ea4:	0015      	movs	r5, r2
 8000ea6:	e7de      	b.n	8000e66 <__aeabi_i2f+0x4a>
 8000ea8:	026d      	lsls	r5, r5, #9
 8000eaa:	2096      	movs	r0, #150	@ 0x96
 8000eac:	0a6d      	lsrs	r5, r5, #9
 8000eae:	e7cf      	b.n	8000e50 <__aeabi_i2f+0x34>
 8000eb0:	fbffffff 	.word	0xfbffffff

08000eb4 <__clzsi2>:
 8000eb4:	211c      	movs	r1, #28
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	041b      	lsls	r3, r3, #16
 8000eba:	4298      	cmp	r0, r3
 8000ebc:	d301      	bcc.n	8000ec2 <__clzsi2+0xe>
 8000ebe:	0c00      	lsrs	r0, r0, #16
 8000ec0:	3910      	subs	r1, #16
 8000ec2:	0a1b      	lsrs	r3, r3, #8
 8000ec4:	4298      	cmp	r0, r3
 8000ec6:	d301      	bcc.n	8000ecc <__clzsi2+0x18>
 8000ec8:	0a00      	lsrs	r0, r0, #8
 8000eca:	3908      	subs	r1, #8
 8000ecc:	091b      	lsrs	r3, r3, #4
 8000ece:	4298      	cmp	r0, r3
 8000ed0:	d301      	bcc.n	8000ed6 <__clzsi2+0x22>
 8000ed2:	0900      	lsrs	r0, r0, #4
 8000ed4:	3904      	subs	r1, #4
 8000ed6:	a202      	add	r2, pc, #8	@ (adr r2, 8000ee0 <__clzsi2+0x2c>)
 8000ed8:	5c10      	ldrb	r0, [r2, r0]
 8000eda:	1840      	adds	r0, r0, r1
 8000edc:	4770      	bx	lr
 8000ede:	46c0      	nop			@ (mov r8, r8)
 8000ee0:	02020304 	.word	0x02020304
 8000ee4:	01010101 	.word	0x01010101
	...

08000ef0 <__clzdi2>:
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	2900      	cmp	r1, #0
 8000ef4:	d103      	bne.n	8000efe <__clzdi2+0xe>
 8000ef6:	f7ff ffdd 	bl	8000eb4 <__clzsi2>
 8000efa:	3020      	adds	r0, #32
 8000efc:	e002      	b.n	8000f04 <__clzdi2+0x14>
 8000efe:	0008      	movs	r0, r1
 8000f00:	f7ff ffd8 	bl	8000eb4 <__clzsi2>
 8000f04:	bd10      	pop	{r4, pc}
 8000f06:	46c0      	nop			@ (mov r8, r8)

08000f08 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b087      	sub	sp, #28
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	0002      	movs	r2, r0
 8000f10:	1dfb      	adds	r3, r7, #7
 8000f12:	701a      	strb	r2, [r3, #0]
 8000f14:	1dbb      	adds	r3, r7, #6
 8000f16:	1c0a      	adds	r2, r1, #0
 8000f18:	701a      	strb	r2, [r3, #0]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	4a16      	ldr	r2, [pc, #88]	@ (8000f78 <I2C_LCD_ExpanderWrite+0x70>)
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	18d3      	adds	r3, r2, r3
 8000f24:	3301      	adds	r3, #1
 8000f26:	781a      	ldrb	r2, [r3, #0]
 8000f28:	1dbb      	adds	r3, r7, #6
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	240f      	movs	r4, #15
 8000f32:	193b      	adds	r3, r7, r4
 8000f34:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	4910      	ldr	r1, [pc, #64]	@ (8000f7c <I2C_LCD_ExpanderWrite+0x74>)
 8000f3c:	0013      	movs	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	189b      	adds	r3, r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	18cb      	adds	r3, r1, r3
 8000f46:	3304      	adds	r3, #4
 8000f48:	6818      	ldr	r0, [r3, #0]
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	781a      	ldrb	r2, [r3, #0]
 8000f4e:	490b      	ldr	r1, [pc, #44]	@ (8000f7c <I2C_LCD_ExpanderWrite+0x74>)
 8000f50:	0013      	movs	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	189b      	adds	r3, r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	18cb      	adds	r3, r1, r3
 8000f5a:	3308      	adds	r3, #8
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	18db      	adds	r3, r3, r3
 8000f60:	b299      	uxth	r1, r3
 8000f62:	193a      	adds	r2, r7, r4
 8000f64:	2364      	movs	r3, #100	@ 0x64
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2301      	movs	r3, #1
 8000f6a:	f002 fce3 	bl	8003934 <HAL_I2C_Master_Transmit>
}
 8000f6e:	46c0      	nop			@ (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b005      	add	sp, #20
 8000f74:	bd90      	pop	{r4, r7, pc}
 8000f76:	46c0      	nop			@ (mov r8, r8)
 8000f78:	20000078 	.word	0x20000078
 8000f7c:	080074c8 	.word	0x080074c8

08000f80 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	0002      	movs	r2, r0
 8000f88:	1dfb      	adds	r3, r7, #7
 8000f8a:	701a      	strb	r2, [r3, #0]
 8000f8c:	1dbb      	adds	r3, r7, #6
 8000f8e:	1c0a      	adds	r2, r1, #0
 8000f90:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8000f92:	1dbb      	adds	r3, r7, #6
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2204      	movs	r2, #4
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	1dfb      	adds	r3, r7, #7
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	0011      	movs	r1, r2
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f7ff ffb0 	bl	8000f08 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8000fa8:	4b25      	ldr	r3, [pc, #148]	@ (8001040 <I2C_LCD_EnPulse+0xc0>)
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	4b25      	ldr	r3, [pc, #148]	@ (8001044 <I2C_LCD_EnPulse+0xc4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4925      	ldr	r1, [pc, #148]	@ (8001048 <I2C_LCD_EnPulse+0xc8>)
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f7ff f8b9 	bl	800012c <__udivsi3>
 8000fba:	0003      	movs	r3, r0
 8000fbc:	005c      	lsls	r4, r3, #1
 8000fbe:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <I2C_LCD_EnPulse+0xc4>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4921      	ldr	r1, [pc, #132]	@ (8001048 <I2C_LCD_EnPulse+0xc8>)
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff f8b1 	bl	800012c <__udivsi3>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	085b      	lsrs	r3, r3, #1
 8000fce:	1ae3      	subs	r3, r4, r3
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001040 <I2C_LCD_EnPulse+0xc0>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f8      	bhi.n	8000fd2 <I2C_LCD_EnPulse+0x52>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8000fe0:	1dbb      	adds	r3, r7, #6
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	4393      	bics	r3, r2
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	0011      	movs	r1, r2
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f7ff ff89 	bl	8000f08 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8000ff6:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <I2C_LCD_EnPulse+0xc0>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <I2C_LCD_EnPulse+0xc4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4911      	ldr	r1, [pc, #68]	@ (8001048 <I2C_LCD_EnPulse+0xc8>)
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff f892 	bl	800012c <__udivsi3>
 8001008:	0003      	movs	r3, r0
 800100a:	001a      	movs	r2, r3
 800100c:	2332      	movs	r3, #50	@ 0x32
 800100e:	4353      	muls	r3, r2
 8001010:	001c      	movs	r4, r3
 8001012:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <I2C_LCD_EnPulse+0xc4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	490c      	ldr	r1, [pc, #48]	@ (8001048 <I2C_LCD_EnPulse+0xc8>)
 8001018:	0018      	movs	r0, r3
 800101a:	f7ff f887 	bl	800012c <__udivsi3>
 800101e:	0003      	movs	r3, r0
 8001020:	085b      	lsrs	r3, r3, #1
 8001022:	1ae3      	subs	r3, r4, r3
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <I2C_LCD_EnPulse+0xc0>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f8      	bhi.n	8001026 <I2C_LCD_EnPulse+0xa6>
}
 8001034:	46c0      	nop			@ (mov r8, r8)
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b007      	add	sp, #28
 800103c:	bd90      	pop	{r4, r7, pc}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	e000e010 	.word	0xe000e010
 8001044:	20000000 	.word	0x20000000
 8001048:	000f4240 	.word	0x000f4240

0800104c <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	0002      	movs	r2, r0
 8001054:	1dfb      	adds	r3, r7, #7
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	1dbb      	adds	r3, r7, #6
 800105a:	1c0a      	adds	r2, r1, #0
 800105c:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 800105e:	1dbb      	adds	r3, r7, #6
 8001060:	781a      	ldrb	r2, [r3, #0]
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	0011      	movs	r1, r2
 8001068:	0018      	movs	r0, r3
 800106a:	f7ff ff4d 	bl	8000f08 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 800106e:	1dbb      	adds	r3, r7, #6
 8001070:	781a      	ldrb	r2, [r3, #0]
 8001072:	1dfb      	adds	r3, r7, #7
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	0011      	movs	r1, r2
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff ff81 	bl	8000f80 <I2C_LCD_EnPulse>
}
 800107e:	46c0      	nop			@ (mov r8, r8)
 8001080:	46bd      	mov	sp, r7
 8001082:	b002      	add	sp, #8
 8001084:	bd80      	pop	{r7, pc}

08001086 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 8001086:	b590      	push	{r4, r7, lr}
 8001088:	b085      	sub	sp, #20
 800108a:	af00      	add	r7, sp, #0
 800108c:	0004      	movs	r4, r0
 800108e:	0008      	movs	r0, r1
 8001090:	0011      	movs	r1, r2
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	1c22      	adds	r2, r4, #0
 8001096:	701a      	strb	r2, [r3, #0]
 8001098:	1dbb      	adds	r3, r7, #6
 800109a:	1c02      	adds	r2, r0, #0
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	1d7b      	adds	r3, r7, #5
 80010a0:	1c0a      	adds	r2, r1, #0
 80010a2:	701a      	strb	r2, [r3, #0]
    uint8_t HighNib = Val & 0xF0;
 80010a4:	200f      	movs	r0, #15
 80010a6:	183b      	adds	r3, r7, r0
 80010a8:	1dba      	adds	r2, r7, #6
 80010aa:	7812      	ldrb	r2, [r2, #0]
 80010ac:	210f      	movs	r1, #15
 80010ae:	438a      	bics	r2, r1
 80010b0:	701a      	strb	r2, [r3, #0]
    uint8_t LowNib = (Val << 4) & 0xF0;
 80010b2:	1dbb      	adds	r3, r7, #6
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	011a      	lsls	r2, r3, #4
 80010b8:	240e      	movs	r4, #14
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 80010be:	183a      	adds	r2, r7, r0
 80010c0:	1d7b      	adds	r3, r7, #5
 80010c2:	7812      	ldrb	r2, [r2, #0]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	0011      	movs	r1, r2
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff ffbb 	bl	800104c <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 80010d6:	193a      	adds	r2, r7, r4
 80010d8:	1d7b      	adds	r3, r7, #5
 80010da:	7812      	ldrb	r2, [r2, #0]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	4313      	orrs	r3, r2
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	0011      	movs	r1, r2
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff ffaf 	bl	800104c <I2C_LCD_Write4Bits>
}
 80010ee:	46c0      	nop			@ (mov r8, r8)
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b005      	add	sp, #20
 80010f4:	bd90      	pop	{r4, r7, pc}

080010f6 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	0002      	movs	r2, r0
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	701a      	strb	r2, [r3, #0]
 8001102:	1dbb      	adds	r3, r7, #6
 8001104:	1c0a      	adds	r2, r1, #0
 8001106:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 8001108:	1dbb      	adds	r3, r7, #6
 800110a:	7819      	ldrb	r1, [r3, #0]
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2200      	movs	r2, #0
 8001112:	0018      	movs	r0, r3
 8001114:	f7ff ffb7 	bl	8001086 <I2C_LCD_Send>
}
 8001118:	46c0      	nop			@ (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}

08001120 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	0002      	movs	r2, r0
 8001128:	1dfb      	adds	r3, r7, #7
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	1dbb      	adds	r3, r7, #6
 800112e:	1c0a      	adds	r2, r1, #0
 8001130:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 8001132:	1dbb      	adds	r3, r7, #6
 8001134:	7819      	ldrb	r1, [r3, #0]
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2201      	movs	r2, #1
 800113c:	0018      	movs	r0, r3
 800113e:	f7ff ffa2 	bl	8001086 <I2C_LCD_Send>
}
 8001142:	46c0      	nop			@ (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b002      	add	sp, #8
 8001148:	bd80      	pop	{r7, pc}

0800114a <I2C_LCD_DisplayMotorFormat>:
 * @param I2C_LCD_InstanceIndex Indeks instancji LCD (jeśli obsługiwane są różne urządzenia LCD).
 * @param value Liczba całkowita, która ma zostać wyświetlona na ekranie.
 * @param Col Kolumna, w której ma zostać ustawiony kursor (indeks zaczyna się od 0).
 * @param Row Wiersz, w którym ma zostać ustawiony kursor (indeks zaczyna się od 0).
 */
void I2C_LCD_DisplayMotorFormat(uint8_t I2C_LCD_InstanceIndex, int32_t value, uint8_t Col, uint8_t Row){
 800114a:	b590      	push	{r4, r7, lr}
 800114c:	b087      	sub	sp, #28
 800114e:	af00      	add	r7, sp, #0
 8001150:	0004      	movs	r4, r0
 8001152:	6039      	str	r1, [r7, #0]
 8001154:	0010      	movs	r0, r2
 8001156:	0019      	movs	r1, r3
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	1c22      	adds	r2, r4, #0
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	1dbb      	adds	r3, r7, #6
 8001160:	1c02      	adds	r2, r0, #0
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	1d7b      	adds	r3, r7, #5
 8001166:	1c0a      	adds	r2, r1, #0
 8001168:	701a      	strb	r2, [r3, #0]
    char mask[5]; //przygotowanie maski do wyswietlania liczb na stalych miejscach. Format: "_ _ _ _ '\0'" - znak, setki, dziesiatki, jedn, koniec linii

    //wstepne wypelnienie maski
    for(int i = 0; i < 4; i++){
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	e008      	b.n	8001182 <I2C_LCD_DisplayMotorFormat+0x38>
        mask[i] = ' ';
 8001170:	230c      	movs	r3, #12
 8001172:	18fa      	adds	r2, r7, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	18d3      	adds	r3, r2, r3
 8001178:	2220      	movs	r2, #32
 800117a:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 4; i++){
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	3301      	adds	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2b03      	cmp	r3, #3
 8001186:	ddf3      	ble.n	8001170 <I2C_LCD_DisplayMotorFormat+0x26>
    }
    mask[4] = '\0';
 8001188:	210c      	movs	r1, #12
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2200      	movs	r2, #0
 800118e:	711a      	strb	r2, [r3, #4]

    //wpisanie liczby do maski
    if (value < 0) {
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	da05      	bge.n	80011a2 <I2C_LCD_DisplayMotorFormat+0x58>
        mask[0] = '-';
 8001196:	187b      	adds	r3, r7, r1
 8001198:	222d      	movs	r2, #45	@ 0x2d
 800119a:	701a      	strb	r2, [r3, #0]
        value = -value;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	425b      	negs	r3, r3
 80011a0:	603b      	str	r3, [r7, #0]
    }
    if(value >= 100){
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2b63      	cmp	r3, #99	@ 0x63
 80011a6:	dd10      	ble.n	80011ca <I2C_LCD_DisplayMotorFormat+0x80>
        mask[1] = '0' + (value/100) % 10;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	2164      	movs	r1, #100	@ 0x64
 80011ac:	0018      	movs	r0, r3
 80011ae:	f7ff f847 	bl	8000240 <__divsi3>
 80011b2:	0003      	movs	r3, r0
 80011b4:	210a      	movs	r1, #10
 80011b6:	0018      	movs	r0, r3
 80011b8:	f7ff f928 	bl	800040c <__aeabi_idivmod>
 80011bc:	000b      	movs	r3, r1
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	3330      	adds	r3, #48	@ 0x30
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	230c      	movs	r3, #12
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	705a      	strb	r2, [r3, #1]
    }
    if(value >= 10){
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	2b09      	cmp	r3, #9
 80011ce:	dd10      	ble.n	80011f2 <I2C_LCD_DisplayMotorFormat+0xa8>
        mask[2] = '0' + (value/10) % 10;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	210a      	movs	r1, #10
 80011d4:	0018      	movs	r0, r3
 80011d6:	f7ff f833 	bl	8000240 <__divsi3>
 80011da:	0003      	movs	r3, r0
 80011dc:	210a      	movs	r1, #10
 80011de:	0018      	movs	r0, r3
 80011e0:	f7ff f914 	bl	800040c <__aeabi_idivmod>
 80011e4:	000b      	movs	r3, r1
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	3330      	adds	r3, #48	@ 0x30
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	230c      	movs	r3, #12
 80011ee:	18fb      	adds	r3, r7, r3
 80011f0:	709a      	strb	r2, [r3, #2]
    }
    mask[3] = '0' + value % 10;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	210a      	movs	r1, #10
 80011f6:	0018      	movs	r0, r3
 80011f8:	f7ff f908 	bl	800040c <__aeabi_idivmod>
 80011fc:	000b      	movs	r3, r1
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	3330      	adds	r3, #48	@ 0x30
 8001202:	b2da      	uxtb	r2, r3
 8001204:	240c      	movs	r4, #12
 8001206:	193b      	adds	r3, r7, r4
 8001208:	70da      	strb	r2, [r3, #3]

    I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, Col, Row);
 800120a:	1d7b      	adds	r3, r7, #5
 800120c:	781a      	ldrb	r2, [r3, #0]
 800120e:	1dbb      	adds	r3, r7, #6
 8001210:	7819      	ldrb	r1, [r3, #0]
 8001212:	1dfb      	adds	r3, r7, #7
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	0018      	movs	r0, r3
 8001218:	f000 f8e8 	bl	80013ec <I2C_LCD_SetCursor>
    I2C_LCD_WriteString(I2C_LCD_InstanceIndex, mask);
 800121c:	193a      	adds	r2, r7, r4
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	0011      	movs	r1, r2
 8001224:	0018      	movs	r0, r3
 8001226:	f000 f931 	bl	800148c <I2C_LCD_WriteString>
}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	b007      	add	sp, #28
 8001230:	bd90      	pop	{r4, r7, pc}
	...

08001234 <I2C_LCD_Init>:



void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b08b      	sub	sp, #44	@ 0x2c
 8001238:	af00      	add	r7, sp, #0
 800123a:	0002      	movs	r2, r0
 800123c:	1dfb      	adds	r3, r7, #7
 800123e:	701a      	strb	r2, [r3, #0]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 8001240:	46c0      	nop			@ (mov r8, r8)
 8001242:	f001 fab9 	bl	80027b8 <HAL_GetTick>
 8001246:	0003      	movs	r3, r0
 8001248:	2b31      	cmp	r3, #49	@ 0x31
 800124a:	d9fa      	bls.n	8001242 <I2C_LCD_Init+0xe>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 800124c:	1dfb      	adds	r3, r7, #7
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2130      	movs	r1, #48	@ 0x30
 8001252:	0018      	movs	r0, r3
 8001254:	f7ff ff4f 	bl	80010f6 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24
 800125c:	e025      	b.n	80012aa <I2C_LCD_Init+0x76>
 800125e:	4b57      	ldr	r3, [pc, #348]	@ (80013bc <I2C_LCD_Init+0x188>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	4b56      	ldr	r3, [pc, #344]	@ (80013c0 <I2C_LCD_Init+0x18c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4956      	ldr	r1, [pc, #344]	@ (80013c4 <I2C_LCD_Init+0x190>)
 800126a:	0018      	movs	r0, r3
 800126c:	f7fe ff5e 	bl	800012c <__udivsi3>
 8001270:	0003      	movs	r3, r0
 8001272:	001a      	movs	r2, r3
 8001274:	0013      	movs	r3, r2
 8001276:	015b      	lsls	r3, r3, #5
 8001278:	1a9b      	subs	r3, r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	189b      	adds	r3, r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	001c      	movs	r4, r3
 8001282:	4b4f      	ldr	r3, [pc, #316]	@ (80013c0 <I2C_LCD_Init+0x18c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	494f      	ldr	r1, [pc, #316]	@ (80013c4 <I2C_LCD_Init+0x190>)
 8001288:	0018      	movs	r0, r3
 800128a:	f7fe ff4f 	bl	800012c <__udivsi3>
 800128e:	0003      	movs	r3, r0
 8001290:	085b      	lsrs	r3, r3, #1
 8001292:	1ae3      	subs	r3, r4, r3
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	4b49      	ldr	r3, [pc, #292]	@ (80013bc <I2C_LCD_Init+0x188>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d8f8      	bhi.n	8001296 <I2C_LCD_Init+0x62>
 80012a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a6:	3301      	adds	r3, #1
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d9d6      	bls.n	800125e <I2C_LCD_Init+0x2a>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80012b0:	1dfb      	adds	r3, r7, #7
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2130      	movs	r1, #48	@ 0x30
 80012b6:	0018      	movs	r0, r3
 80012b8:	f7ff ff1d 	bl	80010f6 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
 80012c0:	e025      	b.n	800130e <I2C_LCD_Init+0xda>
 80012c2:	4b3e      	ldr	r3, [pc, #248]	@ (80013bc <I2C_LCD_Init+0x188>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	4b3d      	ldr	r3, [pc, #244]	@ (80013c0 <I2C_LCD_Init+0x18c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	493d      	ldr	r1, [pc, #244]	@ (80013c4 <I2C_LCD_Init+0x190>)
 80012ce:	0018      	movs	r0, r3
 80012d0:	f7fe ff2c 	bl	800012c <__udivsi3>
 80012d4:	0003      	movs	r3, r0
 80012d6:	001a      	movs	r2, r3
 80012d8:	0013      	movs	r3, r2
 80012da:	015b      	lsls	r3, r3, #5
 80012dc:	1a9b      	subs	r3, r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	189b      	adds	r3, r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	001c      	movs	r4, r3
 80012e6:	4b36      	ldr	r3, [pc, #216]	@ (80013c0 <I2C_LCD_Init+0x18c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4936      	ldr	r1, [pc, #216]	@ (80013c4 <I2C_LCD_Init+0x190>)
 80012ec:	0018      	movs	r0, r3
 80012ee:	f7fe ff1d 	bl	800012c <__udivsi3>
 80012f2:	0003      	movs	r3, r0
 80012f4:	085b      	lsrs	r3, r3, #1
 80012f6:	1ae3      	subs	r3, r4, r3
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b30      	ldr	r3, [pc, #192]	@ (80013bc <I2C_LCD_Init+0x188>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	429a      	cmp	r2, r3
 8001306:	d8f8      	bhi.n	80012fa <I2C_LCD_Init+0xc6>
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	3301      	adds	r3, #1
 800130c:	623b      	str	r3, [r7, #32]
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	2b04      	cmp	r3, #4
 8001312:	d9d6      	bls.n	80012c2 <I2C_LCD_Init+0x8e>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8001314:	1dfb      	adds	r3, r7, #7
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2130      	movs	r1, #48	@ 0x30
 800131a:	0018      	movs	r0, r3
 800131c:	f7ff feeb 	bl	80010f6 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 8001320:	4b26      	ldr	r3, [pc, #152]	@ (80013bc <I2C_LCD_Init+0x188>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	61fb      	str	r3, [r7, #28]
 8001326:	4b26      	ldr	r3, [pc, #152]	@ (80013c0 <I2C_LCD_Init+0x18c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4926      	ldr	r1, [pc, #152]	@ (80013c4 <I2C_LCD_Init+0x190>)
 800132c:	0018      	movs	r0, r3
 800132e:	f7fe fefd 	bl	800012c <__udivsi3>
 8001332:	0003      	movs	r3, r0
 8001334:	001a      	movs	r2, r3
 8001336:	2396      	movs	r3, #150	@ 0x96
 8001338:	4353      	muls	r3, r2
 800133a:	001c      	movs	r4, r3
 800133c:	4b20      	ldr	r3, [pc, #128]	@ (80013c0 <I2C_LCD_Init+0x18c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4920      	ldr	r1, [pc, #128]	@ (80013c4 <I2C_LCD_Init+0x190>)
 8001342:	0018      	movs	r0, r3
 8001344:	f7fe fef2 	bl	800012c <__udivsi3>
 8001348:	0003      	movs	r3, r0
 800134a:	085b      	lsrs	r3, r3, #1
 800134c:	1ae3      	subs	r3, r4, r3
 800134e:	61bb      	str	r3, [r7, #24]
 8001350:	4b1a      	ldr	r3, [pc, #104]	@ (80013bc <I2C_LCD_Init+0x188>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	69fa      	ldr	r2, [r7, #28]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	429a      	cmp	r2, r3
 800135c:	d8f8      	bhi.n	8001350 <I2C_LCD_Init+0x11c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2102      	movs	r1, #2
 8001364:	0018      	movs	r0, r3
 8001366:	f7ff fec6 	bl	80010f6 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2128      	movs	r1, #40	@ 0x28
 8001370:	0018      	movs	r0, r3
 8001372:	f7ff fec0 	bl	80010f6 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	210c      	movs	r1, #12
 800137c:	0018      	movs	r0, r3
 800137e:	f7ff feba 	bl	80010f6 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2106      	movs	r1, #6
 8001388:	0018      	movs	r0, r3
 800138a:	f7ff feb4 	bl	80010f6 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	781a      	ldrb	r2, [r3, #0]
 8001392:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <I2C_LCD_Init+0x194>)
 8001394:	0052      	lsls	r2, r2, #1
 8001396:	2104      	movs	r1, #4
 8001398:	54d1      	strb	r1, [r2, r3]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4a0a      	ldr	r2, [pc, #40]	@ (80013c8 <I2C_LCD_Init+0x194>)
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	18d3      	adds	r3, r2, r3
 80013a4:	3301      	adds	r3, #1
 80013a6:	2208      	movs	r2, #8
 80013a8:	701a      	strb	r2, [r3, #0]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	0018      	movs	r0, r3
 80013b0:	f000 f80c 	bl	80013cc <I2C_LCD_Clear>
}
 80013b4:	46c0      	nop			@ (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b00b      	add	sp, #44	@ 0x2c
 80013ba:	bd90      	pop	{r4, r7, pc}
 80013bc:	e000e010 	.word	0xe000e010
 80013c0:	20000000 	.word	0x20000000
 80013c4:	000f4240 	.word	0x000f4240
 80013c8:	20000078 	.word	0x20000078

080013cc <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	0002      	movs	r2, r0
 80013d4:	1dfb      	adds	r3, r7, #7
 80013d6:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 80013d8:	1dfb      	adds	r3, r7, #7
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2101      	movs	r1, #1
 80013de:	0018      	movs	r0, r3
 80013e0:	f7ff fe89 	bl	80010f6 <I2C_LCD_Cmd>
    //DELAY_MS(2); usuniete przeze mnie
}
 80013e4:	46c0      	nop			@ (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b002      	add	sp, #8
 80013ea:	bd80      	pop	{r7, pc}

080013ec <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	0004      	movs	r4, r0
 80013f4:	0008      	movs	r0, r1
 80013f6:	0011      	movs	r1, r2
 80013f8:	1dfb      	adds	r3, r7, #7
 80013fa:	1c22      	adds	r2, r4, #0
 80013fc:	701a      	strb	r2, [r3, #0]
 80013fe:	1dbb      	adds	r3, r7, #6
 8001400:	1c02      	adds	r2, r0, #0
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	1d7b      	adds	r3, r7, #5
 8001406:	1c0a      	adds	r2, r1, #0
 8001408:	701a      	strb	r2, [r3, #0]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 800140a:	2308      	movs	r3, #8
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	4a1d      	ldr	r2, [pc, #116]	@ (8001484 <I2C_LCD_SetCursor+0x98>)
 8001410:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001412:	c313      	stmia	r3!, {r0, r1, r4}
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	601a      	str	r2, [r3, #0]
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 8001418:	1dfb      	adds	r3, r7, #7
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	491a      	ldr	r1, [pc, #104]	@ (8001488 <I2C_LCD_SetCursor+0x9c>)
 800141e:	0013      	movs	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	189b      	adds	r3, r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	18cb      	adds	r3, r1, r3
 8001428:	330a      	adds	r3, #10
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	1d7a      	adds	r2, r7, #5
 800142e:	7812      	ldrb	r2, [r2, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	d90c      	bls.n	800144e <I2C_LCD_SetCursor+0x62>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8001434:	1dfb      	adds	r3, r7, #7
 8001436:	781a      	ldrb	r2, [r3, #0]
 8001438:	4913      	ldr	r1, [pc, #76]	@ (8001488 <I2C_LCD_SetCursor+0x9c>)
 800143a:	0013      	movs	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	189b      	adds	r3, r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	18cb      	adds	r3, r1, r3
 8001444:	330a      	adds	r3, #10
 8001446:	781a      	ldrb	r2, [r3, #0]
 8001448:	1d7b      	adds	r3, r7, #5
 800144a:	3a01      	subs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 800144e:	1d7b      	adds	r3, r7, #5
 8001450:	781a      	ldrb	r2, [r3, #0]
 8001452:	2308      	movs	r3, #8
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	0092      	lsls	r2, r2, #2
 8001458:	58d3      	ldr	r3, [r2, r3]
 800145a:	b2da      	uxtb	r2, r3
 800145c:	1dbb      	adds	r3, r7, #6
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	18d3      	adds	r3, r2, r3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	b25b      	sxtb	r3, r3
 8001466:	2280      	movs	r2, #128	@ 0x80
 8001468:	4252      	negs	r2, r2
 800146a:	4313      	orrs	r3, r2
 800146c:	b25b      	sxtb	r3, r3
 800146e:	b2da      	uxtb	r2, r3
 8001470:	1dfb      	adds	r3, r7, #7
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	0011      	movs	r1, r2
 8001476:	0018      	movs	r0, r3
 8001478:	f7ff fe3d 	bl	80010f6 <I2C_LCD_Cmd>
}
 800147c:	46c0      	nop			@ (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	b007      	add	sp, #28
 8001482:	bd90      	pop	{r4, r7, pc}
 8001484:	0800746c 	.word	0x0800746c
 8001488:	080074c8 	.word	0x080074c8

0800148c <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	0002      	movs	r2, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	1dfb      	adds	r3, r7, #7
 8001498:	701a      	strb	r2, [r3, #0]
    while (*Str)
 800149a:	e009      	b.n	80014b0 <I2C_LCD_WriteString+0x24>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	603a      	str	r2, [r7, #0]
 80014a2:	781a      	ldrb	r2, [r3, #0]
 80014a4:	1dfb      	adds	r3, r7, #7
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	0011      	movs	r1, r2
 80014aa:	0018      	movs	r0, r3
 80014ac:	f7ff fe38 	bl	8001120 <I2C_LCD_Data>
    while (*Str)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f1      	bne.n	800149c <I2C_LCD_WriteString+0x10>
    }
}
 80014b8:	46c0      	nop			@ (mov r8, r8)
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	46bd      	mov	sp, r7
 80014be:	b002      	add	sp, #8
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <I2C_LCD_Backlight>:
{
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}

void I2C_LCD_Backlight(uint8_t I2C_LCD_InstanceIndex)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	0002      	movs	r2, r0
 80014cc:	1dfb      	adds	r3, r7, #7
 80014ce:	701a      	strb	r2, [r3, #0]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 80014d0:	1dfb      	adds	r3, r7, #7
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4a07      	ldr	r2, [pc, #28]	@ (80014f4 <I2C_LCD_Backlight+0x30>)
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	18d3      	adds	r3, r2, r3
 80014da:	3301      	adds	r3, #1
 80014dc:	2208      	movs	r2, #8
 80014de:	701a      	strb	r2, [r3, #0]
    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, 0);
 80014e0:	1dfb      	adds	r3, r7, #7
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2100      	movs	r1, #0
 80014e6:	0018      	movs	r0, r3
 80014e8:	f7ff fd0e 	bl	8000f08 <I2C_LCD_ExpanderWrite>
}
 80014ec:	46c0      	nop			@ (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b002      	add	sp, #8
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000078 	.word	0x20000078

080014f8 <I2C_LCD_NoBacklight>:

void I2C_LCD_NoBacklight(uint8_t I2C_LCD_InstanceIndex)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	0002      	movs	r2, r0
 8001500:	1dfb      	adds	r3, r7, #7
 8001502:	701a      	strb	r2, [r3, #0]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_NOBACKLIGHT;
 8001504:	1dfb      	adds	r3, r7, #7
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4a07      	ldr	r2, [pc, #28]	@ (8001528 <I2C_LCD_NoBacklight+0x30>)
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	18d3      	adds	r3, r2, r3
 800150e:	3301      	adds	r3, #1
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, 0);
 8001514:	1dfb      	adds	r3, r7, #7
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2100      	movs	r1, #0
 800151a:	0018      	movs	r0, r3
 800151c:	f7ff fcf4 	bl	8000f08 <I2C_LCD_ExpanderWrite>
}
 8001520:	46c0      	nop			@ (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	b002      	add	sp, #8
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000078 	.word	0x20000078

0800152c <Cytron_Set_Motor_Direction>:
 * Kierunek wynika z działania sterownika: in1 high, in2 low -> cw; in1 low, in2 high -> ccw.
 *
 * @param driver Wskaźnik do struktury sterownika silnika.
 * @param direction Kierunek obrotów (cw - zgodnie z ruchem wskazówek zegara, ccw - przeciwnie).
 */
void Cytron_Set_Motor_Direction(driver_struct *driver, Cytron_Direction direction) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	000a      	movs	r2, r1
 8001536:	1cfb      	adds	r3, r7, #3
 8001538:	701a      	strb	r2, [r3, #0]
	if (direction == cw) {
 800153a:	1cfb      	adds	r3, r7, #3
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d108      	bne.n	8001554 <Cytron_Set_Motor_Direction+0x28>
		driver->working_channel = TIM_CHANNEL_1;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
		__HAL_TIM_SET_COMPARE(driver->timer, TIM_CHANNEL_2, 0); // Ustawienie wypełnienia PWM in2 na 0%
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2200      	movs	r2, #0
 8001550:	639a      	str	r2, [r3, #56]	@ 0x38
	} else if (direction == ccw) {
		driver->working_channel = TIM_CHANNEL_2;
		__HAL_TIM_SET_COMPARE(driver->timer, TIM_CHANNEL_1, 0); // Ustawienie wypełnienia PWM in1 na 0%
	}
}
 8001552:	e00b      	b.n	800156c <Cytron_Set_Motor_Direction+0x40>
	} else if (direction == ccw) {
 8001554:	1cfb      	adds	r3, r7, #3
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d107      	bne.n	800156c <Cytron_Set_Motor_Direction+0x40>
		driver->working_channel = TIM_CHANNEL_2;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2204      	movs	r2, #4
 8001560:	609a      	str	r2, [r3, #8]
		__HAL_TIM_SET_COMPARE(driver->timer, TIM_CHANNEL_1, 0); // Ustawienie wypełnienia PWM in1 na 0%
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2200      	movs	r2, #0
 800156a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800156c:	46c0      	nop			@ (mov r8, r8)
 800156e:	46bd      	mov	sp, r7
 8001570:	b002      	add	sp, #8
 8001572:	bd80      	pop	{r7, pc}

08001574 <Cytron_Set_Motor_Speed>:
 * Prędkość ograniczona do maksymalnej wartości ARR timera.
 *
 * @param driver Wskaźnik do struktury sterownika silnika.
 * @param speed Wartość PWM określająca prędkość (0 do wartości ARR).
 */
void Cytron_Set_Motor_Speed(driver_struct *driver, uint16_t speed) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	000a      	movs	r2, r1
 800157e:	1cbb      	adds	r3, r7, #2
 8001580:	801a      	strh	r2, [r3, #0]
	if (speed >= driver->timer->Instance->ARR) {
 8001582:	1cbb      	adds	r3, r7, #2
 8001584:	881a      	ldrh	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800158e:	429a      	cmp	r2, r3
 8001590:	d305      	bcc.n	800159e <Cytron_Set_Motor_Speed+0x2a>
		speed = driver->timer->Instance->ARR;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800159a:	1cbb      	adds	r3, r7, #2
 800159c:	801a      	strh	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(driver->timer, driver->working_channel, speed);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d106      	bne.n	80015b4 <Cytron_Set_Motor_Speed+0x40>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	1cba      	adds	r2, r7, #2
 80015ae:	8812      	ldrh	r2, [r2, #0]
 80015b0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80015b2:	e01b      	b.n	80015ec <Cytron_Set_Motor_Speed+0x78>
	__HAL_TIM_SET_COMPARE(driver->timer, driver->working_channel, speed);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d106      	bne.n	80015ca <Cytron_Set_Motor_Speed+0x56>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	1cbb      	adds	r3, r7, #2
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80015c8:	e010      	b.n	80015ec <Cytron_Set_Motor_Speed+0x78>
	__HAL_TIM_SET_COMPARE(driver->timer, driver->working_channel, speed);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d106      	bne.n	80015e0 <Cytron_Set_Motor_Speed+0x6c>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	1cbb      	adds	r3, r7, #2
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80015de:	e005      	b.n	80015ec <Cytron_Set_Motor_Speed+0x78>
	__HAL_TIM_SET_COMPARE(driver->timer, driver->working_channel, speed);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	1cbb      	adds	r3, r7, #2
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80015ec:	46c0      	nop			@ (mov r8, r8)
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b002      	add	sp, #8
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <Cytron_Motor_Init>:
 * Ustawia kierunek na zgodny z ruchem wskazówek zegara (cw) i prędkość na 0.
 *
 * @param driver Wskaźnik do struktury sterownika silnika.
 * @param PWM_timer Wskaźnik do timera generującego PWM.
 */
void Cytron_Motor_Init(driver_struct *driver, TIM_HandleTypeDef *PWM_timer) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
	driver->timer = PWM_timer;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	601a      	str	r2, [r3, #0]
	driver->working_channel = TIM_CHANNEL_1;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
	Cytron_Set_Motor_Direction(driver, cw);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2100      	movs	r1, #0
 800160e:	0018      	movs	r0, r3
 8001610:	f7ff ff8c 	bl	800152c <Cytron_Set_Motor_Direction>
	Cytron_Set_Motor_Speed(driver, 0);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2100      	movs	r1, #0
 8001618:	0018      	movs	r0, r3
 800161a:	f7ff ffab 	bl	8001574 <Cytron_Set_Motor_Speed>
}
 800161e:	46c0      	nop			@ (mov r8, r8)
 8001620:	46bd      	mov	sp, r7
 8001622:	b002      	add	sp, #8
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <main>:
 * prędkością silnika na podstawie algorytmu PID oraz wyświetla aktualny stan na wyświetlaczu LCD.
 * Program obsługuje także przesyłanie danych przez UART.
 *
 * @retval int Zwraca 0 w przypadku poprawnego zakończenia.
 */
int main(void) {
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800162c:	f001 f85e 	bl	80026ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001630:	f000 f8c0 	bl	80017b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001634:	f000 fb6c 	bl	8001d10 <MX_GPIO_Init>
	MX_DMA_Init();
 8001638:	f000 fb54 	bl	8001ce4 <MX_DMA_Init>
	MX_TIM2_Init();
 800163c:	f000 f9d2 	bl	80019e4 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001640:	f000 fa5a 	bl	8001af8 <MX_TIM3_Init>
	MX_TIM21_Init();
 8001644:	f000 fac6 	bl	8001bd4 <MX_TIM21_Init>
	MX_USART2_UART_Init();
 8001648:	f000 fb1c 	bl	8001c84 <MX_USART2_UART_Init>
	MX_ADC_Init();
 800164c:	f000 f91c 	bl	8001888 <MX_ADC_Init>
	MX_I2C1_Init();
 8001650:	f000 f988 	bl	8001964 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	/* Inicjalizacja LCD */
	I2C_LCD_Init(I2C_LCD_1);
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff fded 	bl	8001234 <I2C_LCD_Init>
	I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2000      	movs	r0, #0
 8001660:	f7ff fec4 	bl	80013ec <I2C_LCD_SetCursor>
	I2C_LCD_WriteString(I2C_LCD_1, "SYSTEM");
 8001664:	4b42      	ldr	r3, [pc, #264]	@ (8001770 <main+0x148>)
 8001666:	0019      	movs	r1, r3
 8001668:	2000      	movs	r0, #0
 800166a:	f7ff ff0f 	bl	800148c <I2C_LCD_WriteString>
	I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 800166e:	2201      	movs	r2, #1
 8001670:	2100      	movs	r1, #0
 8001672:	2000      	movs	r0, #0
 8001674:	f7ff feba 	bl	80013ec <I2C_LCD_SetCursor>
	I2C_LCD_WriteString(I2C_LCD_1, "INITIALISATION");
 8001678:	4b3e      	ldr	r3, [pc, #248]	@ (8001774 <main+0x14c>)
 800167a:	0019      	movs	r1, r3
 800167c:	2000      	movs	r0, #0
 800167e:	f7ff ff05 	bl	800148c <I2C_LCD_WriteString>
	HAL_Delay(1000);
 8001682:	23fa      	movs	r3, #250	@ 0xfa
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	0018      	movs	r0, r3
 8001688:	f001 f8a0 	bl	80027cc <HAL_Delay>

	/* Inicjalizacja silnika i PID */
	Cytron_Motor_Init(&(motor_instance.driver), &htim2);
 800168c:	4a3a      	ldr	r2, [pc, #232]	@ (8001778 <main+0x150>)
 800168e:	4b3b      	ldr	r3, [pc, #236]	@ (800177c <main+0x154>)
 8001690:	0011      	movs	r1, r2
 8001692:	0018      	movs	r0, r3
 8001694:	f7ff ffae 	bl	80015f4 <Cytron_Motor_Init>
	motor_init(&motor_instance, &htim3);
 8001698:	4a39      	ldr	r2, [pc, #228]	@ (8001780 <main+0x158>)
 800169a:	4b3a      	ldr	r3, [pc, #232]	@ (8001784 <main+0x15c>)
 800169c:	0011      	movs	r1, r2
 800169e:	0018      	movs	r0, r3
 80016a0:	f000 fc4e 	bl	8001f40 <motor_init>
	pid_init(&(motor_instance.pid_controller));
 80016a4:	4b38      	ldr	r3, [pc, #224]	@ (8001788 <main+0x160>)
 80016a6:	0018      	movs	r0, r3
 80016a8:	f000 fd16 	bl	80020d8 <pid_init>

	/* Uruchomienie PWM, enkodera oraz licznika generującego przerwanie */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); /**timer do generacji PWM*/
 80016ac:	4b32      	ldr	r3, [pc, #200]	@ (8001778 <main+0x150>)
 80016ae:	2100      	movs	r1, #0
 80016b0:	0018      	movs	r0, r3
 80016b2:	f003 fd7b 	bl	80051ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80016b6:	4b30      	ldr	r3, [pc, #192]	@ (8001778 <main+0x150>)
 80016b8:	2104      	movs	r1, #4
 80016ba:	0018      	movs	r0, r3
 80016bc:	f003 fd76 	bl	80051ac <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); /**timer do obslugi enkodera*/
 80016c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001780 <main+0x158>)
 80016c2:	213c      	movs	r1, #60	@ 0x3c
 80016c4:	0018      	movs	r0, r3
 80016c6:	f003 fea3 	bl	8005410 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim21); /**timer do generowania przerwania*/
 80016ca:	4b30      	ldr	r3, [pc, #192]	@ (800178c <main+0x164>)
 80016cc:	0018      	movs	r0, r3
 80016ce:	f003 fcd3 	bl	8005078 <HAL_TIM_Base_Start_IT>

	/* Uruchomienie i kalibracja ADC */
	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80016d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001790 <main+0x168>)
 80016d4:	2100      	movs	r1, #0
 80016d6:	0018      	movs	r0, r3
 80016d8:	f001 fc56 	bl	8002f88 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc_value, 1);
 80016dc:	492d      	ldr	r1, [pc, #180]	@ (8001794 <main+0x16c>)
 80016de:	4b2c      	ldr	r3, [pc, #176]	@ (8001790 <main+0x168>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	0018      	movs	r0, r3
 80016e4:	f001 fa0a 	bl	8002afc <HAL_ADC_Start_DMA>

	/* Ustawienia początkowe na LCD */
	I2C_LCD_Clear(I2C_LCD_1);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f7ff fe6f 	bl	80013cc <I2C_LCD_Clear>
	I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7ff fe7a 	bl	80013ec <I2C_LCD_SetCursor>
	I2C_LCD_WriteString(I2C_LCD_1, "SET RPM: 0");
 80016f8:	4b27      	ldr	r3, [pc, #156]	@ (8001798 <main+0x170>)
 80016fa:	0019      	movs	r1, r3
 80016fc:	2000      	movs	r0, #0
 80016fe:	f7ff fec5 	bl	800148c <I2C_LCD_WriteString>
	I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 8001702:	2201      	movs	r2, #1
 8001704:	2100      	movs	r1, #0
 8001706:	2000      	movs	r0, #0
 8001708:	f7ff fe70 	bl	80013ec <I2C_LCD_SetCursor>
	I2C_LCD_WriteString(I2C_LCD_1, "ACT RPM: 0");
 800170c:	4b23      	ldr	r3, [pc, #140]	@ (800179c <main+0x174>)
 800170e:	0019      	movs	r1, r3
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff febb 	bl	800148c <I2C_LCD_WriteString>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		/* Jeżeli silnik jest włączony, przetwórz dane wejściowe i wyświetl informacje */
		if (flag_turn_on_off != 0) {
 8001716:	4b22      	ldr	r3, [pc, #136]	@ (80017a0 <main+0x178>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0fb      	beq.n	8001716 <main+0xee>

			/* Jeśli flaga wysyłania danych jest ustawiona, wyślij dane przez UART */
			if (flag_send_data) {
 800171e:	4b21      	ldr	r3, [pc, #132]	@ (80017a4 <main+0x17c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00e      	beq.n	8001744 <main+0x11c>
				flag_send_data = 0;
 8001726:	4b1f      	ldr	r3, [pc, #124]	@ (80017a4 <main+0x17c>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) uart_buffer,
						strlen(uart_buffer), HAL_MAX_DELAY);
 800172c:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <main+0x180>)
 800172e:	0018      	movs	r0, r3
 8001730:	f7fe fcea 	bl	8000108 <strlen>
 8001734:	0003      	movs	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) uart_buffer,
 8001736:	b29a      	uxth	r2, r3
 8001738:	2301      	movs	r3, #1
 800173a:	425b      	negs	r3, r3
 800173c:	491a      	ldr	r1, [pc, #104]	@ (80017a8 <main+0x180>)
 800173e:	481b      	ldr	r0, [pc, #108]	@ (80017ac <main+0x184>)
 8001740:	f004 fc6e 	bl	8006020 <HAL_UART_Transmit>
			}

			/* Jeśli flaga odświeżania LCD jest ustawiona, zaktualizuj wyświetlacz */
			if (flag_refresh_LCD) {
 8001744:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <main+0x188>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0e4      	beq.n	8001716 <main+0xee>
				flag_refresh_LCD = 0;
 800174c:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <main+0x188>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
				I2C_LCD_DisplayMotorFormat(I2C_LCD_1, motor_instance.set_speed,
 8001752:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <main+0x15c>)
 8001754:	6919      	ldr	r1, [r3, #16]
 8001756:	2300      	movs	r3, #0
 8001758:	2209      	movs	r2, #9
 800175a:	2000      	movs	r0, #0
 800175c:	f7ff fcf5 	bl	800114a <I2C_LCD_DisplayMotorFormat>
						9, 0);
				I2C_LCD_DisplayMotorFormat(I2C_LCD_1,
 8001760:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <main+0x15c>)
 8001762:	68d9      	ldr	r1, [r3, #12]
 8001764:	2301      	movs	r3, #1
 8001766:	2209      	movs	r2, #9
 8001768:	2000      	movs	r0, #0
 800176a:	f7ff fcee 	bl	800114a <I2C_LCD_DisplayMotorFormat>
		if (flag_turn_on_off != 0) {
 800176e:	e7d2      	b.n	8001716 <main+0xee>
 8001770:	0800747c 	.word	0x0800747c
 8001774:	08007484 	.word	0x08007484
 8001778:	20000174 	.word	0x20000174
 800177c:	200002d4 	.word	0x200002d4
 8001780:	200001b4 	.word	0x200001b4
 8001784:	200002bc 	.word	0x200002bc
 8001788:	200002e0 	.word	0x200002e0
 800178c:	200001f4 	.word	0x200001f4
 8001790:	2000007c 	.word	0x2000007c
 8001794:	20000370 	.word	0x20000370
 8001798:	08007494 	.word	0x08007494
 800179c:	080074a0 	.word	0x080074a0
 80017a0:	200002fc 	.word	0x200002fc
 80017a4:	20000300 	.word	0x20000300
 80017a8:	20000308 	.word	0x20000308
 80017ac:	20000234 	.word	0x20000234
 80017b0:	20000304 	.word	0x20000304

080017b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b09f      	sub	sp, #124	@ 0x7c
 80017b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80017ba:	2440      	movs	r4, #64	@ 0x40
 80017bc:	193b      	adds	r3, r7, r4
 80017be:	0018      	movs	r0, r3
 80017c0:	2338      	movs	r3, #56	@ 0x38
 80017c2:	001a      	movs	r2, r3
 80017c4:	2100      	movs	r1, #0
 80017c6:	f005 f9c7 	bl	8006b58 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80017ca:	232c      	movs	r3, #44	@ 0x2c
 80017cc:	18fb      	adds	r3, r7, r3
 80017ce:	0018      	movs	r0, r3
 80017d0:	2314      	movs	r3, #20
 80017d2:	001a      	movs	r2, r3
 80017d4:	2100      	movs	r1, #0
 80017d6:	f005 f9bf 	bl	8006b58 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	0018      	movs	r0, r3
 80017de:	2328      	movs	r3, #40	@ 0x28
 80017e0:	001a      	movs	r2, r3
 80017e2:	2100      	movs	r1, #0
 80017e4:	f005 f9b8 	bl	8006b58 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e8:	4b25      	ldr	r3, [pc, #148]	@ (8001880 <SystemClock_Config+0xcc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a25      	ldr	r2, [pc, #148]	@ (8001884 <SystemClock_Config+0xd0>)
 80017ee:	401a      	ands	r2, r3
 80017f0:	4b23      	ldr	r3, [pc, #140]	@ (8001880 <SystemClock_Config+0xcc>)
 80017f2:	2180      	movs	r1, #128	@ 0x80
 80017f4:	0109      	lsls	r1, r1, #4
 80017f6:	430a      	orrs	r2, r1
 80017f8:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017fa:	0021      	movs	r1, r4
 80017fc:	187b      	adds	r3, r7, r1
 80017fe:	2202      	movs	r2, #2
 8001800:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001802:	187b      	adds	r3, r7, r1
 8001804:	2201      	movs	r2, #1
 8001806:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001808:	187b      	adds	r3, r7, r1
 800180a:	2210      	movs	r2, #16
 800180c:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800180e:	187b      	adds	r3, r7, r1
 8001810:	2200      	movs	r2, #0
 8001812:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001814:	187b      	adds	r3, r7, r1
 8001816:	0018      	movs	r0, r3
 8001818:	f002 fc58 	bl	80040cc <HAL_RCC_OscConfig>
 800181c:	1e03      	subs	r3, r0, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0x70>
		Error_Handler();
 8001820:	f000 fb88 	bl	8001f34 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001824:	212c      	movs	r1, #44	@ 0x2c
 8001826:	187b      	adds	r3, r7, r1
 8001828:	220f      	movs	r2, #15
 800182a:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800182c:	187b      	adds	r3, r7, r1
 800182e:	2201      	movs	r2, #1
 8001830:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001832:	187b      	adds	r3, r7, r1
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001838:	187b      	adds	r3, r7, r1
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800183e:	187b      	adds	r3, r7, r1
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001844:	187b      	adds	r3, r7, r1
 8001846:	2100      	movs	r1, #0
 8001848:	0018      	movs	r0, r3
 800184a:	f003 f813 	bl	8004874 <HAL_RCC_ClockConfig>
 800184e:	1e03      	subs	r3, r0, #0
 8001850:	d001      	beq.n	8001856 <SystemClock_Config+0xa2>
		Error_Handler();
 8001852:	f000 fb6f 	bl	8001f34 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	220a      	movs	r2, #10
 800185a:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	0018      	movs	r0, r3
 800186c:	f003 fa26 	bl	8004cbc <HAL_RCCEx_PeriphCLKConfig>
 8001870:	1e03      	subs	r3, r0, #0
 8001872:	d001      	beq.n	8001878 <SystemClock_Config+0xc4>
		Error_Handler();
 8001874:	f000 fb5e 	bl	8001f34 <Error_Handler>
	}
}
 8001878:	46c0      	nop			@ (mov r8, r8)
 800187a:	46bd      	mov	sp, r7
 800187c:	b01f      	add	sp, #124	@ 0x7c
 800187e:	bd90      	pop	{r4, r7, pc}
 8001880:	40007000 	.word	0x40007000
 8001884:	ffffe7ff 	.word	0xffffe7ff

08001888 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800188e:	003b      	movs	r3, r7
 8001890:	0018      	movs	r0, r3
 8001892:	2308      	movs	r3, #8
 8001894:	001a      	movs	r2, r3
 8001896:	2100      	movs	r1, #0
 8001898:	f005 f95e 	bl	8006b58 <memset>

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 800189c:	4b2e      	ldr	r3, [pc, #184]	@ (8001958 <MX_ADC_Init+0xd0>)
 800189e:	4a2f      	ldr	r2, [pc, #188]	@ (800195c <MX_ADC_Init+0xd4>)
 80018a0:	601a      	str	r2, [r3, #0]
	hadc.Init.OversamplingMode = ENABLE;
 80018a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001958 <MX_ADC_Init+0xd0>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc.Init.Oversample.Ratio = ADC_OVERSAMPLING_RATIO_256;
 80018a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001958 <MX_ADC_Init+0xd0>)
 80018aa:	221c      	movs	r2, #28
 80018ac:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc.Init.Oversample.RightBitShift = ADC_RIGHTBITSHIFT_8;
 80018ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001958 <MX_ADC_Init+0xd0>)
 80018b0:	2280      	movs	r2, #128	@ 0x80
 80018b2:	0052      	lsls	r2, r2, #1
 80018b4:	645a      	str	r2, [r3, #68]	@ 0x44
	hadc.Init.Oversample.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80018b6:	4b28      	ldr	r3, [pc, #160]	@ (8001958 <MX_ADC_Init+0xd0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	649a      	str	r2, [r3, #72]	@ 0x48
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018bc:	4b26      	ldr	r3, [pc, #152]	@ (8001958 <MX_ADC_Init+0xd0>)
 80018be:	2200      	movs	r2, #0
 80018c0:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80018c2:	4b25      	ldr	r3, [pc, #148]	@ (8001958 <MX_ADC_Init+0xd0>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80018c8:	4b23      	ldr	r3, [pc, #140]	@ (8001958 <MX_ADC_Init+0xd0>)
 80018ca:	2207      	movs	r2, #7
 80018cc:	639a      	str	r2, [r3, #56]	@ 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80018ce:	4b22      	ldr	r3, [pc, #136]	@ (8001958 <MX_ADC_Init+0xd0>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	611a      	str	r2, [r3, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018d4:	4b20      	ldr	r3, [pc, #128]	@ (8001958 <MX_ADC_Init+0xd0>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
	hadc.Init.ContinuousConvMode = ENABLE;
 80018da:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <MX_ADC_Init+0xd0>)
 80018dc:	2220      	movs	r2, #32
 80018de:	2101      	movs	r1, #1
 80018e0:	5499      	strb	r1, [r3, r2]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 80018e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001958 <MX_ADC_Init+0xd0>)
 80018e4:	2221      	movs	r2, #33	@ 0x21
 80018e6:	2100      	movs	r1, #0
 80018e8:	5499      	strb	r1, [r3, r2]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001958 <MX_ADC_Init+0xd0>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018f0:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <MX_ADC_Init+0xd0>)
 80018f2:	22c2      	movs	r2, #194	@ 0xc2
 80018f4:	32ff      	adds	r2, #255	@ 0xff
 80018f6:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc.Init.DMAContinuousRequests = ENABLE;
 80018f8:	4b17      	ldr	r3, [pc, #92]	@ (8001958 <MX_ADC_Init+0xd0>)
 80018fa:	222c      	movs	r2, #44	@ 0x2c
 80018fc:	2101      	movs	r1, #1
 80018fe:	5499      	strb	r1, [r3, r2]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001900:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <MX_ADC_Init+0xd0>)
 8001902:	2204      	movs	r2, #4
 8001904:	615a      	str	r2, [r3, #20]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001906:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <MX_ADC_Init+0xd0>)
 8001908:	2200      	movs	r2, #0
 800190a:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 800190c:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <MX_ADC_Init+0xd0>)
 800190e:	2200      	movs	r2, #0
 8001910:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001912:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <MX_ADC_Init+0xd0>)
 8001914:	2200      	movs	r2, #0
 8001916:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001918:	4b0f      	ldr	r3, [pc, #60]	@ (8001958 <MX_ADC_Init+0xd0>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800191e:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <MX_ADC_Init+0xd0>)
 8001920:	0018      	movs	r0, r3
 8001922:	f000 ff77 	bl	8002814 <HAL_ADC_Init>
 8001926:	1e03      	subs	r3, r0, #0
 8001928:	d001      	beq.n	800192e <MX_ADC_Init+0xa6>
		Error_Handler();
 800192a:	f000 fb03 	bl	8001f34 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 800192e:	003b      	movs	r3, r7
 8001930:	4a0b      	ldr	r2, [pc, #44]	@ (8001960 <MX_ADC_Init+0xd8>)
 8001932:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001934:	003b      	movs	r3, r7
 8001936:	2280      	movs	r2, #128	@ 0x80
 8001938:	0152      	lsls	r2, r2, #5
 800193a:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800193c:	003a      	movs	r2, r7
 800193e:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <MX_ADC_Init+0xd0>)
 8001940:	0011      	movs	r1, r2
 8001942:	0018      	movs	r0, r3
 8001944:	f001 f974 	bl	8002c30 <HAL_ADC_ConfigChannel>
 8001948:	1e03      	subs	r3, r0, #0
 800194a:	d001      	beq.n	8001950 <MX_ADC_Init+0xc8>
		Error_Handler();
 800194c:	f000 faf2 	bl	8001f34 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8001950:	46c0      	nop			@ (mov r8, r8)
 8001952:	46bd      	mov	sp, r7
 8001954:	b002      	add	sp, #8
 8001956:	bd80      	pop	{r7, pc}
 8001958:	2000007c 	.word	0x2000007c
 800195c:	40012400 	.word	0x40012400
 8001960:	10000010 	.word	0x10000010

08001964 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001968:	4b1b      	ldr	r3, [pc, #108]	@ (80019d8 <MX_I2C1_Init+0x74>)
 800196a:	4a1c      	ldr	r2, [pc, #112]	@ (80019dc <MX_I2C1_Init+0x78>)
 800196c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00503D58;
 800196e:	4b1a      	ldr	r3, [pc, #104]	@ (80019d8 <MX_I2C1_Init+0x74>)
 8001970:	4a1b      	ldr	r2, [pc, #108]	@ (80019e0 <MX_I2C1_Init+0x7c>)
 8001972:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001974:	4b18      	ldr	r3, [pc, #96]	@ (80019d8 <MX_I2C1_Init+0x74>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800197a:	4b17      	ldr	r3, [pc, #92]	@ (80019d8 <MX_I2C1_Init+0x74>)
 800197c:	2201      	movs	r2, #1
 800197e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001980:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <MX_I2C1_Init+0x74>)
 8001982:	2200      	movs	r2, #0
 8001984:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001986:	4b14      	ldr	r3, [pc, #80]	@ (80019d8 <MX_I2C1_Init+0x74>)
 8001988:	2200      	movs	r2, #0
 800198a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800198c:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <MX_I2C1_Init+0x74>)
 800198e:	2200      	movs	r2, #0
 8001990:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001992:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <MX_I2C1_Init+0x74>)
 8001994:	2200      	movs	r2, #0
 8001996:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001998:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <MX_I2C1_Init+0x74>)
 800199a:	2200      	movs	r2, #0
 800199c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800199e:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <MX_I2C1_Init+0x74>)
 80019a0:	0018      	movs	r0, r3
 80019a2:	f001 ff31 	bl	8003808 <HAL_I2C_Init>
 80019a6:	1e03      	subs	r3, r0, #0
 80019a8:	d001      	beq.n	80019ae <MX_I2C1_Init+0x4a>
		Error_Handler();
 80019aa:	f000 fac3 	bl	8001f34 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80019ae:	4b0a      	ldr	r3, [pc, #40]	@ (80019d8 <MX_I2C1_Init+0x74>)
 80019b0:	2100      	movs	r1, #0
 80019b2:	0018      	movs	r0, r3
 80019b4:	f002 faf2 	bl	8003f9c <HAL_I2CEx_ConfigAnalogFilter>
 80019b8:	1e03      	subs	r3, r0, #0
 80019ba:	d001      	beq.n	80019c0 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80019bc:	f000 faba 	bl	8001f34 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80019c0:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <MX_I2C1_Init+0x74>)
 80019c2:	2100      	movs	r1, #0
 80019c4:	0018      	movs	r0, r3
 80019c6:	f002 fb35 	bl	8004034 <HAL_I2CEx_ConfigDigitalFilter>
 80019ca:	1e03      	subs	r3, r0, #0
 80019cc:	d001      	beq.n	80019d2 <MX_I2C1_Init+0x6e>
		Error_Handler();
 80019ce:	f000 fab1 	bl	8001f34 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80019d2:	46c0      	nop			@ (mov r8, r8)
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000120 	.word	0x20000120
 80019dc:	40005400 	.word	0x40005400
 80019e0:	00503d58 	.word	0x00503d58

080019e4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	@ 0x28
 80019e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80019ea:	2318      	movs	r3, #24
 80019ec:	18fb      	adds	r3, r7, r3
 80019ee:	0018      	movs	r0, r3
 80019f0:	2310      	movs	r3, #16
 80019f2:	001a      	movs	r2, r3
 80019f4:	2100      	movs	r1, #0
 80019f6:	f005 f8af 	bl	8006b58 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80019fa:	2310      	movs	r3, #16
 80019fc:	18fb      	adds	r3, r7, r3
 80019fe:	0018      	movs	r0, r3
 8001a00:	2308      	movs	r3, #8
 8001a02:	001a      	movs	r2, r3
 8001a04:	2100      	movs	r1, #0
 8001a06:	f005 f8a7 	bl	8006b58 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001a0a:	003b      	movs	r3, r7
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	2310      	movs	r3, #16
 8001a10:	001a      	movs	r2, r3
 8001a12:	2100      	movs	r1, #0
 8001a14:	f005 f8a0 	bl	8006b58 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001a18:	4b35      	ldr	r3, [pc, #212]	@ (8001af0 <MX_TIM2_Init+0x10c>)
 8001a1a:	2280      	movs	r2, #128	@ 0x80
 8001a1c:	05d2      	lsls	r2, r2, #23
 8001a1e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1.6 - 1;
 8001a20:	4b33      	ldr	r3, [pc, #204]	@ (8001af0 <MX_TIM2_Init+0x10c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a26:	4b32      	ldr	r3, [pc, #200]	@ (8001af0 <MX_TIM2_Init+0x10c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8001a2c:	4b30      	ldr	r3, [pc, #192]	@ (8001af0 <MX_TIM2_Init+0x10c>)
 8001a2e:	4a31      	ldr	r2, [pc, #196]	@ (8001af4 <MX_TIM2_Init+0x110>)
 8001a30:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a32:	4b2f      	ldr	r3, [pc, #188]	@ (8001af0 <MX_TIM2_Init+0x10c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a38:	4b2d      	ldr	r3, [pc, #180]	@ (8001af0 <MX_TIM2_Init+0x10c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001a3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001af0 <MX_TIM2_Init+0x10c>)
 8001a40:	0018      	movs	r0, r3
 8001a42:	f003 fad9 	bl	8004ff8 <HAL_TIM_Base_Init>
 8001a46:	1e03      	subs	r3, r0, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM2_Init+0x6a>
		Error_Handler();
 8001a4a:	f000 fa73 	bl	8001f34 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4e:	2118      	movs	r1, #24
 8001a50:	187b      	adds	r3, r7, r1
 8001a52:	2280      	movs	r2, #128	@ 0x80
 8001a54:	0152      	lsls	r2, r2, #5
 8001a56:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001a58:	187a      	adds	r2, r7, r1
 8001a5a:	4b25      	ldr	r3, [pc, #148]	@ (8001af0 <MX_TIM2_Init+0x10c>)
 8001a5c:	0011      	movs	r1, r2
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f003 fefa 	bl	8005858 <HAL_TIM_ConfigClockSource>
 8001a64:	1e03      	subs	r3, r0, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM2_Init+0x88>
		Error_Handler();
 8001a68:	f000 fa64 	bl	8001f34 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001a6c:	4b20      	ldr	r3, [pc, #128]	@ (8001af0 <MX_TIM2_Init+0x10c>)
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f003 fb54 	bl	800511c <HAL_TIM_PWM_Init>
 8001a74:	1e03      	subs	r3, r0, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM2_Init+0x98>
		Error_Handler();
 8001a78:	f000 fa5c 	bl	8001f34 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7c:	2110      	movs	r1, #16
 8001a7e:	187b      	adds	r3, r7, r1
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	2200      	movs	r2, #0
 8001a88:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001a8a:	187a      	adds	r2, r7, r1
 8001a8c:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <MX_TIM2_Init+0x10c>)
 8001a8e:	0011      	movs	r1, r2
 8001a90:	0018      	movs	r0, r3
 8001a92:	f004 f9f5 	bl	8005e80 <HAL_TIMEx_MasterConfigSynchronization>
 8001a96:	1e03      	subs	r3, r0, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM2_Init+0xba>
			!= HAL_OK) {
		Error_Handler();
 8001a9a:	f000 fa4b 	bl	8001f34 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a9e:	003b      	movs	r3, r7
 8001aa0:	2260      	movs	r2, #96	@ 0x60
 8001aa2:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8001aa4:	003b      	movs	r3, r7
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aaa:	003b      	movs	r3, r7
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab0:	003b      	movs	r3, r7
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8001ab6:	0039      	movs	r1, r7
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8001af0 <MX_TIM2_Init+0x10c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	0018      	movs	r0, r3
 8001abe:	f003 fe05 	bl	80056cc <HAL_TIM_PWM_ConfigChannel>
 8001ac2:	1e03      	subs	r3, r0, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM2_Init+0xe6>
			!= HAL_OK) {
		Error_Handler();
 8001ac6:	f000 fa35 	bl	8001f34 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8001aca:	0039      	movs	r1, r7
 8001acc:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <MX_TIM2_Init+0x10c>)
 8001ace:	2204      	movs	r2, #4
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f003 fdfb 	bl	80056cc <HAL_TIM_PWM_ConfigChannel>
 8001ad6:	1e03      	subs	r3, r0, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM2_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 8001ada:	f000 fa2b 	bl	8001f34 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001ade:	4b04      	ldr	r3, [pc, #16]	@ (8001af0 <MX_TIM2_Init+0x10c>)
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f000 fced 	bl	80024c0 <HAL_TIM_MspPostInit>

}
 8001ae6:	46c0      	nop			@ (mov r8, r8)
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b00a      	add	sp, #40	@ 0x28
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	46c0      	nop			@ (mov r8, r8)
 8001af0:	20000174 	.word	0x20000174
 8001af4:	000003e7 	.word	0x000003e7

08001af8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b08d      	sub	sp, #52	@ 0x34
 8001afc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001afe:	240c      	movs	r4, #12
 8001b00:	193b      	adds	r3, r7, r4
 8001b02:	0018      	movs	r0, r3
 8001b04:	2324      	movs	r3, #36	@ 0x24
 8001b06:	001a      	movs	r2, r3
 8001b08:	2100      	movs	r1, #0
 8001b0a:	f005 f825 	bl	8006b58 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	0018      	movs	r0, r3
 8001b12:	2308      	movs	r3, #8
 8001b14:	001a      	movs	r2, r3
 8001b16:	2100      	movs	r1, #0
 8001b18:	f005 f81e 	bl	8006b58 <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc8 <MX_TIM3_Init+0xd0>)
 8001b1e:	4a2b      	ldr	r2, [pc, #172]	@ (8001bcc <MX_TIM3_Init+0xd4>)
 8001b20:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001b22:	4b29      	ldr	r3, [pc, #164]	@ (8001bc8 <MX_TIM3_Init+0xd0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b28:	4b27      	ldr	r3, [pc, #156]	@ (8001bc8 <MX_TIM3_Init+0xd0>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001b2e:	4b26      	ldr	r3, [pc, #152]	@ (8001bc8 <MX_TIM3_Init+0xd0>)
 8001b30:	4a27      	ldr	r2, [pc, #156]	@ (8001bd0 <MX_TIM3_Init+0xd8>)
 8001b32:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b34:	4b24      	ldr	r3, [pc, #144]	@ (8001bc8 <MX_TIM3_Init+0xd0>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3a:	4b23      	ldr	r3, [pc, #140]	@ (8001bc8 <MX_TIM3_Init+0xd0>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	615a      	str	r2, [r3, #20]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b40:	0021      	movs	r1, r4
 8001b42:	187b      	adds	r3, r7, r1
 8001b44:	2203      	movs	r2, #3
 8001b46:	601a      	str	r2, [r3, #0]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b48:	187b      	adds	r3, r7, r1
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	605a      	str	r2, [r3, #4]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b4e:	187b      	adds	r3, r7, r1
 8001b50:	2201      	movs	r2, #1
 8001b52:	609a      	str	r2, [r3, #8]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b54:	187b      	adds	r3, r7, r1
 8001b56:	2200      	movs	r2, #0
 8001b58:	60da      	str	r2, [r3, #12]
	sConfig.IC1Filter = 15;
 8001b5a:	187b      	adds	r3, r7, r1
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	611a      	str	r2, [r3, #16]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b60:	187b      	adds	r3, r7, r1
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b66:	187b      	adds	r3, r7, r1
 8001b68:	2201      	movs	r2, #1
 8001b6a:	619a      	str	r2, [r3, #24]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b6c:	187b      	adds	r3, r7, r1
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
	sConfig.IC2Filter = 15;
 8001b72:	187b      	adds	r3, r7, r1
 8001b74:	220f      	movs	r2, #15
 8001b76:	621a      	str	r2, [r3, #32]
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8001b78:	187a      	adds	r2, r7, r1
 8001b7a:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <MX_TIM3_Init+0xd0>)
 8001b7c:	0011      	movs	r1, r2
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f003 fba6 	bl	80052d0 <HAL_TIM_Encoder_Init>
 8001b84:	1e03      	subs	r3, r0, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM3_Init+0x94>
		Error_Handler();
 8001b88:	f000 f9d4 	bl	8001f34 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	2200      	movs	r2, #0
 8001b96:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001b98:	1d3a      	adds	r2, r7, #4
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc8 <MX_TIM3_Init+0xd0>)
 8001b9c:	0011      	movs	r1, r2
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f004 f96e 	bl	8005e80 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba4:	1e03      	subs	r3, r0, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM3_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8001ba8:	f000 f9c4 	bl	8001f34 <Error_Handler>
	}
	if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK) {
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <MX_TIM3_Init+0xd0>)
 8001bae:	2104      	movs	r1, #4
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f004 f9c3 	bl	8005f3c <HAL_TIMEx_RemapConfig>
 8001bb6:	1e03      	subs	r3, r0, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM3_Init+0xc6>
		Error_Handler();
 8001bba:	f000 f9bb 	bl	8001f34 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001bbe:	46c0      	nop			@ (mov r8, r8)
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b00d      	add	sp, #52	@ 0x34
 8001bc4:	bd90      	pop	{r4, r7, pc}
 8001bc6:	46c0      	nop			@ (mov r8, r8)
 8001bc8:	200001b4 	.word	0x200001b4
 8001bcc:	40000400 	.word	0x40000400
 8001bd0:	0000ffff 	.word	0x0000ffff

08001bd4 <MX_TIM21_Init>:
/**
 * @brief TIM21 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM21_Init(void) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM21_Init 0 */

	/* USER CODE END TIM21_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001bda:	2308      	movs	r3, #8
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	0018      	movs	r0, r3
 8001be0:	2310      	movs	r3, #16
 8001be2:	001a      	movs	r2, r3
 8001be4:	2100      	movs	r1, #0
 8001be6:	f004 ffb7 	bl	8006b58 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001bea:	003b      	movs	r3, r7
 8001bec:	0018      	movs	r0, r3
 8001bee:	2308      	movs	r3, #8
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	f004 ffb0 	bl	8006b58 <memset>

	/* USER CODE BEGIN TIM21_Init 1 */

	/* USER CODE END TIM21_Init 1 */
	htim21.Instance = TIM21;
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c74 <MX_TIM21_Init+0xa0>)
 8001bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8001c78 <MX_TIM21_Init+0xa4>)
 8001bfc:	601a      	str	r2, [r3, #0]
	htim21.Init.Prescaler = 1600 - 1;
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001c74 <MX_TIM21_Init+0xa0>)
 8001c00:	4a1e      	ldr	r2, [pc, #120]	@ (8001c7c <MX_TIM21_Init+0xa8>)
 8001c02:	605a      	str	r2, [r3, #4]
	htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c04:	4b1b      	ldr	r3, [pc, #108]	@ (8001c74 <MX_TIM21_Init+0xa0>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
	htim21.Init.Period = 1000 - 1;
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <MX_TIM21_Init+0xa0>)
 8001c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001c80 <MX_TIM21_Init+0xac>)
 8001c0e:	60da      	str	r2, [r3, #12]
	htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c10:	4b18      	ldr	r3, [pc, #96]	@ (8001c74 <MX_TIM21_Init+0xa0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
	htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c16:	4b17      	ldr	r3, [pc, #92]	@ (8001c74 <MX_TIM21_Init+0xa0>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim21) != HAL_OK) {
 8001c1c:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <MX_TIM21_Init+0xa0>)
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f003 f9ea 	bl	8004ff8 <HAL_TIM_Base_Init>
 8001c24:	1e03      	subs	r3, r0, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM21_Init+0x58>
		Error_Handler();
 8001c28:	f000 f984 	bl	8001f34 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c2c:	2108      	movs	r1, #8
 8001c2e:	187b      	adds	r3, r7, r1
 8001c30:	2280      	movs	r2, #128	@ 0x80
 8001c32:	0152      	lsls	r2, r2, #5
 8001c34:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK) {
 8001c36:	187a      	adds	r2, r7, r1
 8001c38:	4b0e      	ldr	r3, [pc, #56]	@ (8001c74 <MX_TIM21_Init+0xa0>)
 8001c3a:	0011      	movs	r1, r2
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f003 fe0b 	bl	8005858 <HAL_TIM_ConfigClockSource>
 8001c42:	1e03      	subs	r3, r0, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM21_Init+0x76>
		Error_Handler();
 8001c46:	f000 f975 	bl	8001f34 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4a:	003b      	movs	r3, r7
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c50:	003b      	movs	r3, r7
 8001c52:	2200      	movs	r2, #0
 8001c54:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig)
 8001c56:	003a      	movs	r2, r7
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <MX_TIM21_Init+0xa0>)
 8001c5a:	0011      	movs	r1, r2
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f004 f90f 	bl	8005e80 <HAL_TIMEx_MasterConfigSynchronization>
 8001c62:	1e03      	subs	r3, r0, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM21_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8001c66:	f000 f965 	bl	8001f34 <Error_Handler>
	}
	/* USER CODE BEGIN TIM21_Init 2 */

	/* USER CODE END TIM21_Init 2 */

}
 8001c6a:	46c0      	nop			@ (mov r8, r8)
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b006      	add	sp, #24
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	46c0      	nop			@ (mov r8, r8)
 8001c74:	200001f4 	.word	0x200001f4
 8001c78:	40010800 	.word	0x40010800
 8001c7c:	0000063f 	.word	0x0000063f
 8001c80:	000003e7 	.word	0x000003e7

08001c84 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001c88:	4b14      	ldr	r3, [pc, #80]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001c8a:	4a15      	ldr	r2, [pc, #84]	@ (8001ce0 <MX_USART2_UART_Init+0x5c>)
 8001c8c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001c8e:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001c90:	22e1      	movs	r2, #225	@ 0xe1
 8001c92:	0252      	lsls	r2, r2, #9
 8001c94:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c96:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001caa:	220c      	movs	r2, #12
 8001cac:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cae:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb4:	4b09      	ldr	r3, [pc, #36]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cba:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001cc6:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <MX_USART2_UART_Init+0x58>)
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f004 f955 	bl	8005f78 <HAL_UART_Init>
 8001cce:	1e03      	subs	r3, r0, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8001cd2:	f000 f92f 	bl	8001f34 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000234 	.word	0x20000234
 8001ce0:	40004400 	.word	0x40004400

08001ce4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001cea:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <MX_DMA_Init+0x28>)
 8001cec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cee:	4b07      	ldr	r3, [pc, #28]	@ (8001d0c <MX_DMA_Init+0x28>)
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cf6:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <MX_DMA_Init+0x28>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]

}
 8001d02:	46c0      	nop			@ (mov r8, r8)
 8001d04:	46bd      	mov	sp, r7
 8001d06:	b002      	add	sp, #8
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	46c0      	nop			@ (mov r8, r8)
 8001d0c:	40021000 	.word	0x40021000

08001d10 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b089      	sub	sp, #36	@ 0x24
 8001d14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001d16:	240c      	movs	r4, #12
 8001d18:	193b      	adds	r3, r7, r4
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	2314      	movs	r3, #20
 8001d1e:	001a      	movs	r2, r3
 8001d20:	2100      	movs	r1, #0
 8001d22:	f004 ff19 	bl	8006b58 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d26:	4b2e      	ldr	r3, [pc, #184]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d32:	4b2b      	ldr	r3, [pc, #172]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d36:	2204      	movs	r2, #4
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001d3e:	4b28      	ldr	r3, [pc, #160]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d42:	4b27      	ldr	r3, [pc, #156]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d44:	2180      	movs	r1, #128	@ 0x80
 8001d46:	430a      	orrs	r2, r1
 8001d48:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d4a:	4b25      	ldr	r3, [pc, #148]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4e:	2280      	movs	r2, #128	@ 0x80
 8001d50:	4013      	ands	r3, r2
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d56:	4b22      	ldr	r3, [pc, #136]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d5a:	4b21      	ldr	r3, [pc, #132]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d62:	4b1f      	ldr	r3, [pc, #124]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d66:	2201      	movs	r2, #1
 8001d68:	4013      	ands	r3, r2
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d6e:	23a0      	movs	r3, #160	@ 0xa0
 8001d70:	05db      	lsls	r3, r3, #23
 8001d72:	2200      	movs	r2, #0
 8001d74:	2120      	movs	r1, #32
 8001d76:	0018      	movs	r0, r3
 8001d78:	f001 fd0c 	bl	8003794 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001d7c:	193b      	adds	r3, r7, r4
 8001d7e:	2280      	movs	r2, #128	@ 0x80
 8001d80:	0192      	lsls	r2, r2, #6
 8001d82:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d84:	193b      	adds	r3, r7, r4
 8001d86:	2284      	movs	r2, #132	@ 0x84
 8001d88:	0392      	lsls	r2, r2, #14
 8001d8a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	193b      	adds	r3, r7, r4
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d92:	193b      	adds	r3, r7, r4
 8001d94:	4a13      	ldr	r2, [pc, #76]	@ (8001de4 <MX_GPIO_Init+0xd4>)
 8001d96:	0019      	movs	r1, r3
 8001d98:	0010      	movs	r0, r2
 8001d9a:	f001 fb7d 	bl	8003498 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001d9e:	0021      	movs	r1, r4
 8001da0:	187b      	adds	r3, r7, r1
 8001da2:	2220      	movs	r2, #32
 8001da4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da6:	187b      	adds	r3, r7, r1
 8001da8:	2201      	movs	r2, #1
 8001daa:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	187b      	adds	r3, r7, r1
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	187b      	adds	r3, r7, r1
 8001db4:	2200      	movs	r2, #0
 8001db6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001db8:	187a      	adds	r2, r7, r1
 8001dba:	23a0      	movs	r3, #160	@ 0xa0
 8001dbc:	05db      	lsls	r3, r3, #23
 8001dbe:	0011      	movs	r1, r2
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f001 fb69 	bl	8003498 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	2007      	movs	r0, #7
 8001dcc:	f001 fa26 	bl	800321c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001dd0:	2007      	movs	r0, #7
 8001dd2:	f001 fa38 	bl	8003246 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001dd6:	46c0      	nop			@ (mov r8, r8)
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b009      	add	sp, #36	@ 0x24
 8001ddc:	bd90      	pop	{r4, r7, pc}
 8001dde:	46c0      	nop			@ (mov r8, r8)
 8001de0:	40021000 	.word	0x40021000
 8001de4:	50000800 	.word	0x50000800

08001de8 <HAL_TIM_PeriodElapsedCallback>:
 * Przygotowanie danych do wysyłki w tym miejscu gwarantuje, że dane wysłane przez UART i wyświetlone na ekranie
 * pochodzą z tego samego punktu czasowego.
 *
 * @param htim Pointer do struktury TIM_HandleTypeDef zawierającej informacje o timerze.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af02      	add	r7, sp, #8
 8001dee:	6078      	str	r0, [r7, #4]

	if (htim->Instance == htim21.Instance) {
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b24      	ldr	r3, [pc, #144]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d140      	bne.n	8001e7e <HAL_TIM_PeriodElapsedCallback+0x96>
		if (flag_turn_on_off == 1) {
 8001dfc:	4b23      	ldr	r3, [pc, #140]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d13c      	bne.n	8001e7e <HAL_TIM_PeriodElapsedCallback+0x96>

			/* Oblicz nową prędkość na podstawie odczytu z ADC */
			new_speed = (adc_value[0] * 300) / 4095 - 150;
 8001e04:	4b22      	ldr	r3, [pc, #136]	@ (8001e90 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	001a      	movs	r2, r3
 8001e0c:	0013      	movs	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	189b      	adds	r3, r3, r2
 8001e12:	011a      	lsls	r2, r3, #4
 8001e14:	1ad2      	subs	r2, r2, r3
 8001e16:	0093      	lsls	r3, r2, #2
 8001e18:	001a      	movs	r2, r3
 8001e1a:	0013      	movs	r3, r2
 8001e1c:	491d      	ldr	r1, [pc, #116]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f7fe fa0e 	bl	8000240 <__divsi3>
 8001e24:	0003      	movs	r3, r0
 8001e26:	3b96      	subs	r3, #150	@ 0x96
 8001e28:	001a      	movs	r2, r3
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e98 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001e2c:	601a      	str	r2, [r3, #0]
			motor_set_RPM_speed(&motor_instance, new_speed);
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e98 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	4b1a      	ldr	r3, [pc, #104]	@ (8001e9c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001e34:	0011      	movs	r1, r2
 8001e36:	0018      	movs	r0, r3
 8001e38:	f000 f920 	bl	800207c <motor_set_RPM_speed>

			motor_calculate_speed(&motor_instance);
 8001e3c:	4b17      	ldr	r3, [pc, #92]	@ (8001e9c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f000 f8b0 	bl	8001fa4 <motor_calculate_speed>

			snprintf(uart_buffer, sizeof(uart_buffer),
 8001e44:	4b15      	ldr	r3, [pc, #84]	@ (8001e9c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001e46:	6919      	ldr	r1, [r3, #16]
 8001e48:	4b14      	ldr	r3, [pc, #80]	@ (8001e9c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	4a14      	ldr	r2, [pc, #80]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001e4e:	4815      	ldr	r0, [pc, #84]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	000b      	movs	r3, r1
 8001e54:	2164      	movs	r1, #100	@ 0x64
 8001e56:	f004 fe4b 	bl	8006af0 <sniprintf>
					"Set: %ld, Measured: %ld\r\n", motor_instance.set_speed,
					motor_instance.measured_speed);
			flag_send_data = 1;
 8001e5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]

			lcd_refresh_counter++;
 8001e60:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001e68:	601a      	str	r2, [r3, #0]
			if (lcd_refresh_counter >= 5) { /**flaga odswiezania ekranu zglaszana co 5 przerwanie*/
 8001e6a:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	dd05      	ble.n	8001e7e <HAL_TIM_PeriodElapsedCallback+0x96>
				flag_refresh_LCD = 1;
 8001e72:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
				lcd_refresh_counter = 0;
 8001e78:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
			}

		}
	}

}
 8001e7e:	46c0      	nop			@ (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b002      	add	sp, #8
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	46c0      	nop			@ (mov r8, r8)
 8001e88:	200001f4 	.word	0x200001f4
 8001e8c:	200002fc 	.word	0x200002fc
 8001e90:	20000370 	.word	0x20000370
 8001e94:	00000fff 	.word	0x00000fff
 8001e98:	20000374 	.word	0x20000374
 8001e9c:	200002bc 	.word	0x200002bc
 8001ea0:	080074ac 	.word	0x080074ac
 8001ea4:	20000308 	.word	0x20000308
 8001ea8:	20000300 	.word	0x20000300
 8001eac:	2000036c 	.word	0x2000036c
 8001eb0:	20000304 	.word	0x20000304

08001eb4 <HAL_GPIO_EXTI_Callback>:
 * Wykonuje debouncing oraz w zależności od stanu flagi włącza lub wyłącza silnik,
 * a także zarządza podświetleniem wyświetlacza LCD.
 *
 * @param GPIO_Pin Numer pinu, który wywołał przerwanie.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	0002      	movs	r2, r0
 8001ebc:	1dbb      	adds	r3, r7, #6
 8001ebe:	801a      	strh	r2, [r3, #0]
	/**po wcisnieciu przycisku*/
	if (GPIO_Pin == B1_Pin) {
 8001ec0:	1dbb      	adds	r3, r7, #6
 8001ec2:	881a      	ldrh	r2, [r3, #0]
 8001ec4:	2380      	movs	r3, #128	@ 0x80
 8001ec6:	019b      	lsls	r3, r3, #6
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d129      	bne.n	8001f20 <HAL_GPIO_EXTI_Callback+0x6c>
		uint32_t current_time = HAL_GetTick();
 8001ecc:	f000 fc74 	bl	80027b8 <HAL_GetTick>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	60fb      	str	r3, [r7, #12]
		if (current_time - last_EXTI_interrupt_time > 50) { /**cyfrowy Debouncing 50 ms*/
 8001ed4:	4b14      	ldr	r3, [pc, #80]	@ (8001f28 <HAL_GPIO_EXTI_Callback+0x74>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b32      	cmp	r3, #50	@ 0x32
 8001ede:	d91c      	bls.n	8001f1a <HAL_GPIO_EXTI_Callback+0x66>
			/**jesli flaga wlaczenia byla rowna 0 to zmiana na 1*/
			if (flag_turn_on_off == 0) {
 8001ee0:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <HAL_GPIO_EXTI_Callback+0x78>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10a      	bne.n	8001efe <HAL_GPIO_EXTI_Callback+0x4a>
				motor_update_count(&motor_instance); /**zeby zresetowac licznik po wznowieniu*/
 8001ee8:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001eea:	0018      	movs	r0, r3
 8001eec:	f000 f844 	bl	8001f78 <motor_update_count>
				flag_turn_on_off = 1;
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <HAL_GPIO_EXTI_Callback+0x78>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]
				I2C_LCD_Backlight(I2C_LCD_1);
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff fae4 	bl	80014c4 <I2C_LCD_Backlight>
 8001efc:	e00d      	b.n	8001f1a <HAL_GPIO_EXTI_Callback+0x66>
				/**jesli flaga wlaczenia byla rowna 1 to zastopuj silnik*/
			} else if (flag_turn_on_off == 1) {
 8001efe:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <HAL_GPIO_EXTI_Callback+0x78>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d109      	bne.n	8001f1a <HAL_GPIO_EXTI_Callback+0x66>
				I2C_LCD_NoBacklight(I2C_LCD_1);
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7ff faf6 	bl	80014f8 <I2C_LCD_NoBacklight>
				motor_stop(&motor_instance);
 8001f0c:	4b08      	ldr	r3, [pc, #32]	@ (8001f30 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f000 f8ca 	bl	80020a8 <motor_stop>
				flag_turn_on_off = 0;
 8001f14:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <HAL_GPIO_EXTI_Callback+0x78>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
			}
		}
		last_EXTI_interrupt_time = current_time;
 8001f1a:	4b03      	ldr	r3, [pc, #12]	@ (8001f28 <HAL_GPIO_EXTI_Callback+0x74>)
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	601a      	str	r2, [r3, #0]
	}

}
 8001f20:	46c0      	nop			@ (mov r8, r8)
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b004      	add	sp, #16
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000378 	.word	0x20000378
 8001f2c:	200002fc 	.word	0x200002fc
 8001f30:	200002bc 	.word	0x200002bc

08001f34 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f38:	b672      	cpsid	i
}
 8001f3a:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001f3c:	46c0      	nop			@ (mov r8, r8)
 8001f3e:	e7fd      	b.n	8001f3c <Error_Handler+0x8>

08001f40 <motor_init>:
 * rozdzielczość enkodera na podstawie zdefiniowanych stałych.
 *
 * @param motor Wskaźnik do struktury motor_struct reprezentującej sterownik silnika.
 * @param encoder_tim Wskaźnik do uchwytu timera obsługującego enkoder.
 */
void motor_init(motor_struct *motor, TIM_HandleTypeDef *encoder_tim) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
	motor->timer = encoder_tim;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	601a      	str	r2, [r3, #0]
	motor->resolution = TIMER_CONFIGURATION_BOTH_EDGES * ENCODER_RESOLUTION
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	22f0      	movs	r2, #240	@ 0xf0
 8001f54:	0112      	lsls	r2, r2, #4
 8001f56:	809a      	strh	r2, [r3, #4]
			* MOTOR_GEAR;

	motor->pulse_count = 0;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
	motor->measured_speed = 0;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	60da      	str	r2, [r3, #12]
	motor->set_speed = 0;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	611a      	str	r2, [r3, #16]
	motor->actual_PWM = 0;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	615a      	str	r2, [r3, #20]
}
 8001f70:	46c0      	nop			@ (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b002      	add	sp, #8
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <motor_update_count>:
 * Zczytuje aktualną wartość z licznika timera obsługującego enkoder,
 * zapisuje ją do struktury sterownika silnika, a następnie zeruje licznik timera.
 *
 * @param motor Wskaźnik do struktury motor_struct.
 */
void motor_update_count(motor_struct *motor) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	motor->pulse_count = (int16_t) __HAL_TIM_GET_COUNTER(motor->timer);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f88:	b21b      	sxth	r3, r3
 8001f8a:	001a      	movs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(motor->timer, 0);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2200      	movs	r2, #0
 8001f98:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001f9a:	46c0      	nop			@ (mov r8, r8)
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b002      	add	sp, #8
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <motor_calculate_speed>:
 * wylicza prędkość obrotową silnika. Wynik jest przekazywany do kontrolera PID,
 * a wynik jego działania aktualizuje wartość sygnału PWM sterującego silnikiem.
 *
 * @param motor Wskaźnik do struktury motor_struct.
 */
void motor_calculate_speed(motor_struct *motor) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
	motor_update_count(motor);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f7ff ffe2 	bl	8001f78 <motor_update_count>
	motor->measured_speed = (motor->pulse_count * TIMER_INTERRUPT_FREQUENCY
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689a      	ldr	r2, [r3, #8]
			* SECONDS_IN_MINUTE) / (motor->resolution);
 8001fb8:	0013      	movs	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	189b      	adds	r3, r3, r2
 8001fbe:	011a      	lsls	r2, r3, #4
 8001fc0:	1ad2      	subs	r2, r2, r3
 8001fc2:	00d3      	lsls	r3, r2, #3
 8001fc4:	001a      	movs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	889b      	ldrh	r3, [r3, #4]
 8001fca:	0019      	movs	r1, r3
 8001fcc:	0010      	movs	r0, r2
 8001fce:	f7fe f937 	bl	8000240 <__divsi3>
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	001a      	movs	r2, r3
	motor->measured_speed = (motor->pulse_count * TIMER_INTERRUPT_FREQUENCY
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	60da      	str	r2, [r3, #12]

	int output = pid_calculate(&(motor->pid_controller), motor->set_speed,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3324      	adds	r3, #36	@ 0x24
 8001fde:	0018      	movs	r0, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6919      	ldr	r1, [r3, #16]
			motor->measured_speed);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
	int output = pid_calculate(&(motor->pid_controller), motor->set_speed,
 8001fe8:	001a      	movs	r2, r3
 8001fea:	f000 f8a7 	bl	800213c <pid_calculate>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	60fb      	str	r3, [r7, #12]

	if (output >= 1000) { // Maksymalna wartość PWM
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	23fa      	movs	r3, #250	@ 0xfa
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	db03      	blt.n	8002004 <motor_calculate_speed+0x60>
		output = 1000;
 8001ffc:	23fa      	movs	r3, #250	@ 0xfa
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	e005      	b.n	8002010 <motor_calculate_speed+0x6c>
	} else if (output <= -1000) {
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4a1b      	ldr	r2, [pc, #108]	@ (8002074 <motor_calculate_speed+0xd0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	da01      	bge.n	8002010 <motor_calculate_speed+0x6c>
		output = -1000;
 800200c:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <motor_calculate_speed+0xd4>)
 800200e:	60fb      	str	r3, [r7, #12]
	}

	motor->actual_PWM += output;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	695a      	ldr	r2, [r3, #20]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	18d2      	adds	r2, r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	615a      	str	r2, [r3, #20]

	if (motor->actual_PWM >= 0) {
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	2b00      	cmp	r3, #0
 8002022:	db10      	blt.n	8002046 <motor_calculate_speed+0xa2>
		Cytron_Set_Motor_Direction(&(motor->driver), cw);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3318      	adds	r3, #24
 8002028:	2100      	movs	r1, #0
 800202a:	0018      	movs	r0, r3
 800202c:	f7ff fa7e 	bl	800152c <Cytron_Set_Motor_Direction>
		Cytron_Set_Motor_Speed(&(motor->driver), motor->actual_PWM);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3318      	adds	r3, #24
 8002034:	001a      	movs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	b29b      	uxth	r3, r3
 800203c:	0019      	movs	r1, r3
 800203e:	0010      	movs	r0, r2
 8002040:	f7ff fa98 	bl	8001574 <Cytron_Set_Motor_Speed>
	} else {
		Cytron_Set_Motor_Direction(&(motor->driver), ccw);
		Cytron_Set_Motor_Speed(&(motor->driver), -motor->actual_PWM);
	}
}
 8002044:	e011      	b.n	800206a <motor_calculate_speed+0xc6>
		Cytron_Set_Motor_Direction(&(motor->driver), ccw);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3318      	adds	r3, #24
 800204a:	2101      	movs	r1, #1
 800204c:	0018      	movs	r0, r3
 800204e:	f7ff fa6d 	bl	800152c <Cytron_Set_Motor_Direction>
		Cytron_Set_Motor_Speed(&(motor->driver), -motor->actual_PWM);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3318      	adds	r3, #24
 8002056:	001a      	movs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	b29b      	uxth	r3, r3
 800205e:	425b      	negs	r3, r3
 8002060:	b29b      	uxth	r3, r3
 8002062:	0019      	movs	r1, r3
 8002064:	0010      	movs	r0, r2
 8002066:	f7ff fa85 	bl	8001574 <Cytron_Set_Motor_Speed>
}
 800206a:	46c0      	nop			@ (mov r8, r8)
 800206c:	46bd      	mov	sp, r7
 800206e:	b004      	add	sp, #16
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	fffffc19 	.word	0xfffffc19
 8002078:	fffffc18 	.word	0xfffffc18

0800207c <motor_set_RPM_speed>:
 * i zapisuje nową wartość zadanej prędkości.
 *
 * @param motor Wskaźnik do struktury motor_struct.
 * @param RPM_speed Zadana prędkość obrotowa w RPM.
 */
void motor_set_RPM_speed(motor_struct *motor, int RPM_speed) {
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
	if (RPM_speed != motor->set_speed) {
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d007      	beq.n	80020a0 <motor_set_RPM_speed+0x24>
		pid_reset(&(motor->pid_controller));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3324      	adds	r3, #36	@ 0x24
 8002094:	0018      	movs	r0, r3
 8002096:	f000 f843 	bl	8002120 <pid_reset>
		motor->set_speed = RPM_speed;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	611a      	str	r2, [r3, #16]
	}
}
 80020a0:	46c0      	nop			@ (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b002      	add	sp, #8
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <motor_stop>:
 * Resetuje zadaną prędkość, zmierzoną prędkość oraz sygnał PWM
 * do wartości początkowych. Ustawia prędkość PWM na 0.
 *
 * @param motor Wskaźnik do struktury motor_struct.
 */
void motor_stop(motor_struct *motor) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	motor->set_speed = 0;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
	motor->measured_speed = 0;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	60da      	str	r2, [r3, #12]
	motor->actual_PWM = 0;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	615a      	str	r2, [r3, #20]
	Cytron_Set_Motor_Speed(&(motor->driver), 0);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3318      	adds	r3, #24
 80020c6:	2100      	movs	r1, #0
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7ff fa53 	bl	8001574 <Cytron_Set_Motor_Speed>
}
 80020ce:	46c0      	nop			@ (mov r8, r8)
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b002      	add	sp, #8
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <pid_init>:
 * (anti_windup_limit). Inicjalizuje również zmienne przechowujące błąd z poprzedniego
 * cyklu oraz całkowity błąd.
 *
 * @param pid_data Wskaźnik do struktury pid_struct reprezentującej regulator PID.
 */
void pid_init(pid_struct *pid_data){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	pid_data->previous_error = 0;  ///< Inicjalizacja błędu z poprzedniego cyklu
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;     ///< Inicjalizacja całkowitego błędu
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	605a      	str	r2, [r3, #4]

	// Ustawienie współczynników PID z wartości predefiniowanych
	pid_data->Kp = MOTOR_Kp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a09      	ldr	r2, [pc, #36]	@ (8002114 <pid_init+0x3c>)
 80020f0:	609a      	str	r2, [r3, #8]
	pid_data->Ki = MOTOR_Ki;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a08      	ldr	r2, [pc, #32]	@ (8002118 <pid_init+0x40>)
 80020f6:	60da      	str	r2, [r3, #12]
	pid_data->Kd = MOTOR_Kd;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a08      	ldr	r2, [pc, #32]	@ (800211c <pid_init+0x44>)
 80020fc:	611a      	str	r2, [r3, #16]

	// Ustawienie limitów
	pid_data->anti_windup_limit = MOTOR_ANTI_WINDUP;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	22fa      	movs	r2, #250	@ 0xfa
 8002102:	0092      	lsls	r2, r2, #2
 8002104:	615a      	str	r2, [r3, #20]
	pid_data->total_error_limit = MOTOR_TOTAL_ERROR_LIMIT;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2296      	movs	r2, #150	@ 0x96
 800210a:	619a      	str	r2, [r3, #24]
}
 800210c:	46c0      	nop			@ (mov r8, r8)
 800210e:	46bd      	mov	sp, r7
 8002110:	b002      	add	sp, #8
 8002112:	bd80      	pop	{r7, pc}
 8002114:	3f99999a 	.word	0x3f99999a
 8002118:	3dcccccd 	.word	0x3dcccccd
 800211c:	3e4ccccd 	.word	0x3e4ccccd

08002120 <pid_reset>:
 * Funkcja zeruje błędy, zarówno bieżący, jak i całkowity, przygotowując regulator
 * do nowego cyklu obliczeń.
 *
 * @param pid_data Wskaźnik do struktury pid_struct reprezentującej regulator PID.
 */
void pid_reset(pid_struct *pid_data){
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	pid_data->previous_error = 0;  ///< Zerowanie błędu z poprzedniego cyklu
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;     ///< Zerowanie całkowitego błędu
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	605a      	str	r2, [r3, #4]
}
 8002134:	46c0      	nop			@ (mov r8, r8)
 8002136:	46bd      	mov	sp, r7
 8002138:	b002      	add	sp, #8
 800213a:	bd80      	pop	{r7, pc}

0800213c <pid_calculate>:
 * @param setpoint Zadana wartość, do której dąży system.
 * @param process_variable Rzeczywista wartość zmiennej procesowej (np. zmierzona prędkość).
 *
 * @return Wartość sterująca, która ma być zastosowana w systemie (np. wartość PWM).
 */
int pid_calculate(pid_struct *pid_data, int setpoint, int process_variable){
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b089      	sub	sp, #36	@ 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	// Obliczanie uchybu
	error = setpoint - process_variable;
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	61bb      	str	r3, [r7, #24]

	// Sumowanie uchybu do całkowitego błędu
	pid_data->total_error += error;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	18d2      	adds	r2, r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	605a      	str	r2, [r3, #4]

	// Ograniczenie maksymalnego błędu
	if (pid_data->total_error >= pid_data->total_error_limit) {
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	429a      	cmp	r2, r3
 8002166:	db04      	blt.n	8002172 <pid_calculate+0x36>
		pid_data->total_error = pid_data->total_error_limit;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	699a      	ldr	r2, [r3, #24]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	e00b      	b.n	800218a <pid_calculate+0x4e>
	} else if (pid_data->total_error <= -pid_data->total_error_limit) {
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	425b      	negs	r3, r3
 800217c:	429a      	cmp	r2, r3
 800217e:	dc04      	bgt.n	800218a <pid_calculate+0x4e>
		pid_data->total_error = -pid_data->total_error_limit;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	425a      	negs	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	605a      	str	r2, [r3, #4]
	}

	// Obliczanie odpowiedzi dla członów PID
	p_term = (float) (pid_data->Kp * error);                            ///< Odpowiedź członu proporcjonalnego
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	689c      	ldr	r4, [r3, #8]
 800218e:	69b8      	ldr	r0, [r7, #24]
 8002190:	f7fe fe44 	bl	8000e1c <__aeabi_i2f>
 8002194:	1c03      	adds	r3, r0, #0
 8002196:	1c19      	adds	r1, r3, #0
 8002198:	1c20      	adds	r0, r4, #0
 800219a:	f7fe fce1 	bl	8000b60 <__aeabi_fmul>
 800219e:	1c03      	adds	r3, r0, #0
 80021a0:	617b      	str	r3, [r7, #20]
	i_term = (float) (pid_data->Ki * pid_data->total_error);             ///< Odpowiedź członu całkującego
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	68dc      	ldr	r4, [r3, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	0018      	movs	r0, r3
 80021ac:	f7fe fe36 	bl	8000e1c <__aeabi_i2f>
 80021b0:	1c03      	adds	r3, r0, #0
 80021b2:	1c19      	adds	r1, r3, #0
 80021b4:	1c20      	adds	r0, r4, #0
 80021b6:	f7fe fcd3 	bl	8000b60 <__aeabi_fmul>
 80021ba:	1c03      	adds	r3, r0, #0
 80021bc:	61fb      	str	r3, [r7, #28]
	d_term = (float) (pid_data->Kd * (error - pid_data->previous_error));///< Odpowiedź członu różniczkującego
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	691c      	ldr	r4, [r3, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	0018      	movs	r0, r3
 80021cc:	f7fe fe26 	bl	8000e1c <__aeabi_i2f>
 80021d0:	1c03      	adds	r3, r0, #0
 80021d2:	1c19      	adds	r1, r3, #0
 80021d4:	1c20      	adds	r0, r4, #0
 80021d6:	f7fe fcc3 	bl	8000b60 <__aeabi_fmul>
 80021da:	1c03      	adds	r3, r0, #0
 80021dc:	613b      	str	r3, [r7, #16]

	// Ograniczenie członu całkującego, aby uniknąć "windup"
	if (i_term >= pid_data->anti_windup_limit) {
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	0018      	movs	r0, r3
 80021e4:	f7fe fe1a 	bl	8000e1c <__aeabi_i2f>
 80021e8:	1c03      	adds	r3, r0, #0
 80021ea:	1c19      	adds	r1, r3, #0
 80021ec:	69f8      	ldr	r0, [r7, #28]
 80021ee:	f7fe f943 	bl	8000478 <__aeabi_fcmpge>
 80021f2:	1e03      	subs	r3, r0, #0
 80021f4:	d007      	beq.n	8002206 <pid_calculate+0xca>
		i_term = pid_data->anti_windup_limit;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	0018      	movs	r0, r3
 80021fc:	f7fe fe0e 	bl	8000e1c <__aeabi_i2f>
 8002200:	1c03      	adds	r3, r0, #0
 8002202:	61fb      	str	r3, [r7, #28]
 8002204:	e014      	b.n	8002230 <pid_calculate+0xf4>
	} else if (i_term <= -pid_data->anti_windup_limit) {
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	425b      	negs	r3, r3
 800220c:	0018      	movs	r0, r3
 800220e:	f7fe fe05 	bl	8000e1c <__aeabi_i2f>
 8002212:	1c03      	adds	r3, r0, #0
 8002214:	1c19      	adds	r1, r3, #0
 8002216:	69f8      	ldr	r0, [r7, #28]
 8002218:	f7fe f91a 	bl	8000450 <__aeabi_fcmple>
 800221c:	1e03      	subs	r3, r0, #0
 800221e:	d007      	beq.n	8002230 <pid_calculate+0xf4>
		i_term = -pid_data->anti_windup_limit;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	425b      	negs	r3, r3
 8002226:	0018      	movs	r0, r3
 8002228:	f7fe fdf8 	bl	8000e1c <__aeabi_i2f>
 800222c:	1c03      	adds	r3, r0, #0
 800222e:	61fb      	str	r3, [r7, #28]
	}

	// Zapisanie bieżącego uchybu jako poprzedniego błędu
	pid_data->previous_error = error;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	601a      	str	r2, [r3, #0]

	// Zwrócenie sumy wszystkich członów PID jako wartości sterującej
	return (int)(p_term + i_term + d_term);
 8002236:	69f9      	ldr	r1, [r7, #28]
 8002238:	6978      	ldr	r0, [r7, #20]
 800223a:	f7fe fa41 	bl	80006c0 <__aeabi_fadd>
 800223e:	1c03      	adds	r3, r0, #0
 8002240:	6939      	ldr	r1, [r7, #16]
 8002242:	1c18      	adds	r0, r3, #0
 8002244:	f7fe fa3c 	bl	80006c0 <__aeabi_fadd>
 8002248:	1c03      	adds	r3, r0, #0
 800224a:	1c18      	adds	r0, r3, #0
 800224c:	f7fe fdc6 	bl	8000ddc <__aeabi_f2iz>
 8002250:	0003      	movs	r3, r0
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b009      	add	sp, #36	@ 0x24
 8002258:	bd90      	pop	{r4, r7, pc}
	...

0800225c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002260:	4b07      	ldr	r3, [pc, #28]	@ (8002280 <HAL_MspInit+0x24>)
 8002262:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002264:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <HAL_MspInit+0x24>)
 8002266:	2101      	movs	r1, #1
 8002268:	430a      	orrs	r2, r1
 800226a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800226c:	4b04      	ldr	r3, [pc, #16]	@ (8002280 <HAL_MspInit+0x24>)
 800226e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002270:	4b03      	ldr	r3, [pc, #12]	@ (8002280 <HAL_MspInit+0x24>)
 8002272:	2180      	movs	r1, #128	@ 0x80
 8002274:	0549      	lsls	r1, r1, #21
 8002276:	430a      	orrs	r2, r1
 8002278:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000

08002284 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002284:	b590      	push	{r4, r7, lr}
 8002286:	b089      	sub	sp, #36	@ 0x24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	240c      	movs	r4, #12
 800228e:	193b      	adds	r3, r7, r4
 8002290:	0018      	movs	r0, r3
 8002292:	2314      	movs	r3, #20
 8002294:	001a      	movs	r2, r3
 8002296:	2100      	movs	r1, #0
 8002298:	f004 fc5e 	bl	8006b58 <memset>
  if(hadc->Instance==ADC1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a2a      	ldr	r2, [pc, #168]	@ (800234c <HAL_ADC_MspInit+0xc8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d14d      	bne.n	8002342 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002350 <HAL_ADC_MspInit+0xcc>)
 80022a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022aa:	4b29      	ldr	r3, [pc, #164]	@ (8002350 <HAL_ADC_MspInit+0xcc>)
 80022ac:	2180      	movs	r1, #128	@ 0x80
 80022ae:	0089      	lsls	r1, r1, #2
 80022b0:	430a      	orrs	r2, r1
 80022b2:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b4:	4b26      	ldr	r3, [pc, #152]	@ (8002350 <HAL_ADC_MspInit+0xcc>)
 80022b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022b8:	4b25      	ldr	r3, [pc, #148]	@ (8002350 <HAL_ADC_MspInit+0xcc>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	430a      	orrs	r2, r1
 80022be:	62da      	str	r2, [r3, #44]	@ 0x2c
 80022c0:	4b23      	ldr	r3, [pc, #140]	@ (8002350 <HAL_ADC_MspInit+0xcc>)
 80022c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c4:	2201      	movs	r2, #1
 80022c6:	4013      	ands	r3, r2
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022cc:	193b      	adds	r3, r7, r4
 80022ce:	2210      	movs	r2, #16
 80022d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022d2:	193b      	adds	r3, r7, r4
 80022d4:	2203      	movs	r2, #3
 80022d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	193b      	adds	r3, r7, r4
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022de:	193a      	adds	r2, r7, r4
 80022e0:	23a0      	movs	r3, #160	@ 0xa0
 80022e2:	05db      	lsls	r3, r3, #23
 80022e4:	0011      	movs	r1, r2
 80022e6:	0018      	movs	r0, r3
 80022e8:	f001 f8d6 	bl	8003498 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80022ec:	4b19      	ldr	r3, [pc, #100]	@ (8002354 <HAL_ADC_MspInit+0xd0>)
 80022ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002358 <HAL_ADC_MspInit+0xd4>)
 80022f0:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80022f2:	4b18      	ldr	r3, [pc, #96]	@ (8002354 <HAL_ADC_MspInit+0xd0>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022f8:	4b16      	ldr	r3, [pc, #88]	@ (8002354 <HAL_ADC_MspInit+0xd0>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80022fe:	4b15      	ldr	r3, [pc, #84]	@ (8002354 <HAL_ADC_MspInit+0xd0>)
 8002300:	2200      	movs	r2, #0
 8002302:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002304:	4b13      	ldr	r3, [pc, #76]	@ (8002354 <HAL_ADC_MspInit+0xd0>)
 8002306:	2280      	movs	r2, #128	@ 0x80
 8002308:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800230a:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <HAL_ADC_MspInit+0xd0>)
 800230c:	2280      	movs	r2, #128	@ 0x80
 800230e:	0052      	lsls	r2, r2, #1
 8002310:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002312:	4b10      	ldr	r3, [pc, #64]	@ (8002354 <HAL_ADC_MspInit+0xd0>)
 8002314:	2280      	movs	r2, #128	@ 0x80
 8002316:	00d2      	lsls	r2, r2, #3
 8002318:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800231a:	4b0e      	ldr	r3, [pc, #56]	@ (8002354 <HAL_ADC_MspInit+0xd0>)
 800231c:	2220      	movs	r2, #32
 800231e:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002320:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <HAL_ADC_MspInit+0xd0>)
 8002322:	2200      	movs	r2, #0
 8002324:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002326:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <HAL_ADC_MspInit+0xd0>)
 8002328:	0018      	movs	r0, r3
 800232a:	f000 ffa9 	bl	8003280 <HAL_DMA_Init>
 800232e:	1e03      	subs	r3, r0, #0
 8002330:	d001      	beq.n	8002336 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8002332:	f7ff fdff 	bl	8001f34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a06      	ldr	r2, [pc, #24]	@ (8002354 <HAL_ADC_MspInit+0xd0>)
 800233a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800233c:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <HAL_ADC_MspInit+0xd0>)
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002342:	46c0      	nop			@ (mov r8, r8)
 8002344:	46bd      	mov	sp, r7
 8002346:	b009      	add	sp, #36	@ 0x24
 8002348:	bd90      	pop	{r4, r7, pc}
 800234a:	46c0      	nop			@ (mov r8, r8)
 800234c:	40012400 	.word	0x40012400
 8002350:	40021000 	.word	0x40021000
 8002354:	200000d8 	.word	0x200000d8
 8002358:	40020008 	.word	0x40020008

0800235c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b089      	sub	sp, #36	@ 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	240c      	movs	r4, #12
 8002366:	193b      	adds	r3, r7, r4
 8002368:	0018      	movs	r0, r3
 800236a:	2314      	movs	r3, #20
 800236c:	001a      	movs	r2, r3
 800236e:	2100      	movs	r1, #0
 8002370:	f004 fbf2 	bl	8006b58 <memset>
  if(hi2c->Instance==I2C1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a18      	ldr	r2, [pc, #96]	@ (80023dc <HAL_I2C_MspInit+0x80>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d12a      	bne.n	80023d4 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237e:	4b18      	ldr	r3, [pc, #96]	@ (80023e0 <HAL_I2C_MspInit+0x84>)
 8002380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002382:	4b17      	ldr	r3, [pc, #92]	@ (80023e0 <HAL_I2C_MspInit+0x84>)
 8002384:	2101      	movs	r1, #1
 8002386:	430a      	orrs	r2, r1
 8002388:	62da      	str	r2, [r3, #44]	@ 0x2c
 800238a:	4b15      	ldr	r3, [pc, #84]	@ (80023e0 <HAL_I2C_MspInit+0x84>)
 800238c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238e:	2201      	movs	r2, #1
 8002390:	4013      	ands	r3, r2
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002396:	193b      	adds	r3, r7, r4
 8002398:	22c0      	movs	r2, #192	@ 0xc0
 800239a:	00d2      	lsls	r2, r2, #3
 800239c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800239e:	0021      	movs	r1, r4
 80023a0:	187b      	adds	r3, r7, r1
 80023a2:	2212      	movs	r2, #18
 80023a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	187b      	adds	r3, r7, r1
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ac:	187b      	adds	r3, r7, r1
 80023ae:	2203      	movs	r2, #3
 80023b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80023b2:	187b      	adds	r3, r7, r1
 80023b4:	2206      	movs	r2, #6
 80023b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b8:	187a      	adds	r2, r7, r1
 80023ba:	23a0      	movs	r3, #160	@ 0xa0
 80023bc:	05db      	lsls	r3, r3, #23
 80023be:	0011      	movs	r1, r2
 80023c0:	0018      	movs	r0, r3
 80023c2:	f001 f869 	bl	8003498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023c6:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <HAL_I2C_MspInit+0x84>)
 80023c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023ca:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <HAL_I2C_MspInit+0x84>)
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	0389      	lsls	r1, r1, #14
 80023d0:	430a      	orrs	r2, r1
 80023d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80023d4:	46c0      	nop			@ (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b009      	add	sp, #36	@ 0x24
 80023da:	bd90      	pop	{r4, r7, pc}
 80023dc:	40005400 	.word	0x40005400
 80023e0:	40021000 	.word	0x40021000

080023e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	2380      	movs	r3, #128	@ 0x80
 80023f2:	05db      	lsls	r3, r3, #23
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d106      	bne.n	8002406 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002434 <HAL_TIM_Base_MspInit+0x50>)
 80023fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002434 <HAL_TIM_Base_MspInit+0x50>)
 80023fe:	2101      	movs	r1, #1
 8002400:	430a      	orrs	r2, r1
 8002402:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8002404:	e012      	b.n	800242c <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM21)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a0b      	ldr	r2, [pc, #44]	@ (8002438 <HAL_TIM_Base_MspInit+0x54>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d10d      	bne.n	800242c <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8002410:	4b08      	ldr	r3, [pc, #32]	@ (8002434 <HAL_TIM_Base_MspInit+0x50>)
 8002412:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002414:	4b07      	ldr	r3, [pc, #28]	@ (8002434 <HAL_TIM_Base_MspInit+0x50>)
 8002416:	2104      	movs	r1, #4
 8002418:	430a      	orrs	r2, r1
 800241a:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 1, 0);
 800241c:	2200      	movs	r2, #0
 800241e:	2101      	movs	r1, #1
 8002420:	2014      	movs	r0, #20
 8002422:	f000 fefb 	bl	800321c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8002426:	2014      	movs	r0, #20
 8002428:	f000 ff0d 	bl	8003246 <HAL_NVIC_EnableIRQ>
}
 800242c:	46c0      	nop			@ (mov r8, r8)
 800242e:	46bd      	mov	sp, r7
 8002430:	b002      	add	sp, #8
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40021000 	.word	0x40021000
 8002438:	40010800 	.word	0x40010800

0800243c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b089      	sub	sp, #36	@ 0x24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	240c      	movs	r4, #12
 8002446:	193b      	adds	r3, r7, r4
 8002448:	0018      	movs	r0, r3
 800244a:	2314      	movs	r3, #20
 800244c:	001a      	movs	r2, r3
 800244e:	2100      	movs	r1, #0
 8002450:	f004 fb82 	bl	8006b58 <memset>
  if(htim_encoder->Instance==TIM3)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a17      	ldr	r2, [pc, #92]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0x7c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d128      	bne.n	80024b0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800245e:	4b17      	ldr	r3, [pc, #92]	@ (80024bc <HAL_TIM_Encoder_MspInit+0x80>)
 8002460:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002462:	4b16      	ldr	r3, [pc, #88]	@ (80024bc <HAL_TIM_Encoder_MspInit+0x80>)
 8002464:	2102      	movs	r1, #2
 8002466:	430a      	orrs	r2, r1
 8002468:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246a:	4b14      	ldr	r3, [pc, #80]	@ (80024bc <HAL_TIM_Encoder_MspInit+0x80>)
 800246c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800246e:	4b13      	ldr	r3, [pc, #76]	@ (80024bc <HAL_TIM_Encoder_MspInit+0x80>)
 8002470:	2101      	movs	r1, #1
 8002472:	430a      	orrs	r2, r1
 8002474:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002476:	4b11      	ldr	r3, [pc, #68]	@ (80024bc <HAL_TIM_Encoder_MspInit+0x80>)
 8002478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247a:	2201      	movs	r2, #1
 800247c:	4013      	ands	r3, r2
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_Pin|EncoderB_Pin;
 8002482:	0021      	movs	r1, r4
 8002484:	187b      	adds	r3, r7, r1
 8002486:	22c0      	movs	r2, #192	@ 0xc0
 8002488:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248a:	187b      	adds	r3, r7, r1
 800248c:	2202      	movs	r2, #2
 800248e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	187b      	adds	r3, r7, r1
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002496:	187b      	adds	r3, r7, r1
 8002498:	2200      	movs	r2, #0
 800249a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800249c:	187b      	adds	r3, r7, r1
 800249e:	2202      	movs	r2, #2
 80024a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a2:	187a      	adds	r2, r7, r1
 80024a4:	23a0      	movs	r3, #160	@ 0xa0
 80024a6:	05db      	lsls	r3, r3, #23
 80024a8:	0011      	movs	r1, r2
 80024aa:	0018      	movs	r0, r3
 80024ac:	f000 fff4 	bl	8003498 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80024b0:	46c0      	nop			@ (mov r8, r8)
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b009      	add	sp, #36	@ 0x24
 80024b6:	bd90      	pop	{r4, r7, pc}
 80024b8:	40000400 	.word	0x40000400
 80024bc:	40021000 	.word	0x40021000

080024c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b089      	sub	sp, #36	@ 0x24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	240c      	movs	r4, #12
 80024ca:	193b      	adds	r3, r7, r4
 80024cc:	0018      	movs	r0, r3
 80024ce:	2314      	movs	r3, #20
 80024d0:	001a      	movs	r2, r3
 80024d2:	2100      	movs	r1, #0
 80024d4:	f004 fb40 	bl	8006b58 <memset>
  if(htim->Instance==TIM2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	2380      	movs	r3, #128	@ 0x80
 80024de:	05db      	lsls	r3, r3, #23
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d122      	bne.n	800252a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e4:	4b13      	ldr	r3, [pc, #76]	@ (8002534 <HAL_TIM_MspPostInit+0x74>)
 80024e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024e8:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <HAL_TIM_MspPostInit+0x74>)
 80024ea:	2101      	movs	r1, #1
 80024ec:	430a      	orrs	r2, r1
 80024ee:	62da      	str	r2, [r3, #44]	@ 0x2c
 80024f0:	4b10      	ldr	r3, [pc, #64]	@ (8002534 <HAL_TIM_MspPostInit+0x74>)
 80024f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f4:	2201      	movs	r2, #1
 80024f6:	4013      	ands	r3, r2
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M1A_Pin|M1B_Pin;
 80024fc:	0021      	movs	r1, r4
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	2203      	movs	r2, #3
 8002502:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	187b      	adds	r3, r7, r1
 8002506:	2202      	movs	r2, #2
 8002508:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	187b      	adds	r3, r7, r1
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	187b      	adds	r3, r7, r1
 8002512:	2200      	movs	r2, #0
 8002514:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002516:	187b      	adds	r3, r7, r1
 8002518:	2202      	movs	r2, #2
 800251a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251c:	187a      	adds	r2, r7, r1
 800251e:	23a0      	movs	r3, #160	@ 0xa0
 8002520:	05db      	lsls	r3, r3, #23
 8002522:	0011      	movs	r1, r2
 8002524:	0018      	movs	r0, r3
 8002526:	f000 ffb7 	bl	8003498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800252a:	46c0      	nop			@ (mov r8, r8)
 800252c:	46bd      	mov	sp, r7
 800252e:	b009      	add	sp, #36	@ 0x24
 8002530:	bd90      	pop	{r4, r7, pc}
 8002532:	46c0      	nop			@ (mov r8, r8)
 8002534:	40021000 	.word	0x40021000

08002538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b089      	sub	sp, #36	@ 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	240c      	movs	r4, #12
 8002542:	193b      	adds	r3, r7, r4
 8002544:	0018      	movs	r0, r3
 8002546:	2314      	movs	r3, #20
 8002548:	001a      	movs	r2, r3
 800254a:	2100      	movs	r1, #0
 800254c:	f004 fb04 	bl	8006b58 <memset>
  if(huart->Instance==USART2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a18      	ldr	r2, [pc, #96]	@ (80025b8 <HAL_UART_MspInit+0x80>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d129      	bne.n	80025ae <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800255a:	4b18      	ldr	r3, [pc, #96]	@ (80025bc <HAL_UART_MspInit+0x84>)
 800255c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800255e:	4b17      	ldr	r3, [pc, #92]	@ (80025bc <HAL_UART_MspInit+0x84>)
 8002560:	2180      	movs	r1, #128	@ 0x80
 8002562:	0289      	lsls	r1, r1, #10
 8002564:	430a      	orrs	r2, r1
 8002566:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002568:	4b14      	ldr	r3, [pc, #80]	@ (80025bc <HAL_UART_MspInit+0x84>)
 800256a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800256c:	4b13      	ldr	r3, [pc, #76]	@ (80025bc <HAL_UART_MspInit+0x84>)
 800256e:	2101      	movs	r1, #1
 8002570:	430a      	orrs	r2, r1
 8002572:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <HAL_UART_MspInit+0x84>)
 8002576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002578:	2201      	movs	r2, #1
 800257a:	4013      	ands	r3, r2
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002580:	0021      	movs	r1, r4
 8002582:	187b      	adds	r3, r7, r1
 8002584:	220c      	movs	r2, #12
 8002586:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002588:	187b      	adds	r3, r7, r1
 800258a:	2202      	movs	r2, #2
 800258c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	187b      	adds	r3, r7, r1
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002594:	187b      	adds	r3, r7, r1
 8002596:	2203      	movs	r2, #3
 8002598:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800259a:	187b      	adds	r3, r7, r1
 800259c:	2204      	movs	r2, #4
 800259e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a0:	187a      	adds	r2, r7, r1
 80025a2:	23a0      	movs	r3, #160	@ 0xa0
 80025a4:	05db      	lsls	r3, r3, #23
 80025a6:	0011      	movs	r1, r2
 80025a8:	0018      	movs	r0, r3
 80025aa:	f000 ff75 	bl	8003498 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80025ae:	46c0      	nop			@ (mov r8, r8)
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b009      	add	sp, #36	@ 0x24
 80025b4:	bd90      	pop	{r4, r7, pc}
 80025b6:	46c0      	nop			@ (mov r8, r8)
 80025b8:	40004400 	.word	0x40004400
 80025bc:	40021000 	.word	0x40021000

080025c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025c4:	46c0      	nop			@ (mov r8, r8)
 80025c6:	e7fd      	b.n	80025c4 <NMI_Handler+0x4>

080025c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025cc:	46c0      	nop			@ (mov r8, r8)
 80025ce:	e7fd      	b.n	80025cc <HardFault_Handler+0x4>

080025d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80025d4:	46c0      	nop			@ (mov r8, r8)
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025de:	46c0      	nop			@ (mov r8, r8)
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025e8:	f000 f8d4 	bl	8002794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ec:	46c0      	nop			@ (mov r8, r8)
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80025f6:	2380      	movs	r3, #128	@ 0x80
 80025f8:	019b      	lsls	r3, r3, #6
 80025fa:	0018      	movs	r0, r3
 80025fc:	f001 f8e8 	bl	80037d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002600:	46c0      	nop			@ (mov r8, r8)
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 800260c:	4b03      	ldr	r3, [pc, #12]	@ (800261c <TIM21_IRQHandler+0x14>)
 800260e:	0018      	movs	r0, r3
 8002610:	f002 ff73 	bl	80054fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8002614:	46c0      	nop			@ (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			@ (mov r8, r8)
 800261c:	200001f4 	.word	0x200001f4

08002620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002628:	4a14      	ldr	r2, [pc, #80]	@ (800267c <_sbrk+0x5c>)
 800262a:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <_sbrk+0x60>)
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002634:	4b13      	ldr	r3, [pc, #76]	@ (8002684 <_sbrk+0x64>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d102      	bne.n	8002642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800263c:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <_sbrk+0x64>)
 800263e:	4a12      	ldr	r2, [pc, #72]	@ (8002688 <_sbrk+0x68>)
 8002640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002642:	4b10      	ldr	r3, [pc, #64]	@ (8002684 <_sbrk+0x64>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	18d3      	adds	r3, r2, r3
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	429a      	cmp	r2, r3
 800264e:	d207      	bcs.n	8002660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002650:	f004 fa8a 	bl	8006b68 <__errno>
 8002654:	0003      	movs	r3, r0
 8002656:	220c      	movs	r2, #12
 8002658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800265a:	2301      	movs	r3, #1
 800265c:	425b      	negs	r3, r3
 800265e:	e009      	b.n	8002674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002660:	4b08      	ldr	r3, [pc, #32]	@ (8002684 <_sbrk+0x64>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002666:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <_sbrk+0x64>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	18d2      	adds	r2, r2, r3
 800266e:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <_sbrk+0x64>)
 8002670:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002672:	68fb      	ldr	r3, [r7, #12]
}
 8002674:	0018      	movs	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	b006      	add	sp, #24
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20005000 	.word	0x20005000
 8002680:	00000400 	.word	0x00000400
 8002684:	2000037c 	.word	0x2000037c
 8002688:	200004d0 	.word	0x200004d0

0800268c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002690:	46c0      	nop			@ (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002698:	480d      	ldr	r0, [pc, #52]	@ (80026d0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800269a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800269c:	f7ff fff6 	bl	800268c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a0:	480c      	ldr	r0, [pc, #48]	@ (80026d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80026a2:	490d      	ldr	r1, [pc, #52]	@ (80026d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026a4:	4a0d      	ldr	r2, [pc, #52]	@ (80026dc <LoopForever+0xe>)
  movs r3, #0
 80026a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026a8:	e002      	b.n	80026b0 <LoopCopyDataInit>

080026aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ae:	3304      	adds	r3, #4

080026b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b4:	d3f9      	bcc.n	80026aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026b6:	4a0a      	ldr	r2, [pc, #40]	@ (80026e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026b8:	4c0a      	ldr	r4, [pc, #40]	@ (80026e4 <LoopForever+0x16>)
  movs r3, #0
 80026ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026bc:	e001      	b.n	80026c2 <LoopFillZerobss>

080026be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c0:	3204      	adds	r2, #4

080026c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c4:	d3fb      	bcc.n	80026be <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80026c6:	f004 fa55 	bl	8006b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ca:	f7fe ffad 	bl	8001628 <main>

080026ce <LoopForever>:

LoopForever:
    b LoopForever
 80026ce:	e7fe      	b.n	80026ce <LoopForever>
   ldr   r0, =_estack
 80026d0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80026d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026d8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80026dc:	08007584 	.word	0x08007584
  ldr r2, =_sbss
 80026e0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80026e4:	200004cc 	.word	0x200004cc

080026e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026e8:	e7fe      	b.n	80026e8 <ADC1_COMP_IRQHandler>
	...

080026ec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026f2:	1dfb      	adds	r3, r7, #7
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80026f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002728 <HAL_Init+0x3c>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002728 <HAL_Init+0x3c>)
 80026fe:	2140      	movs	r1, #64	@ 0x40
 8002700:	430a      	orrs	r2, r1
 8002702:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002704:	2000      	movs	r0, #0
 8002706:	f000 f811 	bl	800272c <HAL_InitTick>
 800270a:	1e03      	subs	r3, r0, #0
 800270c:	d003      	beq.n	8002716 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800270e:	1dfb      	adds	r3, r7, #7
 8002710:	2201      	movs	r2, #1
 8002712:	701a      	strb	r2, [r3, #0]
 8002714:	e001      	b.n	800271a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002716:	f7ff fda1 	bl	800225c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800271a:	1dfb      	adds	r3, r7, #7
 800271c:	781b      	ldrb	r3, [r3, #0]
}
 800271e:	0018      	movs	r0, r3
 8002720:	46bd      	mov	sp, r7
 8002722:	b002      	add	sp, #8
 8002724:	bd80      	pop	{r7, pc}
 8002726:	46c0      	nop			@ (mov r8, r8)
 8002728:	40022000 	.word	0x40022000

0800272c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002734:	4b14      	ldr	r3, [pc, #80]	@ (8002788 <HAL_InitTick+0x5c>)
 8002736:	681c      	ldr	r4, [r3, #0]
 8002738:	4b14      	ldr	r3, [pc, #80]	@ (800278c <HAL_InitTick+0x60>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	0019      	movs	r1, r3
 800273e:	23fa      	movs	r3, #250	@ 0xfa
 8002740:	0098      	lsls	r0, r3, #2
 8002742:	f7fd fcf3 	bl	800012c <__udivsi3>
 8002746:	0003      	movs	r3, r0
 8002748:	0019      	movs	r1, r3
 800274a:	0020      	movs	r0, r4
 800274c:	f7fd fcee 	bl	800012c <__udivsi3>
 8002750:	0003      	movs	r3, r0
 8002752:	0018      	movs	r0, r3
 8002754:	f000 fd87 	bl	8003266 <HAL_SYSTICK_Config>
 8002758:	1e03      	subs	r3, r0, #0
 800275a:	d001      	beq.n	8002760 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e00f      	b.n	8002780 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b03      	cmp	r3, #3
 8002764:	d80b      	bhi.n	800277e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	2301      	movs	r3, #1
 800276a:	425b      	negs	r3, r3
 800276c:	2200      	movs	r2, #0
 800276e:	0018      	movs	r0, r3
 8002770:	f000 fd54 	bl	800321c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002774:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <HAL_InitTick+0x64>)
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	e000      	b.n	8002780 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
}
 8002780:	0018      	movs	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	b003      	add	sp, #12
 8002786:	bd90      	pop	{r4, r7, pc}
 8002788:	20000000 	.word	0x20000000
 800278c:	20000008 	.word	0x20000008
 8002790:	20000004 	.word	0x20000004

08002794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002798:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <HAL_IncTick+0x1c>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	001a      	movs	r2, r3
 800279e:	4b05      	ldr	r3, [pc, #20]	@ (80027b4 <HAL_IncTick+0x20>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	18d2      	adds	r2, r2, r3
 80027a4:	4b03      	ldr	r3, [pc, #12]	@ (80027b4 <HAL_IncTick+0x20>)
 80027a6:	601a      	str	r2, [r3, #0]
}
 80027a8:	46c0      	nop			@ (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	46c0      	nop			@ (mov r8, r8)
 80027b0:	20000008 	.word	0x20000008
 80027b4:	20000380 	.word	0x20000380

080027b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  return uwTick;
 80027bc:	4b02      	ldr	r3, [pc, #8]	@ (80027c8 <HAL_GetTick+0x10>)
 80027be:	681b      	ldr	r3, [r3, #0]
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	46c0      	nop			@ (mov r8, r8)
 80027c8:	20000380 	.word	0x20000380

080027cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027d4:	f7ff fff0 	bl	80027b8 <HAL_GetTick>
 80027d8:	0003      	movs	r3, r0
 80027da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	3301      	adds	r3, #1
 80027e4:	d005      	beq.n	80027f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002810 <HAL_Delay+0x44>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	001a      	movs	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	189b      	adds	r3, r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027f2:	46c0      	nop			@ (mov r8, r8)
 80027f4:	f7ff ffe0 	bl	80027b8 <HAL_GetTick>
 80027f8:	0002      	movs	r2, r0
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	429a      	cmp	r2, r3
 8002802:	d8f7      	bhi.n	80027f4 <HAL_Delay+0x28>
  {
  }
}
 8002804:	46c0      	nop			@ (mov r8, r8)
 8002806:	46c0      	nop			@ (mov r8, r8)
 8002808:	46bd      	mov	sp, r7
 800280a:	b004      	add	sp, #16
 800280c:	bd80      	pop	{r7, pc}
 800280e:	46c0      	nop			@ (mov r8, r8)
 8002810:	20000008 	.word	0x20000008

08002814 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e159      	b.n	8002ada <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10a      	bne.n	8002844 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2250      	movs	r2, #80	@ 0x50
 8002838:	2100      	movs	r1, #0
 800283a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	0018      	movs	r0, r3
 8002840:	f7ff fd20 	bl	8002284 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002848:	2210      	movs	r2, #16
 800284a:	4013      	ands	r3, r2
 800284c:	2b10      	cmp	r3, #16
 800284e:	d005      	beq.n	800285c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2204      	movs	r2, #4
 8002858:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800285a:	d00b      	beq.n	8002874 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002860:	2210      	movs	r2, #16
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2250      	movs	r2, #80	@ 0x50
 800286c:	2100      	movs	r1, #0
 800286e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e132      	b.n	8002ada <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002878:	4a9a      	ldr	r2, [pc, #616]	@ (8002ae4 <HAL_ADC_Init+0x2d0>)
 800287a:	4013      	ands	r3, r2
 800287c:	2202      	movs	r2, #2
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2203      	movs	r2, #3
 800288c:	4013      	ands	r3, r2
 800288e:	2b01      	cmp	r3, #1
 8002890:	d108      	bne.n	80028a4 <HAL_ADC_Init+0x90>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2201      	movs	r2, #1
 800289a:	4013      	ands	r3, r2
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_Init+0x90>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <HAL_ADC_Init+0x92>
 80028a4:	2300      	movs	r3, #0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d149      	bne.n	800293e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	23c0      	movs	r3, #192	@ 0xc0
 80028b0:	061b      	lsls	r3, r3, #24
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d00b      	beq.n	80028ce <HAL_ADC_Init+0xba>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	2380      	movs	r3, #128	@ 0x80
 80028bc:	05db      	lsls	r3, r3, #23
 80028be:	429a      	cmp	r2, r3
 80028c0:	d005      	beq.n	80028ce <HAL_ADC_Init+0xba>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	2380      	movs	r3, #128	@ 0x80
 80028c8:	061b      	lsls	r3, r3, #24
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d111      	bne.n	80028f2 <HAL_ADC_Init+0xde>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	0092      	lsls	r2, r2, #2
 80028da:	0892      	lsrs	r2, r2, #2
 80028dc:	611a      	str	r2, [r3, #16]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6919      	ldr	r1, [r3, #16]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	611a      	str	r2, [r3, #16]
 80028f0:	e014      	b.n	800291c <HAL_ADC_Init+0x108>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	0092      	lsls	r2, r2, #2
 80028fe:	0892      	lsrs	r2, r2, #2
 8002900:	611a      	str	r2, [r3, #16]
 8002902:	4b79      	ldr	r3, [pc, #484]	@ (8002ae8 <HAL_ADC_Init+0x2d4>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4b78      	ldr	r3, [pc, #480]	@ (8002ae8 <HAL_ADC_Init+0x2d4>)
 8002908:	4978      	ldr	r1, [pc, #480]	@ (8002aec <HAL_ADC_Init+0x2d8>)
 800290a:	400a      	ands	r2, r1
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	4b76      	ldr	r3, [pc, #472]	@ (8002ae8 <HAL_ADC_Init+0x2d4>)
 8002910:	6819      	ldr	r1, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	4b74      	ldr	r3, [pc, #464]	@ (8002ae8 <HAL_ADC_Init+0x2d4>)
 8002918:	430a      	orrs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2118      	movs	r1, #24
 8002928:	438a      	bics	r2, r1
 800292a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68d9      	ldr	r1, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800293e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ae8 <HAL_ADC_Init+0x2d4>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4b69      	ldr	r3, [pc, #420]	@ (8002ae8 <HAL_ADC_Init+0x2d4>)
 8002944:	496a      	ldr	r1, [pc, #424]	@ (8002af0 <HAL_ADC_Init+0x2dc>)
 8002946:	400a      	ands	r2, r1
 8002948:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800294a:	4b67      	ldr	r3, [pc, #412]	@ (8002ae8 <HAL_ADC_Init+0x2d4>)
 800294c:	6819      	ldr	r1, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002952:	065a      	lsls	r2, r3, #25
 8002954:	4b64      	ldr	r3, [pc, #400]	@ (8002ae8 <HAL_ADC_Init+0x2d4>)
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	2380      	movs	r3, #128	@ 0x80
 8002962:	055b      	lsls	r3, r3, #21
 8002964:	4013      	ands	r3, r2
 8002966:	d108      	bne.n	800297a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2180      	movs	r1, #128	@ 0x80
 8002974:	0549      	lsls	r1, r1, #21
 8002976:	430a      	orrs	r2, r1
 8002978:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	495b      	ldr	r1, [pc, #364]	@ (8002af4 <HAL_ADC_Init+0x2e0>)
 8002986:	400a      	ands	r2, r1
 8002988:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68d9      	ldr	r1, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d101      	bne.n	80029a0 <HAL_ADC_Init+0x18c>
 800299c:	2304      	movs	r3, #4
 800299e:	e000      	b.n	80029a2 <HAL_ADC_Init+0x18e>
 80029a0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80029a2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2020      	movs	r0, #32
 80029a8:	5c1b      	ldrb	r3, [r3, r0]
 80029aa:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80029ac:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	202c      	movs	r0, #44	@ 0x2c
 80029b2:	5c1b      	ldrb	r3, [r3, r0]
 80029b4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80029b6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80029bc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80029c4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80029cc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029da:	23c2      	movs	r3, #194	@ 0xc2
 80029dc:	33ff      	adds	r3, #255	@ 0xff
 80029de:	429a      	cmp	r2, r3
 80029e0:	d00b      	beq.n	80029fa <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68d9      	ldr	r1, [r3, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2221      	movs	r2, #33	@ 0x21
 80029fe:	5c9b      	ldrb	r3, [r3, r2]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d11a      	bne.n	8002a3a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2220      	movs	r2, #32
 8002a08:	5c9b      	ldrb	r3, [r3, r2]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2180      	movs	r1, #128	@ 0x80
 8002a1a:	0249      	lsls	r1, r1, #9
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	60da      	str	r2, [r3, #12]
 8002a20:	e00b      	b.n	8002a3a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a26:	2220      	movs	r2, #32
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a32:	2201      	movs	r2, #1
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d11f      	bne.n	8002a82 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	492a      	ldr	r1, [pc, #168]	@ (8002af8 <HAL_ADC_Init+0x2e4>)
 8002a4e:	400a      	ands	r2, r1
 8002a50:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6919      	ldr	r1, [r3, #16]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002a60:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8002a66:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	611a      	str	r2, [r3, #16]
 8002a80:	e00e      	b.n	8002aa0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d107      	bne.n	8002aa0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	438a      	bics	r2, r1
 8002a9e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2107      	movs	r1, #7
 8002aac:	438a      	bics	r2, r1
 8002aae:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6959      	ldr	r1, [r3, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002acc:	2203      	movs	r2, #3
 8002ace:	4393      	bics	r3, r2
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	0018      	movs	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b002      	add	sp, #8
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	46c0      	nop			@ (mov r8, r8)
 8002ae4:	fffffefd 	.word	0xfffffefd
 8002ae8:	40012708 	.word	0x40012708
 8002aec:	ffc3ffff 	.word	0xffc3ffff
 8002af0:	fdffffff 	.word	0xfdffffff
 8002af4:	fffe0219 	.word	0xfffe0219
 8002af8:	fffffc03 	.word	0xfffffc03

08002afc <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002afc:	b590      	push	{r4, r7, lr}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b08:	2317      	movs	r3, #23
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2204      	movs	r2, #4
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d15e      	bne.n	8002bda <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2250      	movs	r2, #80	@ 0x50
 8002b20:	5c9b      	ldrb	r3, [r3, r2]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_Start_DMA+0x2e>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e05e      	b.n	8002be8 <HAL_ADC_Start_DMA+0xec>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2250      	movs	r2, #80	@ 0x50
 8002b2e:	2101      	movs	r1, #1
 8002b30:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d007      	beq.n	8002b5a <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002b4a:	2317      	movs	r3, #23
 8002b4c:	18fc      	adds	r4, r7, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	0018      	movs	r0, r3
 8002b52:	f000 f90d 	bl	8002d70 <ADC_Enable>
 8002b56:	0003      	movs	r3, r0
 8002b58:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b5a:	2317      	movs	r3, #23
 8002b5c:	18fb      	adds	r3, r7, r3
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d13e      	bne.n	8002be2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b68:	4a21      	ldr	r2, [pc, #132]	@ (8002bf0 <HAL_ADC_Start_DMA+0xf4>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2280      	movs	r2, #128	@ 0x80
 8002b6e:	0052      	lsls	r2, r2, #1
 8002b70:	431a      	orrs	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2250      	movs	r2, #80	@ 0x50
 8002b80:	2100      	movs	r1, #0
 8002b82:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b88:	4a1a      	ldr	r2, [pc, #104]	@ (8002bf4 <HAL_ADC_Start_DMA+0xf8>)
 8002b8a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b90:	4a19      	ldr	r2, [pc, #100]	@ (8002bf8 <HAL_ADC_Start_DMA+0xfc>)
 8002b92:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b98:	4a18      	ldr	r2, [pc, #96]	@ (8002bfc <HAL_ADC_Start_DMA+0x100>)
 8002b9a:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	221c      	movs	r2, #28
 8002ba2:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2110      	movs	r1, #16
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	3340      	adds	r3, #64	@ 0x40
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f000 fbd4 	bl	8003370 <HAL_DMA_Start_IT>

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2104      	movs	r1, #4
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	e003      	b.n	8002be2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bda:	2317      	movs	r3, #23
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	2202      	movs	r2, #2
 8002be0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8002be2:	2317      	movs	r3, #23
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	781b      	ldrb	r3, [r3, #0]
}
 8002be8:	0018      	movs	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b007      	add	sp, #28
 8002bee:	bd90      	pop	{r4, r7, pc}
 8002bf0:	fffff0fe 	.word	0xfffff0fe
 8002bf4:	08002e41 	.word	0x08002e41
 8002bf8:	08002ef5 	.word	0x08002ef5
 8002bfc:	08002f13 	.word	0x08002f13

08002c00 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c08:	46c0      	nop			@ (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b002      	add	sp, #8
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c18:	46c0      	nop			@ (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c28:	46c0      	nop			@ (mov r8, r8)
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b002      	add	sp, #8
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2250      	movs	r2, #80	@ 0x50
 8002c3e:	5c9b      	ldrb	r3, [r3, r2]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x18>
 8002c44:	2302      	movs	r3, #2
 8002c46:	e085      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x124>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2250      	movs	r2, #80	@ 0x50
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2204      	movs	r2, #4
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d00b      	beq.n	8002c74 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c60:	2220      	movs	r2, #32
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2250      	movs	r2, #80	@ 0x50
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e06f      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4a38      	ldr	r2, [pc, #224]	@ (8002d5c <HAL_ADC_ConfigChannel+0x12c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d035      	beq.n	8002cea <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	035b      	lsls	r3, r3, #13
 8002c8a:	0b5a      	lsrs	r2, r3, #13
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	2380      	movs	r3, #128	@ 0x80
 8002c9a:	02db      	lsls	r3, r3, #11
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d009      	beq.n	8002cb4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8002ca0:	4b2f      	ldr	r3, [pc, #188]	@ (8002d60 <HAL_ADC_ConfigChannel+0x130>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b2e      	ldr	r3, [pc, #184]	@ (8002d60 <HAL_ADC_ConfigChannel+0x130>)
 8002ca6:	2180      	movs	r1, #128	@ 0x80
 8002ca8:	0409      	lsls	r1, r1, #16
 8002caa:	430a      	orrs	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002cae:	200a      	movs	r0, #10
 8002cb0:	f000 f94a 	bl	8002f48 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	2380      	movs	r3, #128	@ 0x80
 8002cba:	029b      	lsls	r3, r3, #10
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d006      	beq.n	8002cce <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8002cc0:	4b27      	ldr	r3, [pc, #156]	@ (8002d60 <HAL_ADC_ConfigChannel+0x130>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4b26      	ldr	r3, [pc, #152]	@ (8002d60 <HAL_ADC_ConfigChannel+0x130>)
 8002cc6:	2180      	movs	r1, #128	@ 0x80
 8002cc8:	03c9      	lsls	r1, r1, #15
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	2380      	movs	r3, #128	@ 0x80
 8002cd4:	025b      	lsls	r3, r3, #9
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d037      	beq.n	8002d4a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8002cda:	4b21      	ldr	r3, [pc, #132]	@ (8002d60 <HAL_ADC_ConfigChannel+0x130>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	4b20      	ldr	r3, [pc, #128]	@ (8002d60 <HAL_ADC_ConfigChannel+0x130>)
 8002ce0:	2180      	movs	r1, #128	@ 0x80
 8002ce2:	0449      	lsls	r1, r1, #17
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	e02f      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	035b      	lsls	r3, r3, #13
 8002cf6:	0b5b      	lsrs	r3, r3, #13
 8002cf8:	43d9      	mvns	r1, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	400a      	ands	r2, r1
 8002d00:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	2380      	movs	r3, #128	@ 0x80
 8002d08:	02db      	lsls	r3, r3, #11
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d005      	beq.n	8002d1a <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8002d0e:	4b14      	ldr	r3, [pc, #80]	@ (8002d60 <HAL_ADC_ConfigChannel+0x130>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	4b13      	ldr	r3, [pc, #76]	@ (8002d60 <HAL_ADC_ConfigChannel+0x130>)
 8002d14:	4913      	ldr	r1, [pc, #76]	@ (8002d64 <HAL_ADC_ConfigChannel+0x134>)
 8002d16:	400a      	ands	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	2380      	movs	r3, #128	@ 0x80
 8002d20:	029b      	lsls	r3, r3, #10
 8002d22:	4013      	ands	r3, r2
 8002d24:	d005      	beq.n	8002d32 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8002d26:	4b0e      	ldr	r3, [pc, #56]	@ (8002d60 <HAL_ADC_ConfigChannel+0x130>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d60 <HAL_ADC_ConfigChannel+0x130>)
 8002d2c:	490e      	ldr	r1, [pc, #56]	@ (8002d68 <HAL_ADC_ConfigChannel+0x138>)
 8002d2e:	400a      	ands	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	2380      	movs	r3, #128	@ 0x80
 8002d38:	025b      	lsls	r3, r3, #9
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d005      	beq.n	8002d4a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8002d3e:	4b08      	ldr	r3, [pc, #32]	@ (8002d60 <HAL_ADC_ConfigChannel+0x130>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	4b07      	ldr	r3, [pc, #28]	@ (8002d60 <HAL_ADC_ConfigChannel+0x130>)
 8002d44:	4909      	ldr	r1, [pc, #36]	@ (8002d6c <HAL_ADC_ConfigChannel+0x13c>)
 8002d46:	400a      	ands	r2, r1
 8002d48:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2250      	movs	r2, #80	@ 0x50
 8002d4e:	2100      	movs	r1, #0
 8002d50:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	0018      	movs	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b002      	add	sp, #8
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	00001001 	.word	0x00001001
 8002d60:	40012708 	.word	0x40012708
 8002d64:	ff7fffff 	.word	0xff7fffff
 8002d68:	ffbfffff 	.word	0xffbfffff
 8002d6c:	feffffff 	.word	0xfeffffff

08002d70 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2203      	movs	r2, #3
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d108      	bne.n	8002d9c <ADC_Enable+0x2c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2201      	movs	r2, #1
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <ADC_Enable+0x2c>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <ADC_Enable+0x2e>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d146      	bne.n	8002e30 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4a24      	ldr	r2, [pc, #144]	@ (8002e3c <ADC_Enable+0xcc>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	d00d      	beq.n	8002dca <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db2:	2210      	movs	r2, #16
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e033      	b.n	8002e32 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002dda:	2001      	movs	r0, #1
 8002ddc:	f000 f8b4 	bl	8002f48 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002de0:	f7ff fcea 	bl	80027b8 <HAL_GetTick>
 8002de4:	0003      	movs	r3, r0
 8002de6:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002de8:	e01b      	b.n	8002e22 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dea:	f7ff fce5 	bl	80027b8 <HAL_GetTick>
 8002dee:	0002      	movs	r2, r0
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b0a      	cmp	r3, #10
 8002df6:	d914      	bls.n	8002e22 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d00d      	beq.n	8002e22 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e16:	2201      	movs	r2, #1
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e007      	b.n	8002e32 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d1dc      	bne.n	8002dea <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	0018      	movs	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	b004      	add	sp, #16
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	46c0      	nop			@ (mov r8, r8)
 8002e3c:	80000017 	.word	0x80000017

08002e40 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e52:	2250      	movs	r2, #80	@ 0x50
 8002e54:	4013      	ands	r3, r2
 8002e56:	d141      	bne.n	8002edc <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5c:	2280      	movs	r2, #128	@ 0x80
 8002e5e:	0092      	lsls	r2, r2, #2
 8002e60:	431a      	orrs	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	23c0      	movs	r3, #192	@ 0xc0
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	4013      	ands	r3, r2
 8002e72:	d12e      	bne.n	8002ed2 <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d129      	bne.n	8002ed2 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2208      	movs	r2, #8
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d122      	bne.n	8002ed2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2204      	movs	r2, #4
 8002e94:	4013      	ands	r3, r2
 8002e96:	d110      	bne.n	8002eba <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	210c      	movs	r1, #12
 8002ea4:	438a      	bics	r2, r1
 8002ea6:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eac:	4a10      	ldr	r2, [pc, #64]	@ (8002ef0 <ADC_DMAConvCplt+0xb0>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	655a      	str	r2, [r3, #84]	@ 0x54
 8002eb8:	e00b      	b.n	8002ed2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eca:	2201      	movs	r2, #1
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f7ff fe93 	bl	8002c00 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002eda:	e005      	b.n	8002ee8 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	0010      	movs	r0, r2
 8002ee6:	4798      	blx	r3
}
 8002ee8:	46c0      	nop			@ (mov r8, r8)
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b004      	add	sp, #16
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	fffffefe 	.word	0xfffffefe

08002ef4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	0018      	movs	r0, r3
 8002f06:	f7ff fe83 	bl	8002c10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f0a:	46c0      	nop			@ (mov r8, r8)
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b004      	add	sp, #16
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f24:	2240      	movs	r2, #64	@ 0x40
 8002f26:	431a      	orrs	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f30:	2204      	movs	r2, #4
 8002f32:	431a      	orrs	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f7ff fe70 	bl	8002c20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f40:	46c0      	nop			@ (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b004      	add	sp, #16
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002f50:	4b0b      	ldr	r3, [pc, #44]	@ (8002f80 <ADC_DelayMicroSecond+0x38>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	490b      	ldr	r1, [pc, #44]	@ (8002f84 <ADC_DelayMicroSecond+0x3c>)
 8002f56:	0018      	movs	r0, r3
 8002f58:	f7fd f8e8 	bl	800012c <__udivsi3>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	001a      	movs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4353      	muls	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8002f66:	e002      	b.n	8002f6e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f9      	bne.n	8002f68 <ADC_DelayMicroSecond+0x20>
  }
}
 8002f74:	46c0      	nop			@ (mov r8, r8)
 8002f76:	46c0      	nop			@ (mov r8, r8)
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b004      	add	sp, #16
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	46c0      	nop			@ (mov r8, r8)
 8002f80:	20000000 	.word	0x20000000
 8002f84:	000f4240 	.word	0x000f4240

08002f88 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f92:	2317      	movs	r3, #23
 8002f94:	18fb      	adds	r3, r7, r3
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2250      	movs	r2, #80	@ 0x50
 8002fa6:	5c9b      	ldrb	r3, [r3, r2]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_ADCEx_Calibration_Start+0x28>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e083      	b.n	80030b8 <HAL_ADCEx_Calibration_Start+0x130>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2250      	movs	r2, #80	@ 0x50
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d108      	bne.n	8002fd8 <HAL_ADCEx_Calibration_Start+0x50>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_ADCEx_Calibration_Start+0x50>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <HAL_ADCEx_Calibration_Start+0x52>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d15b      	bne.n	8003096 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe2:	4a37      	ldr	r2, [pc, #220]	@ (80030c0 <HAL_ADCEx_Calibration_Start+0x138>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2103      	movs	r1, #3
 8003006:	438a      	bics	r2, r1
 8003008:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2180      	movs	r1, #128	@ 0x80
 8003016:	0609      	lsls	r1, r1, #24
 8003018:	430a      	orrs	r2, r1
 800301a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800301c:	f7ff fbcc 	bl	80027b8 <HAL_GetTick>
 8003020:	0003      	movs	r3, r0
 8003022:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003024:	e01d      	b.n	8003062 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003026:	f7ff fbc7 	bl	80027b8 <HAL_GetTick>
 800302a:	0002      	movs	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b0a      	cmp	r3, #10
 8003032:	d916      	bls.n	8003062 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	0fdb      	lsrs	r3, r3, #31
 800303c:	07da      	lsls	r2, r3, #31
 800303e:	2380      	movs	r3, #128	@ 0x80
 8003040:	061b      	lsls	r3, r3, #24
 8003042:	429a      	cmp	r2, r3
 8003044:	d10d      	bne.n	8003062 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304a:	2212      	movs	r2, #18
 800304c:	4393      	bics	r3, r2
 800304e:	2210      	movs	r2, #16
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	655a      	str	r2, [r3, #84]	@ 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2250      	movs	r2, #80	@ 0x50
 800305a:	2100      	movs	r1, #0
 800305c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e02a      	b.n	80030b8 <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	0fdb      	lsrs	r3, r3, #31
 800306a:	07da      	lsls	r2, r3, #31
 800306c:	2380      	movs	r3, #128	@ 0x80
 800306e:	061b      	lsls	r3, r3, #24
 8003070:	429a      	cmp	r2, r3
 8003072:	d0d8      	beq.n	8003026 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68d9      	ldr	r1, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	430a      	orrs	r2, r1
 8003082:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003088:	2203      	movs	r2, #3
 800308a:	4393      	bics	r3, r2
 800308c:	2201      	movs	r2, #1
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	655a      	str	r2, [r3, #84]	@ 0x54
 8003094:	e009      	b.n	80030aa <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309a:	2220      	movs	r2, #32
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80030a2:	2317      	movs	r3, #23
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	2201      	movs	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2250      	movs	r2, #80	@ 0x50
 80030ae:	2100      	movs	r1, #0
 80030b0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80030b2:	2317      	movs	r3, #23
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	781b      	ldrb	r3, [r3, #0]
}
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b006      	add	sp, #24
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	fffffefd 	.word	0xfffffefd

080030c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	0002      	movs	r2, r0
 80030cc:	1dfb      	adds	r3, r7, #7
 80030ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030d0:	1dfb      	adds	r3, r7, #7
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80030d6:	d809      	bhi.n	80030ec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030d8:	1dfb      	adds	r3, r7, #7
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	001a      	movs	r2, r3
 80030de:	231f      	movs	r3, #31
 80030e0:	401a      	ands	r2, r3
 80030e2:	4b04      	ldr	r3, [pc, #16]	@ (80030f4 <__NVIC_EnableIRQ+0x30>)
 80030e4:	2101      	movs	r1, #1
 80030e6:	4091      	lsls	r1, r2
 80030e8:	000a      	movs	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]
  }
}
 80030ec:	46c0      	nop			@ (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b002      	add	sp, #8
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	e000e100 	.word	0xe000e100

080030f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030f8:	b590      	push	{r4, r7, lr}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	0002      	movs	r2, r0
 8003100:	6039      	str	r1, [r7, #0]
 8003102:	1dfb      	adds	r3, r7, #7
 8003104:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003106:	1dfb      	adds	r3, r7, #7
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b7f      	cmp	r3, #127	@ 0x7f
 800310c:	d828      	bhi.n	8003160 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800310e:	4a2f      	ldr	r2, [pc, #188]	@ (80031cc <__NVIC_SetPriority+0xd4>)
 8003110:	1dfb      	adds	r3, r7, #7
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	b25b      	sxtb	r3, r3
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	33c0      	adds	r3, #192	@ 0xc0
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	589b      	ldr	r3, [r3, r2]
 800311e:	1dfa      	adds	r2, r7, #7
 8003120:	7812      	ldrb	r2, [r2, #0]
 8003122:	0011      	movs	r1, r2
 8003124:	2203      	movs	r2, #3
 8003126:	400a      	ands	r2, r1
 8003128:	00d2      	lsls	r2, r2, #3
 800312a:	21ff      	movs	r1, #255	@ 0xff
 800312c:	4091      	lsls	r1, r2
 800312e:	000a      	movs	r2, r1
 8003130:	43d2      	mvns	r2, r2
 8003132:	401a      	ands	r2, r3
 8003134:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	019b      	lsls	r3, r3, #6
 800313a:	22ff      	movs	r2, #255	@ 0xff
 800313c:	401a      	ands	r2, r3
 800313e:	1dfb      	adds	r3, r7, #7
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	0018      	movs	r0, r3
 8003144:	2303      	movs	r3, #3
 8003146:	4003      	ands	r3, r0
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800314c:	481f      	ldr	r0, [pc, #124]	@ (80031cc <__NVIC_SetPriority+0xd4>)
 800314e:	1dfb      	adds	r3, r7, #7
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	b25b      	sxtb	r3, r3
 8003154:	089b      	lsrs	r3, r3, #2
 8003156:	430a      	orrs	r2, r1
 8003158:	33c0      	adds	r3, #192	@ 0xc0
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800315e:	e031      	b.n	80031c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003160:	4a1b      	ldr	r2, [pc, #108]	@ (80031d0 <__NVIC_SetPriority+0xd8>)
 8003162:	1dfb      	adds	r3, r7, #7
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	0019      	movs	r1, r3
 8003168:	230f      	movs	r3, #15
 800316a:	400b      	ands	r3, r1
 800316c:	3b08      	subs	r3, #8
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	3306      	adds	r3, #6
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	18d3      	adds	r3, r2, r3
 8003176:	3304      	adds	r3, #4
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	1dfa      	adds	r2, r7, #7
 800317c:	7812      	ldrb	r2, [r2, #0]
 800317e:	0011      	movs	r1, r2
 8003180:	2203      	movs	r2, #3
 8003182:	400a      	ands	r2, r1
 8003184:	00d2      	lsls	r2, r2, #3
 8003186:	21ff      	movs	r1, #255	@ 0xff
 8003188:	4091      	lsls	r1, r2
 800318a:	000a      	movs	r2, r1
 800318c:	43d2      	mvns	r2, r2
 800318e:	401a      	ands	r2, r3
 8003190:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	019b      	lsls	r3, r3, #6
 8003196:	22ff      	movs	r2, #255	@ 0xff
 8003198:	401a      	ands	r2, r3
 800319a:	1dfb      	adds	r3, r7, #7
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	0018      	movs	r0, r3
 80031a0:	2303      	movs	r3, #3
 80031a2:	4003      	ands	r3, r0
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031a8:	4809      	ldr	r0, [pc, #36]	@ (80031d0 <__NVIC_SetPriority+0xd8>)
 80031aa:	1dfb      	adds	r3, r7, #7
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	001c      	movs	r4, r3
 80031b0:	230f      	movs	r3, #15
 80031b2:	4023      	ands	r3, r4
 80031b4:	3b08      	subs	r3, #8
 80031b6:	089b      	lsrs	r3, r3, #2
 80031b8:	430a      	orrs	r2, r1
 80031ba:	3306      	adds	r3, #6
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	18c3      	adds	r3, r0, r3
 80031c0:	3304      	adds	r3, #4
 80031c2:	601a      	str	r2, [r3, #0]
}
 80031c4:	46c0      	nop			@ (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b003      	add	sp, #12
 80031ca:	bd90      	pop	{r4, r7, pc}
 80031cc:	e000e100 	.word	0xe000e100
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	1e5a      	subs	r2, r3, #1
 80031e0:	2380      	movs	r3, #128	@ 0x80
 80031e2:	045b      	lsls	r3, r3, #17
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d301      	bcc.n	80031ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031e8:	2301      	movs	r3, #1
 80031ea:	e010      	b.n	800320e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003218 <SysTick_Config+0x44>)
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	3a01      	subs	r2, #1
 80031f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031f4:	2301      	movs	r3, #1
 80031f6:	425b      	negs	r3, r3
 80031f8:	2103      	movs	r1, #3
 80031fa:	0018      	movs	r0, r3
 80031fc:	f7ff ff7c 	bl	80030f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003200:	4b05      	ldr	r3, [pc, #20]	@ (8003218 <SysTick_Config+0x44>)
 8003202:	2200      	movs	r2, #0
 8003204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003206:	4b04      	ldr	r3, [pc, #16]	@ (8003218 <SysTick_Config+0x44>)
 8003208:	2207      	movs	r2, #7
 800320a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800320c:	2300      	movs	r3, #0
}
 800320e:	0018      	movs	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	b002      	add	sp, #8
 8003214:	bd80      	pop	{r7, pc}
 8003216:	46c0      	nop			@ (mov r8, r8)
 8003218:	e000e010 	.word	0xe000e010

0800321c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
 8003226:	210f      	movs	r1, #15
 8003228:	187b      	adds	r3, r7, r1
 800322a:	1c02      	adds	r2, r0, #0
 800322c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	187b      	adds	r3, r7, r1
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	b25b      	sxtb	r3, r3
 8003236:	0011      	movs	r1, r2
 8003238:	0018      	movs	r0, r3
 800323a:	f7ff ff5d 	bl	80030f8 <__NVIC_SetPriority>
}
 800323e:	46c0      	nop			@ (mov r8, r8)
 8003240:	46bd      	mov	sp, r7
 8003242:	b004      	add	sp, #16
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	0002      	movs	r2, r0
 800324e:	1dfb      	adds	r3, r7, #7
 8003250:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003252:	1dfb      	adds	r3, r7, #7
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	b25b      	sxtb	r3, r3
 8003258:	0018      	movs	r0, r3
 800325a:	f7ff ff33 	bl	80030c4 <__NVIC_EnableIRQ>
}
 800325e:	46c0      	nop			@ (mov r8, r8)
 8003260:	46bd      	mov	sp, r7
 8003262:	b002      	add	sp, #8
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b082      	sub	sp, #8
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	0018      	movs	r0, r3
 8003272:	f7ff ffaf 	bl	80031d4 <SysTick_Config>
 8003276:	0003      	movs	r3, r0
}
 8003278:	0018      	movs	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	b002      	add	sp, #8
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e061      	b.n	8003356 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a32      	ldr	r2, [pc, #200]	@ (8003360 <HAL_DMA_Init+0xe0>)
 8003298:	4694      	mov	ip, r2
 800329a:	4463      	add	r3, ip
 800329c:	2114      	movs	r1, #20
 800329e:	0018      	movs	r0, r3
 80032a0:	f7fc ff44 	bl	800012c <__udivsi3>
 80032a4:	0003      	movs	r3, r0
 80032a6:	009a      	lsls	r2, r3, #2
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003364 <HAL_DMA_Init+0xe4>)
 80032b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2225      	movs	r2, #37	@ 0x25
 80032b6:	2102      	movs	r1, #2
 80032b8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4a28      	ldr	r2, [pc, #160]	@ (8003368 <HAL_DMA_Init+0xe8>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80032d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	2380      	movs	r3, #128	@ 0x80
 8003306:	01db      	lsls	r3, r3, #7
 8003308:	429a      	cmp	r2, r3
 800330a:	d018      	beq.n	800333e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800330c:	4b17      	ldr	r3, [pc, #92]	@ (800336c <HAL_DMA_Init+0xec>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003314:	211c      	movs	r1, #28
 8003316:	400b      	ands	r3, r1
 8003318:	210f      	movs	r1, #15
 800331a:	4099      	lsls	r1, r3
 800331c:	000b      	movs	r3, r1
 800331e:	43d9      	mvns	r1, r3
 8003320:	4b12      	ldr	r3, [pc, #72]	@ (800336c <HAL_DMA_Init+0xec>)
 8003322:	400a      	ands	r2, r1
 8003324:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003326:	4b11      	ldr	r3, [pc, #68]	@ (800336c <HAL_DMA_Init+0xec>)
 8003328:	6819      	ldr	r1, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003332:	201c      	movs	r0, #28
 8003334:	4003      	ands	r3, r0
 8003336:	409a      	lsls	r2, r3
 8003338:	4b0c      	ldr	r3, [pc, #48]	@ (800336c <HAL_DMA_Init+0xec>)
 800333a:	430a      	orrs	r2, r1
 800333c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2225      	movs	r2, #37	@ 0x25
 8003348:	2101      	movs	r1, #1
 800334a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2224      	movs	r2, #36	@ 0x24
 8003350:	2100      	movs	r1, #0
 8003352:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	0018      	movs	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	b004      	add	sp, #16
 800335c:	bd80      	pop	{r7, pc}
 800335e:	46c0      	nop			@ (mov r8, r8)
 8003360:	bffdfff8 	.word	0xbffdfff8
 8003364:	40020000 	.word	0x40020000
 8003368:	ffff800f 	.word	0xffff800f
 800336c:	400200a8 	.word	0x400200a8

08003370 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800337e:	2317      	movs	r3, #23
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2224      	movs	r2, #36	@ 0x24
 800338a:	5c9b      	ldrb	r3, [r3, r2]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_DMA_Start_IT+0x24>
 8003390:	2302      	movs	r3, #2
 8003392:	e04f      	b.n	8003434 <HAL_DMA_Start_IT+0xc4>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2224      	movs	r2, #36	@ 0x24
 8003398:	2101      	movs	r1, #1
 800339a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2225      	movs	r2, #37	@ 0x25
 80033a0:	5c9b      	ldrb	r3, [r3, r2]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d13a      	bne.n	800341e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2225      	movs	r2, #37	@ 0x25
 80033ac:	2102      	movs	r1, #2
 80033ae:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2101      	movs	r1, #1
 80033c2:	438a      	bics	r2, r1
 80033c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	68b9      	ldr	r1, [r7, #8]
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f835 	bl	800343c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	210e      	movs	r1, #14
 80033e6:	430a      	orrs	r2, r1
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	e00f      	b.n	800340c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2104      	movs	r1, #4
 80033f8:	438a      	bics	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	210a      	movs	r1, #10
 8003408:	430a      	orrs	r2, r1
 800340a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2101      	movs	r1, #1
 8003418:	430a      	orrs	r2, r1
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	e007      	b.n	800342e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2224      	movs	r2, #36	@ 0x24
 8003422:	2100      	movs	r1, #0
 8003424:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003426:	2317      	movs	r3, #23
 8003428:	18fb      	adds	r3, r7, r3
 800342a:	2202      	movs	r2, #2
 800342c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800342e:	2317      	movs	r3, #23
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	781b      	ldrb	r3, [r3, #0]
}
 8003434:	0018      	movs	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	b006      	add	sp, #24
 800343a:	bd80      	pop	{r7, pc}

0800343c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344e:	221c      	movs	r2, #28
 8003450:	401a      	ands	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	2101      	movs	r1, #1
 8003458:	4091      	lsls	r1, r2
 800345a:	000a      	movs	r2, r1
 800345c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b10      	cmp	r3, #16
 800346c:	d108      	bne.n	8003480 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800347e:	e007      	b.n	8003490 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	60da      	str	r2, [r3, #12]
}
 8003490:	46c0      	nop			@ (mov r8, r8)
 8003492:	46bd      	mov	sp, r7
 8003494:	b004      	add	sp, #16
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80034ae:	e155      	b.n	800375c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2101      	movs	r1, #1
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4091      	lsls	r1, r2
 80034ba:	000a      	movs	r2, r1
 80034bc:	4013      	ands	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d100      	bne.n	80034c8 <HAL_GPIO_Init+0x30>
 80034c6:	e146      	b.n	8003756 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2203      	movs	r2, #3
 80034ce:	4013      	ands	r3, r2
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d005      	beq.n	80034e0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2203      	movs	r2, #3
 80034da:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d130      	bne.n	8003542 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	2203      	movs	r2, #3
 80034ec:	409a      	lsls	r2, r3
 80034ee:	0013      	movs	r3, r2
 80034f0:	43da      	mvns	r2, r3
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4013      	ands	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	409a      	lsls	r2, r3
 8003502:	0013      	movs	r3, r2
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003516:	2201      	movs	r2, #1
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	409a      	lsls	r2, r3
 800351c:	0013      	movs	r3, r2
 800351e:	43da      	mvns	r2, r3
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	091b      	lsrs	r3, r3, #4
 800352c:	2201      	movs	r2, #1
 800352e:	401a      	ands	r2, r3
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	409a      	lsls	r2, r3
 8003534:	0013      	movs	r3, r2
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2203      	movs	r2, #3
 8003548:	4013      	ands	r3, r2
 800354a:	2b03      	cmp	r3, #3
 800354c:	d017      	beq.n	800357e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	2203      	movs	r2, #3
 800355a:	409a      	lsls	r2, r3
 800355c:	0013      	movs	r3, r2
 800355e:	43da      	mvns	r2, r3
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4013      	ands	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	409a      	lsls	r2, r3
 8003570:	0013      	movs	r3, r2
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2203      	movs	r2, #3
 8003584:	4013      	ands	r3, r2
 8003586:	2b02      	cmp	r3, #2
 8003588:	d123      	bne.n	80035d2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	08da      	lsrs	r2, r3, #3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3208      	adds	r2, #8
 8003592:	0092      	lsls	r2, r2, #2
 8003594:	58d3      	ldr	r3, [r2, r3]
 8003596:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2207      	movs	r2, #7
 800359c:	4013      	ands	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	220f      	movs	r2, #15
 80035a2:	409a      	lsls	r2, r3
 80035a4:	0013      	movs	r3, r2
 80035a6:	43da      	mvns	r2, r3
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4013      	ands	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	691a      	ldr	r2, [r3, #16]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2107      	movs	r1, #7
 80035b6:	400b      	ands	r3, r1
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	409a      	lsls	r2, r3
 80035bc:	0013      	movs	r3, r2
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	08da      	lsrs	r2, r3, #3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3208      	adds	r2, #8
 80035cc:	0092      	lsls	r2, r2, #2
 80035ce:	6939      	ldr	r1, [r7, #16]
 80035d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	2203      	movs	r2, #3
 80035de:	409a      	lsls	r2, r3
 80035e0:	0013      	movs	r3, r2
 80035e2:	43da      	mvns	r2, r3
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4013      	ands	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2203      	movs	r2, #3
 80035f0:	401a      	ands	r2, r3
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	409a      	lsls	r2, r3
 80035f8:	0013      	movs	r3, r2
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	23c0      	movs	r3, #192	@ 0xc0
 800360c:	029b      	lsls	r3, r3, #10
 800360e:	4013      	ands	r3, r2
 8003610:	d100      	bne.n	8003614 <HAL_GPIO_Init+0x17c>
 8003612:	e0a0      	b.n	8003756 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003614:	4b57      	ldr	r3, [pc, #348]	@ (8003774 <HAL_GPIO_Init+0x2dc>)
 8003616:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003618:	4b56      	ldr	r3, [pc, #344]	@ (8003774 <HAL_GPIO_Init+0x2dc>)
 800361a:	2101      	movs	r1, #1
 800361c:	430a      	orrs	r2, r1
 800361e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003620:	4a55      	ldr	r2, [pc, #340]	@ (8003778 <HAL_GPIO_Init+0x2e0>)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	089b      	lsrs	r3, r3, #2
 8003626:	3302      	adds	r3, #2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	589b      	ldr	r3, [r3, r2]
 800362c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2203      	movs	r2, #3
 8003632:	4013      	ands	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	220f      	movs	r2, #15
 8003638:	409a      	lsls	r2, r3
 800363a:	0013      	movs	r3, r2
 800363c:	43da      	mvns	r2, r3
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4013      	ands	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	23a0      	movs	r3, #160	@ 0xa0
 8003648:	05db      	lsls	r3, r3, #23
 800364a:	429a      	cmp	r2, r3
 800364c:	d01f      	beq.n	800368e <HAL_GPIO_Init+0x1f6>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a4a      	ldr	r2, [pc, #296]	@ (800377c <HAL_GPIO_Init+0x2e4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d019      	beq.n	800368a <HAL_GPIO_Init+0x1f2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a49      	ldr	r2, [pc, #292]	@ (8003780 <HAL_GPIO_Init+0x2e8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d013      	beq.n	8003686 <HAL_GPIO_Init+0x1ee>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a48      	ldr	r2, [pc, #288]	@ (8003784 <HAL_GPIO_Init+0x2ec>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00d      	beq.n	8003682 <HAL_GPIO_Init+0x1ea>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a47      	ldr	r2, [pc, #284]	@ (8003788 <HAL_GPIO_Init+0x2f0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d007      	beq.n	800367e <HAL_GPIO_Init+0x1e6>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a46      	ldr	r2, [pc, #280]	@ (800378c <HAL_GPIO_Init+0x2f4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d101      	bne.n	800367a <HAL_GPIO_Init+0x1e2>
 8003676:	2305      	movs	r3, #5
 8003678:	e00a      	b.n	8003690 <HAL_GPIO_Init+0x1f8>
 800367a:	2306      	movs	r3, #6
 800367c:	e008      	b.n	8003690 <HAL_GPIO_Init+0x1f8>
 800367e:	2304      	movs	r3, #4
 8003680:	e006      	b.n	8003690 <HAL_GPIO_Init+0x1f8>
 8003682:	2303      	movs	r3, #3
 8003684:	e004      	b.n	8003690 <HAL_GPIO_Init+0x1f8>
 8003686:	2302      	movs	r3, #2
 8003688:	e002      	b.n	8003690 <HAL_GPIO_Init+0x1f8>
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <HAL_GPIO_Init+0x1f8>
 800368e:	2300      	movs	r3, #0
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	2103      	movs	r1, #3
 8003694:	400a      	ands	r2, r1
 8003696:	0092      	lsls	r2, r2, #2
 8003698:	4093      	lsls	r3, r2
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036a0:	4935      	ldr	r1, [pc, #212]	@ (8003778 <HAL_GPIO_Init+0x2e0>)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	089b      	lsrs	r3, r3, #2
 80036a6:	3302      	adds	r3, #2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ae:	4b38      	ldr	r3, [pc, #224]	@ (8003790 <HAL_GPIO_Init+0x2f8>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	43da      	mvns	r2, r3
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4013      	ands	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	2380      	movs	r3, #128	@ 0x80
 80036c4:	035b      	lsls	r3, r3, #13
 80036c6:	4013      	ands	r3, r2
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80036d2:	4b2f      	ldr	r3, [pc, #188]	@ (8003790 <HAL_GPIO_Init+0x2f8>)
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80036d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003790 <HAL_GPIO_Init+0x2f8>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	43da      	mvns	r2, r3
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	2380      	movs	r3, #128	@ 0x80
 80036ee:	039b      	lsls	r3, r3, #14
 80036f0:	4013      	ands	r3, r2
 80036f2:	d003      	beq.n	80036fc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80036fc:	4b24      	ldr	r3, [pc, #144]	@ (8003790 <HAL_GPIO_Init+0x2f8>)
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003702:	4b23      	ldr	r3, [pc, #140]	@ (8003790 <HAL_GPIO_Init+0x2f8>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	43da      	mvns	r2, r3
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	4013      	ands	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	2380      	movs	r3, #128	@ 0x80
 8003718:	029b      	lsls	r3, r3, #10
 800371a:	4013      	ands	r3, r2
 800371c:	d003      	beq.n	8003726 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003726:	4b1a      	ldr	r3, [pc, #104]	@ (8003790 <HAL_GPIO_Init+0x2f8>)
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800372c:	4b18      	ldr	r3, [pc, #96]	@ (8003790 <HAL_GPIO_Init+0x2f8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	43da      	mvns	r2, r3
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	4013      	ands	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	2380      	movs	r3, #128	@ 0x80
 8003742:	025b      	lsls	r3, r3, #9
 8003744:	4013      	ands	r3, r2
 8003746:	d003      	beq.n	8003750 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003750:	4b0f      	ldr	r3, [pc, #60]	@ (8003790 <HAL_GPIO_Init+0x2f8>)
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	3301      	adds	r3, #1
 800375a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	40da      	lsrs	r2, r3
 8003764:	1e13      	subs	r3, r2, #0
 8003766:	d000      	beq.n	800376a <HAL_GPIO_Init+0x2d2>
 8003768:	e6a2      	b.n	80034b0 <HAL_GPIO_Init+0x18>
  }
}
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	46c0      	nop			@ (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b006      	add	sp, #24
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40021000 	.word	0x40021000
 8003778:	40010000 	.word	0x40010000
 800377c:	50000400 	.word	0x50000400
 8003780:	50000800 	.word	0x50000800
 8003784:	50000c00 	.word	0x50000c00
 8003788:	50001000 	.word	0x50001000
 800378c:	50001c00 	.word	0x50001c00
 8003790:	40010400 	.word	0x40010400

08003794 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	0008      	movs	r0, r1
 800379e:	0011      	movs	r1, r2
 80037a0:	1cbb      	adds	r3, r7, #2
 80037a2:	1c02      	adds	r2, r0, #0
 80037a4:	801a      	strh	r2, [r3, #0]
 80037a6:	1c7b      	adds	r3, r7, #1
 80037a8:	1c0a      	adds	r2, r1, #0
 80037aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037ac:	1c7b      	adds	r3, r7, #1
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d004      	beq.n	80037be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037b4:	1cbb      	adds	r3, r7, #2
 80037b6:	881a      	ldrh	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80037bc:	e003      	b.n	80037c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80037be:	1cbb      	adds	r3, r7, #2
 80037c0:	881a      	ldrh	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	0002      	movs	r2, r0
 80037d8:	1dbb      	adds	r3, r7, #6
 80037da:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037dc:	4b09      	ldr	r3, [pc, #36]	@ (8003804 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	1dba      	adds	r2, r7, #6
 80037e2:	8812      	ldrh	r2, [r2, #0]
 80037e4:	4013      	ands	r3, r2
 80037e6:	d008      	beq.n	80037fa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037e8:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80037ea:	1dba      	adds	r2, r7, #6
 80037ec:	8812      	ldrh	r2, [r2, #0]
 80037ee:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037f0:	1dbb      	adds	r3, r7, #6
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	0018      	movs	r0, r3
 80037f6:	f7fe fb5d 	bl	8001eb4 <HAL_GPIO_EXTI_Callback>
  }
}
 80037fa:	46c0      	nop			@ (mov r8, r8)
 80037fc:	46bd      	mov	sp, r7
 80037fe:	b002      	add	sp, #8
 8003800:	bd80      	pop	{r7, pc}
 8003802:	46c0      	nop			@ (mov r8, r8)
 8003804:	40010400 	.word	0x40010400

08003808 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e082      	b.n	8003920 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2241      	movs	r2, #65	@ 0x41
 800381e:	5c9b      	ldrb	r3, [r3, r2]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d107      	bne.n	8003836 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2240      	movs	r2, #64	@ 0x40
 800382a:	2100      	movs	r1, #0
 800382c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	0018      	movs	r0, r3
 8003832:	f7fe fd93 	bl	800235c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2241      	movs	r2, #65	@ 0x41
 800383a:	2124      	movs	r1, #36	@ 0x24
 800383c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2101      	movs	r1, #1
 800384a:	438a      	bics	r2, r1
 800384c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4934      	ldr	r1, [pc, #208]	@ (8003928 <HAL_I2C_Init+0x120>)
 8003858:	400a      	ands	r2, r1
 800385a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4931      	ldr	r1, [pc, #196]	@ (800392c <HAL_I2C_Init+0x124>)
 8003868:	400a      	ands	r2, r1
 800386a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d108      	bne.n	8003886 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2180      	movs	r1, #128	@ 0x80
 800387e:	0209      	lsls	r1, r1, #8
 8003880:	430a      	orrs	r2, r1
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	e007      	b.n	8003896 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2184      	movs	r1, #132	@ 0x84
 8003890:	0209      	lsls	r1, r1, #8
 8003892:	430a      	orrs	r2, r1
 8003894:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d104      	bne.n	80038a8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2280      	movs	r2, #128	@ 0x80
 80038a4:	0112      	lsls	r2, r2, #4
 80038a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	491f      	ldr	r1, [pc, #124]	@ (8003930 <HAL_I2C_Init+0x128>)
 80038b4:	430a      	orrs	r2, r1
 80038b6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	491a      	ldr	r1, [pc, #104]	@ (800392c <HAL_I2C_Init+0x124>)
 80038c4:	400a      	ands	r2, r1
 80038c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69d9      	ldr	r1, [r3, #28]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1a      	ldr	r2, [r3, #32]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2101      	movs	r1, #1
 80038fe:	430a      	orrs	r2, r1
 8003900:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2241      	movs	r2, #65	@ 0x41
 800390c:	2120      	movs	r1, #32
 800390e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2242      	movs	r2, #66	@ 0x42
 800391a:	2100      	movs	r1, #0
 800391c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	0018      	movs	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	b002      	add	sp, #8
 8003926:	bd80      	pop	{r7, pc}
 8003928:	f0ffffff 	.word	0xf0ffffff
 800392c:	ffff7fff 	.word	0xffff7fff
 8003930:	02008000 	.word	0x02008000

08003934 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003934:	b590      	push	{r4, r7, lr}
 8003936:	b089      	sub	sp, #36	@ 0x24
 8003938:	af02      	add	r7, sp, #8
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	0008      	movs	r0, r1
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	0019      	movs	r1, r3
 8003942:	230a      	movs	r3, #10
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	1c02      	adds	r2, r0, #0
 8003948:	801a      	strh	r2, [r3, #0]
 800394a:	2308      	movs	r3, #8
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	1c0a      	adds	r2, r1, #0
 8003950:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2241      	movs	r2, #65	@ 0x41
 8003956:	5c9b      	ldrb	r3, [r3, r2]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b20      	cmp	r3, #32
 800395c:	d000      	beq.n	8003960 <HAL_I2C_Master_Transmit+0x2c>
 800395e:	e0e7      	b.n	8003b30 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2240      	movs	r2, #64	@ 0x40
 8003964:	5c9b      	ldrb	r3, [r3, r2]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_I2C_Master_Transmit+0x3a>
 800396a:	2302      	movs	r3, #2
 800396c:	e0e1      	b.n	8003b32 <HAL_I2C_Master_Transmit+0x1fe>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2240      	movs	r2, #64	@ 0x40
 8003972:	2101      	movs	r1, #1
 8003974:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003976:	f7fe ff1f 	bl	80027b8 <HAL_GetTick>
 800397a:	0003      	movs	r3, r0
 800397c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800397e:	2380      	movs	r3, #128	@ 0x80
 8003980:	0219      	lsls	r1, r3, #8
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	2319      	movs	r3, #25
 800398a:	2201      	movs	r2, #1
 800398c:	f000 f8fc 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 8003990:	1e03      	subs	r3, r0, #0
 8003992:	d001      	beq.n	8003998 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0cc      	b.n	8003b32 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2241      	movs	r2, #65	@ 0x41
 800399c:	2121      	movs	r1, #33	@ 0x21
 800399e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2242      	movs	r2, #66	@ 0x42
 80039a4:	2110      	movs	r1, #16
 80039a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2208      	movs	r2, #8
 80039b8:	18ba      	adds	r2, r7, r2
 80039ba:	8812      	ldrh	r2, [r2, #0]
 80039bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2bff      	cmp	r3, #255	@ 0xff
 80039cc:	d911      	bls.n	80039f2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	22ff      	movs	r2, #255	@ 0xff
 80039d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	2380      	movs	r3, #128	@ 0x80
 80039dc:	045c      	lsls	r4, r3, #17
 80039de:	230a      	movs	r3, #10
 80039e0:	18fb      	adds	r3, r7, r3
 80039e2:	8819      	ldrh	r1, [r3, #0]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	4b55      	ldr	r3, [pc, #340]	@ (8003b3c <HAL_I2C_Master_Transmit+0x208>)
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	0023      	movs	r3, r4
 80039ec:	f000 fa9c 	bl	8003f28 <I2C_TransferConfig>
 80039f0:	e075      	b.n	8003ade <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	2380      	movs	r3, #128	@ 0x80
 8003a04:	049c      	lsls	r4, r3, #18
 8003a06:	230a      	movs	r3, #10
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	8819      	ldrh	r1, [r3, #0]
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	4b4b      	ldr	r3, [pc, #300]	@ (8003b3c <HAL_I2C_Master_Transmit+0x208>)
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	0023      	movs	r3, r4
 8003a14:	f000 fa88 	bl	8003f28 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003a18:	e061      	b.n	8003ade <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	0018      	movs	r0, r3
 8003a22:	f000 f8ff 	bl	8003c24 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a26:	1e03      	subs	r3, r0, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e081      	b.n	8003b32 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a32:	781a      	ldrb	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d03a      	beq.n	8003ade <HAL_I2C_Master_Transmit+0x1aa>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d136      	bne.n	8003ade <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	0013      	movs	r3, r2
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	2180      	movs	r1, #128	@ 0x80
 8003a7e:	f000 f883 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 8003a82:	1e03      	subs	r3, r0, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e053      	b.n	8003b32 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2bff      	cmp	r3, #255	@ 0xff
 8003a92:	d911      	bls.n	8003ab8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	22ff      	movs	r2, #255	@ 0xff
 8003a98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	2380      	movs	r3, #128	@ 0x80
 8003aa2:	045c      	lsls	r4, r3, #17
 8003aa4:	230a      	movs	r3, #10
 8003aa6:	18fb      	adds	r3, r7, r3
 8003aa8:	8819      	ldrh	r1, [r3, #0]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	2300      	movs	r3, #0
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	0023      	movs	r3, r4
 8003ab2:	f000 fa39 	bl	8003f28 <I2C_TransferConfig>
 8003ab6:	e012      	b.n	8003ade <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	2380      	movs	r3, #128	@ 0x80
 8003aca:	049c      	lsls	r4, r3, #18
 8003acc:	230a      	movs	r3, #10
 8003ace:	18fb      	adds	r3, r7, r3
 8003ad0:	8819      	ldrh	r1, [r3, #0]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	0023      	movs	r3, r4
 8003ada:	f000 fa25 	bl	8003f28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d198      	bne.n	8003a1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	0018      	movs	r0, r3
 8003af0:	f000 f8de 	bl	8003cb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003af4:	1e03      	subs	r3, r0, #0
 8003af6:	d001      	beq.n	8003afc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e01a      	b.n	8003b32 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2220      	movs	r2, #32
 8003b02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	490c      	ldr	r1, [pc, #48]	@ (8003b40 <HAL_I2C_Master_Transmit+0x20c>)
 8003b10:	400a      	ands	r2, r1
 8003b12:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2241      	movs	r2, #65	@ 0x41
 8003b18:	2120      	movs	r1, #32
 8003b1a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2242      	movs	r2, #66	@ 0x42
 8003b20:	2100      	movs	r1, #0
 8003b22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2240      	movs	r2, #64	@ 0x40
 8003b28:	2100      	movs	r1, #0
 8003b2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	e000      	b.n	8003b32 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
  }
}
 8003b32:	0018      	movs	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	b007      	add	sp, #28
 8003b38:	bd90      	pop	{r4, r7, pc}
 8003b3a:	46c0      	nop			@ (mov r8, r8)
 8003b3c:	80002000 	.word	0x80002000
 8003b40:	fe00e800 	.word	0xfe00e800

08003b44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	2202      	movs	r2, #2
 8003b54:	4013      	ands	r3, r2
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d103      	bne.n	8003b62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d007      	beq.n	8003b80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	619a      	str	r2, [r3, #24]
  }
}
 8003b80:	46c0      	nop			@ (mov r8, r8)
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b002      	add	sp, #8
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	1dfb      	adds	r3, r7, #7
 8003b96:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b98:	e030      	b.n	8003bfc <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	d02d      	beq.n	8003bfc <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba0:	f7fe fe0a 	bl	80027b8 <HAL_GetTick>
 8003ba4:	0002      	movs	r2, r0
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d302      	bcc.n	8003bb6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d122      	bne.n	8003bfc <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	425a      	negs	r2, r3
 8003bc6:	4153      	adcs	r3, r2
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	001a      	movs	r2, r3
 8003bcc:	1dfb      	adds	r3, r7, #7
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d113      	bne.n	8003bfc <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd8:	2220      	movs	r2, #32
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2241      	movs	r2, #65	@ 0x41
 8003be4:	2120      	movs	r1, #32
 8003be6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2242      	movs	r2, #66	@ 0x42
 8003bec:	2100      	movs	r1, #0
 8003bee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2240      	movs	r2, #64	@ 0x40
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e00f      	b.n	8003c1c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	4013      	ands	r3, r2
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	425a      	negs	r2, r3
 8003c0c:	4153      	adcs	r3, r2
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	001a      	movs	r2, r3
 8003c12:	1dfb      	adds	r3, r7, #7
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d0bf      	beq.n	8003b9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b004      	add	sp, #16
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c30:	e032      	b.n	8003c98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f000 f87d 	bl	8003d38 <I2C_IsErrorOccurred>
 8003c3e:	1e03      	subs	r3, r0, #0
 8003c40:	d001      	beq.n	8003c46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e030      	b.n	8003ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	d025      	beq.n	8003c98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4c:	f7fe fdb4 	bl	80027b8 <HAL_GetTick>
 8003c50:	0002      	movs	r2, r0
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d302      	bcc.n	8003c62 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d11a      	bne.n	8003c98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d013      	beq.n	8003c98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c74:	2220      	movs	r2, #32
 8003c76:	431a      	orrs	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2241      	movs	r2, #65	@ 0x41
 8003c80:	2120      	movs	r1, #32
 8003c82:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2242      	movs	r2, #66	@ 0x42
 8003c88:	2100      	movs	r1, #0
 8003c8a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2240      	movs	r2, #64	@ 0x40
 8003c90:	2100      	movs	r1, #0
 8003c92:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e007      	b.n	8003ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d1c5      	bne.n	8003c32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	0018      	movs	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b004      	add	sp, #16
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cbc:	e02f      	b.n	8003d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f000 f837 	bl	8003d38 <I2C_IsErrorOccurred>
 8003cca:	1e03      	subs	r3, r0, #0
 8003ccc:	d001      	beq.n	8003cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e02d      	b.n	8003d2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd2:	f7fe fd71 	bl	80027b8 <HAL_GetTick>
 8003cd6:	0002      	movs	r2, r0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d302      	bcc.n	8003ce8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d11a      	bne.n	8003d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	d013      	beq.n	8003d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2241      	movs	r2, #65	@ 0x41
 8003d06:	2120      	movs	r1, #32
 8003d08:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2242      	movs	r2, #66	@ 0x42
 8003d0e:	2100      	movs	r1, #0
 8003d10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2240      	movs	r2, #64	@ 0x40
 8003d16:	2100      	movs	r1, #0
 8003d18:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e007      	b.n	8003d2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	2220      	movs	r2, #32
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d1c8      	bne.n	8003cbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	0018      	movs	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b004      	add	sp, #16
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	@ 0x28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d44:	2327      	movs	r3, #39	@ 0x27
 8003d46:	18fb      	adds	r3, r7, r3
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	2210      	movs	r2, #16
 8003d60:	4013      	ands	r3, r2
 8003d62:	d100      	bne.n	8003d66 <I2C_IsErrorOccurred+0x2e>
 8003d64:	e079      	b.n	8003e5a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2210      	movs	r2, #16
 8003d6c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d6e:	e057      	b.n	8003e20 <I2C_IsErrorOccurred+0xe8>
 8003d70:	2227      	movs	r2, #39	@ 0x27
 8003d72:	18bb      	adds	r3, r7, r2
 8003d74:	18ba      	adds	r2, r7, r2
 8003d76:	7812      	ldrb	r2, [r2, #0]
 8003d78:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	d04f      	beq.n	8003e20 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d80:	f7fe fd1a 	bl	80027b8 <HAL_GetTick>
 8003d84:	0002      	movs	r2, r0
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d302      	bcc.n	8003d96 <I2C_IsErrorOccurred+0x5e>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d144      	bne.n	8003e20 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	2380      	movs	r3, #128	@ 0x80
 8003d9e:	01db      	lsls	r3, r3, #7
 8003da0:	4013      	ands	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003da4:	2013      	movs	r0, #19
 8003da6:	183b      	adds	r3, r7, r0
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	2142      	movs	r1, #66	@ 0x42
 8003dac:	5c52      	ldrb	r2, [r2, r1]
 8003dae:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	2380      	movs	r3, #128	@ 0x80
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	401a      	ands	r2, r3
 8003dbc:	2380      	movs	r3, #128	@ 0x80
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d126      	bne.n	8003e12 <I2C_IsErrorOccurred+0xda>
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	2380      	movs	r3, #128	@ 0x80
 8003dc8:	01db      	lsls	r3, r3, #7
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d021      	beq.n	8003e12 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003dce:	183b      	adds	r3, r7, r0
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d01d      	beq.n	8003e12 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2180      	movs	r1, #128	@ 0x80
 8003de2:	01c9      	lsls	r1, r1, #7
 8003de4:	430a      	orrs	r2, r1
 8003de6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003de8:	f7fe fce6 	bl	80027b8 <HAL_GetTick>
 8003dec:	0003      	movs	r3, r0
 8003dee:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003df0:	e00f      	b.n	8003e12 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003df2:	f7fe fce1 	bl	80027b8 <HAL_GetTick>
 8003df6:	0002      	movs	r2, r0
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b19      	cmp	r3, #25
 8003dfe:	d908      	bls.n	8003e12 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	2220      	movs	r2, #32
 8003e04:	4313      	orrs	r3, r2
 8003e06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e08:	2327      	movs	r3, #39	@ 0x27
 8003e0a:	18fb      	adds	r3, r7, r3
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	701a      	strb	r2, [r3, #0]

              break;
 8003e10:	e006      	b.n	8003e20 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d1e8      	bne.n	8003df2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2220      	movs	r2, #32
 8003e28:	4013      	ands	r3, r2
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d004      	beq.n	8003e38 <I2C_IsErrorOccurred+0x100>
 8003e2e:	2327      	movs	r3, #39	@ 0x27
 8003e30:	18fb      	adds	r3, r7, r3
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d09b      	beq.n	8003d70 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e38:	2327      	movs	r3, #39	@ 0x27
 8003e3a:	18fb      	adds	r3, r7, r3
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d103      	bne.n	8003e4a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2220      	movs	r2, #32
 8003e48:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	2204      	movs	r2, #4
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e52:	2327      	movs	r3, #39	@ 0x27
 8003e54:	18fb      	adds	r3, r7, r3
 8003e56:	2201      	movs	r2, #1
 8003e58:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	2380      	movs	r3, #128	@ 0x80
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d00c      	beq.n	8003e86 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	4313      	orrs	r3, r2
 8003e72:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2280      	movs	r2, #128	@ 0x80
 8003e7a:	0052      	lsls	r2, r2, #1
 8003e7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e7e:	2327      	movs	r3, #39	@ 0x27
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	2201      	movs	r2, #1
 8003e84:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	2380      	movs	r3, #128	@ 0x80
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d00c      	beq.n	8003eaa <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	2208      	movs	r2, #8
 8003e94:	4313      	orrs	r3, r2
 8003e96:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2280      	movs	r2, #128	@ 0x80
 8003e9e:	00d2      	lsls	r2, r2, #3
 8003ea0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ea2:	2327      	movs	r3, #39	@ 0x27
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	2380      	movs	r3, #128	@ 0x80
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	d00c      	beq.n	8003ece <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2280      	movs	r2, #128	@ 0x80
 8003ec2:	0092      	lsls	r2, r2, #2
 8003ec4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ec6:	2327      	movs	r3, #39	@ 0x27
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	2201      	movs	r2, #1
 8003ecc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003ece:	2327      	movs	r3, #39	@ 0x27
 8003ed0:	18fb      	adds	r3, r7, r3
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01d      	beq.n	8003f14 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	0018      	movs	r0, r3
 8003edc:	f7ff fe32 	bl	8003b44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	490e      	ldr	r1, [pc, #56]	@ (8003f24 <I2C_IsErrorOccurred+0x1ec>)
 8003eec:	400a      	ands	r2, r1
 8003eee:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2241      	movs	r2, #65	@ 0x41
 8003f00:	2120      	movs	r1, #32
 8003f02:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2242      	movs	r2, #66	@ 0x42
 8003f08:	2100      	movs	r1, #0
 8003f0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2240      	movs	r2, #64	@ 0x40
 8003f10:	2100      	movs	r1, #0
 8003f12:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003f14:	2327      	movs	r3, #39	@ 0x27
 8003f16:	18fb      	adds	r3, r7, r3
 8003f18:	781b      	ldrb	r3, [r3, #0]
}
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b00a      	add	sp, #40	@ 0x28
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	46c0      	nop			@ (mov r8, r8)
 8003f24:	fe00e800 	.word	0xfe00e800

08003f28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f28:	b590      	push	{r4, r7, lr}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	0008      	movs	r0, r1
 8003f32:	0011      	movs	r1, r2
 8003f34:	607b      	str	r3, [r7, #4]
 8003f36:	240a      	movs	r4, #10
 8003f38:	193b      	adds	r3, r7, r4
 8003f3a:	1c02      	adds	r2, r0, #0
 8003f3c:	801a      	strh	r2, [r3, #0]
 8003f3e:	2009      	movs	r0, #9
 8003f40:	183b      	adds	r3, r7, r0
 8003f42:	1c0a      	adds	r2, r1, #0
 8003f44:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f46:	193b      	adds	r3, r7, r4
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	059b      	lsls	r3, r3, #22
 8003f4c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f4e:	183b      	adds	r3, r7, r0
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	0419      	lsls	r1, r3, #16
 8003f54:	23ff      	movs	r3, #255	@ 0xff
 8003f56:	041b      	lsls	r3, r3, #16
 8003f58:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f5a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f62:	4313      	orrs	r3, r2
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	085b      	lsrs	r3, r3, #1
 8003f68:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f72:	0d51      	lsrs	r1, r2, #21
 8003f74:	2280      	movs	r2, #128	@ 0x80
 8003f76:	00d2      	lsls	r2, r2, #3
 8003f78:	400a      	ands	r2, r1
 8003f7a:	4907      	ldr	r1, [pc, #28]	@ (8003f98 <I2C_TransferConfig+0x70>)
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	43d2      	mvns	r2, r2
 8003f80:	401a      	ands	r2, r3
 8003f82:	0011      	movs	r1, r2
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f8e:	46c0      	nop			@ (mov r8, r8)
 8003f90:	46bd      	mov	sp, r7
 8003f92:	b007      	add	sp, #28
 8003f94:	bd90      	pop	{r4, r7, pc}
 8003f96:	46c0      	nop			@ (mov r8, r8)
 8003f98:	03ff63ff 	.word	0x03ff63ff

08003f9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2241      	movs	r2, #65	@ 0x41
 8003faa:	5c9b      	ldrb	r3, [r3, r2]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	d138      	bne.n	8004024 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2240      	movs	r2, #64	@ 0x40
 8003fb6:	5c9b      	ldrb	r3, [r3, r2]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e032      	b.n	8004026 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2240      	movs	r2, #64	@ 0x40
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2241      	movs	r2, #65	@ 0x41
 8003fcc:	2124      	movs	r1, #36	@ 0x24
 8003fce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2101      	movs	r1, #1
 8003fdc:	438a      	bics	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4911      	ldr	r1, [pc, #68]	@ (8004030 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003fec:	400a      	ands	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6819      	ldr	r1, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2101      	movs	r1, #1
 800400c:	430a      	orrs	r2, r1
 800400e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2241      	movs	r2, #65	@ 0x41
 8004014:	2120      	movs	r1, #32
 8004016:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2240      	movs	r2, #64	@ 0x40
 800401c:	2100      	movs	r1, #0
 800401e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	e000      	b.n	8004026 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004024:	2302      	movs	r3, #2
  }
}
 8004026:	0018      	movs	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	b002      	add	sp, #8
 800402c:	bd80      	pop	{r7, pc}
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	ffffefff 	.word	0xffffefff

08004034 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2241      	movs	r2, #65	@ 0x41
 8004042:	5c9b      	ldrb	r3, [r3, r2]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b20      	cmp	r3, #32
 8004048:	d139      	bne.n	80040be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2240      	movs	r2, #64	@ 0x40
 800404e:	5c9b      	ldrb	r3, [r3, r2]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004054:	2302      	movs	r3, #2
 8004056:	e033      	b.n	80040c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2240      	movs	r2, #64	@ 0x40
 800405c:	2101      	movs	r1, #1
 800405e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2241      	movs	r2, #65	@ 0x41
 8004064:	2124      	movs	r1, #36	@ 0x24
 8004066:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2101      	movs	r1, #1
 8004074:	438a      	bics	r2, r1
 8004076:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4a11      	ldr	r2, [pc, #68]	@ (80040c8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004084:	4013      	ands	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	021b      	lsls	r3, r3, #8
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2101      	movs	r1, #1
 80040a6:	430a      	orrs	r2, r1
 80040a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2241      	movs	r2, #65	@ 0x41
 80040ae:	2120      	movs	r1, #32
 80040b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2240      	movs	r2, #64	@ 0x40
 80040b6:	2100      	movs	r1, #0
 80040b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e000      	b.n	80040c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040be:	2302      	movs	r3, #2
  }
}
 80040c0:	0018      	movs	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b004      	add	sp, #16
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	fffff0ff 	.word	0xfffff0ff

080040cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040cc:	b5b0      	push	{r4, r5, r7, lr}
 80040ce:	b08a      	sub	sp, #40	@ 0x28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d102      	bne.n	80040e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	f000 fbbf 	bl	800485e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040e0:	4bc9      	ldr	r3, [pc, #804]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	220c      	movs	r2, #12
 80040e6:	4013      	ands	r3, r2
 80040e8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040ea:	4bc7      	ldr	r3, [pc, #796]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	2380      	movs	r3, #128	@ 0x80
 80040f0:	025b      	lsls	r3, r3, #9
 80040f2:	4013      	ands	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2201      	movs	r2, #1
 80040fc:	4013      	ands	r3, r2
 80040fe:	d100      	bne.n	8004102 <HAL_RCC_OscConfig+0x36>
 8004100:	e07e      	b.n	8004200 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	2b08      	cmp	r3, #8
 8004106:	d007      	beq.n	8004118 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	2b0c      	cmp	r3, #12
 800410c:	d112      	bne.n	8004134 <HAL_RCC_OscConfig+0x68>
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	2380      	movs	r3, #128	@ 0x80
 8004112:	025b      	lsls	r3, r3, #9
 8004114:	429a      	cmp	r2, r3
 8004116:	d10d      	bne.n	8004134 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004118:	4bbb      	ldr	r3, [pc, #748]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	2380      	movs	r3, #128	@ 0x80
 800411e:	029b      	lsls	r3, r3, #10
 8004120:	4013      	ands	r3, r2
 8004122:	d100      	bne.n	8004126 <HAL_RCC_OscConfig+0x5a>
 8004124:	e06b      	b.n	80041fe <HAL_RCC_OscConfig+0x132>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d167      	bne.n	80041fe <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	f000 fb95 	bl	800485e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	2380      	movs	r3, #128	@ 0x80
 800413a:	025b      	lsls	r3, r3, #9
 800413c:	429a      	cmp	r2, r3
 800413e:	d107      	bne.n	8004150 <HAL_RCC_OscConfig+0x84>
 8004140:	4bb1      	ldr	r3, [pc, #708]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4bb0      	ldr	r3, [pc, #704]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 8004146:	2180      	movs	r1, #128	@ 0x80
 8004148:	0249      	lsls	r1, r1, #9
 800414a:	430a      	orrs	r2, r1
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	e027      	b.n	80041a0 <HAL_RCC_OscConfig+0xd4>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	23a0      	movs	r3, #160	@ 0xa0
 8004156:	02db      	lsls	r3, r3, #11
 8004158:	429a      	cmp	r2, r3
 800415a:	d10e      	bne.n	800417a <HAL_RCC_OscConfig+0xae>
 800415c:	4baa      	ldr	r3, [pc, #680]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	4ba9      	ldr	r3, [pc, #676]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 8004162:	2180      	movs	r1, #128	@ 0x80
 8004164:	02c9      	lsls	r1, r1, #11
 8004166:	430a      	orrs	r2, r1
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	4ba7      	ldr	r3, [pc, #668]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	4ba6      	ldr	r3, [pc, #664]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 8004170:	2180      	movs	r1, #128	@ 0x80
 8004172:	0249      	lsls	r1, r1, #9
 8004174:	430a      	orrs	r2, r1
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	e012      	b.n	80041a0 <HAL_RCC_OscConfig+0xd4>
 800417a:	4ba3      	ldr	r3, [pc, #652]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	4ba2      	ldr	r3, [pc, #648]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 8004180:	49a2      	ldr	r1, [pc, #648]	@ (800440c <HAL_RCC_OscConfig+0x340>)
 8004182:	400a      	ands	r2, r1
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	4ba0      	ldr	r3, [pc, #640]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	2380      	movs	r3, #128	@ 0x80
 800418c:	025b      	lsls	r3, r3, #9
 800418e:	4013      	ands	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4b9c      	ldr	r3, [pc, #624]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4b9b      	ldr	r3, [pc, #620]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 800419a:	499d      	ldr	r1, [pc, #628]	@ (8004410 <HAL_RCC_OscConfig+0x344>)
 800419c:	400a      	ands	r2, r1
 800419e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d015      	beq.n	80041d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a8:	f7fe fb06 	bl	80027b8 <HAL_GetTick>
 80041ac:	0003      	movs	r3, r0
 80041ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041b0:	e009      	b.n	80041c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b2:	f7fe fb01 	bl	80027b8 <HAL_GetTick>
 80041b6:	0002      	movs	r2, r0
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b64      	cmp	r3, #100	@ 0x64
 80041be:	d902      	bls.n	80041c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	f000 fb4c 	bl	800485e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041c6:	4b90      	ldr	r3, [pc, #576]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	2380      	movs	r3, #128	@ 0x80
 80041cc:	029b      	lsls	r3, r3, #10
 80041ce:	4013      	ands	r3, r2
 80041d0:	d0ef      	beq.n	80041b2 <HAL_RCC_OscConfig+0xe6>
 80041d2:	e015      	b.n	8004200 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fe faf0 	bl	80027b8 <HAL_GetTick>
 80041d8:	0003      	movs	r3, r0
 80041da:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041de:	f7fe faeb 	bl	80027b8 <HAL_GetTick>
 80041e2:	0002      	movs	r2, r0
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b64      	cmp	r3, #100	@ 0x64
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e336      	b.n	800485e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041f0:	4b85      	ldr	r3, [pc, #532]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	2380      	movs	r3, #128	@ 0x80
 80041f6:	029b      	lsls	r3, r3, #10
 80041f8:	4013      	ands	r3, r2
 80041fa:	d1f0      	bne.n	80041de <HAL_RCC_OscConfig+0x112>
 80041fc:	e000      	b.n	8004200 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041fe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2202      	movs	r2, #2
 8004206:	4013      	ands	r3, r2
 8004208:	d100      	bne.n	800420c <HAL_RCC_OscConfig+0x140>
 800420a:	e099      	b.n	8004340 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004214:	2220      	movs	r2, #32
 8004216:	4013      	ands	r3, r2
 8004218:	d009      	beq.n	800422e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800421a:	4b7b      	ldr	r3, [pc, #492]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	4b7a      	ldr	r3, [pc, #488]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 8004220:	2120      	movs	r1, #32
 8004222:	430a      	orrs	r2, r1
 8004224:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	2220      	movs	r2, #32
 800422a:	4393      	bics	r3, r2
 800422c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	2b04      	cmp	r3, #4
 8004232:	d005      	beq.n	8004240 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	2b0c      	cmp	r3, #12
 8004238:	d13e      	bne.n	80042b8 <HAL_RCC_OscConfig+0x1ec>
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d13b      	bne.n	80042b8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004240:	4b71      	ldr	r3, [pc, #452]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2204      	movs	r2, #4
 8004246:	4013      	ands	r3, r2
 8004248:	d004      	beq.n	8004254 <HAL_RCC_OscConfig+0x188>
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e304      	b.n	800485e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004254:	4b6c      	ldr	r3, [pc, #432]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	4a6e      	ldr	r2, [pc, #440]	@ (8004414 <HAL_RCC_OscConfig+0x348>)
 800425a:	4013      	ands	r3, r2
 800425c:	0019      	movs	r1, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	021a      	lsls	r2, r3, #8
 8004264:	4b68      	ldr	r3, [pc, #416]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 8004266:	430a      	orrs	r2, r1
 8004268:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800426a:	4b67      	ldr	r3, [pc, #412]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2209      	movs	r2, #9
 8004270:	4393      	bics	r3, r2
 8004272:	0019      	movs	r1, r3
 8004274:	4b64      	ldr	r3, [pc, #400]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 8004276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004278:	430a      	orrs	r2, r1
 800427a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800427c:	f000 fc42 	bl	8004b04 <HAL_RCC_GetSysClockFreq>
 8004280:	0001      	movs	r1, r0
 8004282:	4b61      	ldr	r3, [pc, #388]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	091b      	lsrs	r3, r3, #4
 8004288:	220f      	movs	r2, #15
 800428a:	4013      	ands	r3, r2
 800428c:	4a62      	ldr	r2, [pc, #392]	@ (8004418 <HAL_RCC_OscConfig+0x34c>)
 800428e:	5cd3      	ldrb	r3, [r2, r3]
 8004290:	000a      	movs	r2, r1
 8004292:	40da      	lsrs	r2, r3
 8004294:	4b61      	ldr	r3, [pc, #388]	@ (800441c <HAL_RCC_OscConfig+0x350>)
 8004296:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004298:	4b61      	ldr	r3, [pc, #388]	@ (8004420 <HAL_RCC_OscConfig+0x354>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2513      	movs	r5, #19
 800429e:	197c      	adds	r4, r7, r5
 80042a0:	0018      	movs	r0, r3
 80042a2:	f7fe fa43 	bl	800272c <HAL_InitTick>
 80042a6:	0003      	movs	r3, r0
 80042a8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80042aa:	197b      	adds	r3, r7, r5
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d046      	beq.n	8004340 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80042b2:	197b      	adds	r3, r7, r5
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	e2d2      	b.n	800485e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80042b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d027      	beq.n	800430e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80042be:	4b52      	ldr	r3, [pc, #328]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2209      	movs	r2, #9
 80042c4:	4393      	bics	r3, r2
 80042c6:	0019      	movs	r1, r3
 80042c8:	4b4f      	ldr	r3, [pc, #316]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 80042ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042cc:	430a      	orrs	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d0:	f7fe fa72 	bl	80027b8 <HAL_GetTick>
 80042d4:	0003      	movs	r3, r0
 80042d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042da:	f7fe fa6d 	bl	80027b8 <HAL_GetTick>
 80042de:	0002      	movs	r2, r0
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e2b8      	b.n	800485e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042ec:	4b46      	ldr	r3, [pc, #280]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2204      	movs	r2, #4
 80042f2:	4013      	ands	r3, r2
 80042f4:	d0f1      	beq.n	80042da <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f6:	4b44      	ldr	r3, [pc, #272]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	4a46      	ldr	r2, [pc, #280]	@ (8004414 <HAL_RCC_OscConfig+0x348>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	0019      	movs	r1, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	021a      	lsls	r2, r3, #8
 8004306:	4b40      	ldr	r3, [pc, #256]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 8004308:	430a      	orrs	r2, r1
 800430a:	605a      	str	r2, [r3, #4]
 800430c:	e018      	b.n	8004340 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800430e:	4b3e      	ldr	r3, [pc, #248]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	4b3d      	ldr	r3, [pc, #244]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 8004314:	2101      	movs	r1, #1
 8004316:	438a      	bics	r2, r1
 8004318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431a:	f7fe fa4d 	bl	80027b8 <HAL_GetTick>
 800431e:	0003      	movs	r3, r0
 8004320:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004324:	f7fe fa48 	bl	80027b8 <HAL_GetTick>
 8004328:	0002      	movs	r2, r0
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e293      	b.n	800485e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004336:	4b34      	ldr	r3, [pc, #208]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2204      	movs	r2, #4
 800433c:	4013      	ands	r3, r2
 800433e:	d1f1      	bne.n	8004324 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2210      	movs	r2, #16
 8004346:	4013      	ands	r3, r2
 8004348:	d100      	bne.n	800434c <HAL_RCC_OscConfig+0x280>
 800434a:	e0a2      	b.n	8004492 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d140      	bne.n	80043d4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004352:	4b2d      	ldr	r3, [pc, #180]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	2380      	movs	r3, #128	@ 0x80
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4013      	ands	r3, r2
 800435c:	d005      	beq.n	800436a <HAL_RCC_OscConfig+0x29e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e279      	b.n	800485e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800436a:	4b27      	ldr	r3, [pc, #156]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	4a2d      	ldr	r2, [pc, #180]	@ (8004424 <HAL_RCC_OscConfig+0x358>)
 8004370:	4013      	ands	r3, r2
 8004372:	0019      	movs	r1, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004378:	4b23      	ldr	r3, [pc, #140]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800437e:	4b22      	ldr	r3, [pc, #136]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	0a19      	lsrs	r1, r3, #8
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	061a      	lsls	r2, r3, #24
 800438c:	4b1e      	ldr	r3, [pc, #120]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 800438e:	430a      	orrs	r2, r1
 8004390:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	0b5b      	lsrs	r3, r3, #13
 8004398:	3301      	adds	r3, #1
 800439a:	2280      	movs	r2, #128	@ 0x80
 800439c:	0212      	lsls	r2, r2, #8
 800439e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80043a0:	4b19      	ldr	r3, [pc, #100]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	210f      	movs	r1, #15
 80043a8:	400b      	ands	r3, r1
 80043aa:	491b      	ldr	r1, [pc, #108]	@ (8004418 <HAL_RCC_OscConfig+0x34c>)
 80043ac:	5ccb      	ldrb	r3, [r1, r3]
 80043ae:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80043b0:	4b1a      	ldr	r3, [pc, #104]	@ (800441c <HAL_RCC_OscConfig+0x350>)
 80043b2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80043b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004420 <HAL_RCC_OscConfig+0x354>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2513      	movs	r5, #19
 80043ba:	197c      	adds	r4, r7, r5
 80043bc:	0018      	movs	r0, r3
 80043be:	f7fe f9b5 	bl	800272c <HAL_InitTick>
 80043c2:	0003      	movs	r3, r0
 80043c4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80043c6:	197b      	adds	r3, r7, r5
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d061      	beq.n	8004492 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80043ce:	197b      	adds	r3, r7, r5
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	e244      	b.n	800485e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d040      	beq.n	800445e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4b09      	ldr	r3, [pc, #36]	@ (8004408 <HAL_RCC_OscConfig+0x33c>)
 80043e2:	2180      	movs	r1, #128	@ 0x80
 80043e4:	0049      	lsls	r1, r1, #1
 80043e6:	430a      	orrs	r2, r1
 80043e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ea:	f7fe f9e5 	bl	80027b8 <HAL_GetTick>
 80043ee:	0003      	movs	r3, r0
 80043f0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80043f2:	e019      	b.n	8004428 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043f4:	f7fe f9e0 	bl	80027b8 <HAL_GetTick>
 80043f8:	0002      	movs	r2, r0
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d912      	bls.n	8004428 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e22b      	b.n	800485e <HAL_RCC_OscConfig+0x792>
 8004406:	46c0      	nop			@ (mov r8, r8)
 8004408:	40021000 	.word	0x40021000
 800440c:	fffeffff 	.word	0xfffeffff
 8004410:	fffbffff 	.word	0xfffbffff
 8004414:	ffffe0ff 	.word	0xffffe0ff
 8004418:	080074d4 	.word	0x080074d4
 800441c:	20000000 	.word	0x20000000
 8004420:	20000004 	.word	0x20000004
 8004424:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004428:	4bca      	ldr	r3, [pc, #808]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	2380      	movs	r3, #128	@ 0x80
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4013      	ands	r3, r2
 8004432:	d0df      	beq.n	80043f4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004434:	4bc7      	ldr	r3, [pc, #796]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	4ac7      	ldr	r2, [pc, #796]	@ (8004758 <HAL_RCC_OscConfig+0x68c>)
 800443a:	4013      	ands	r3, r2
 800443c:	0019      	movs	r1, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004442:	4bc4      	ldr	r3, [pc, #784]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 8004444:	430a      	orrs	r2, r1
 8004446:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004448:	4bc2      	ldr	r3, [pc, #776]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	0a19      	lsrs	r1, r3, #8
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	061a      	lsls	r2, r3, #24
 8004456:	4bbf      	ldr	r3, [pc, #764]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 8004458:	430a      	orrs	r2, r1
 800445a:	605a      	str	r2, [r3, #4]
 800445c:	e019      	b.n	8004492 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800445e:	4bbd      	ldr	r3, [pc, #756]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4bbc      	ldr	r3, [pc, #752]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 8004464:	49bd      	ldr	r1, [pc, #756]	@ (800475c <HAL_RCC_OscConfig+0x690>)
 8004466:	400a      	ands	r2, r1
 8004468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446a:	f7fe f9a5 	bl	80027b8 <HAL_GetTick>
 800446e:	0003      	movs	r3, r0
 8004470:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004474:	f7fe f9a0 	bl	80027b8 <HAL_GetTick>
 8004478:	0002      	movs	r2, r0
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e1eb      	b.n	800485e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004486:	4bb3      	ldr	r3, [pc, #716]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	2380      	movs	r3, #128	@ 0x80
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4013      	ands	r3, r2
 8004490:	d1f0      	bne.n	8004474 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2208      	movs	r2, #8
 8004498:	4013      	ands	r3, r2
 800449a:	d036      	beq.n	800450a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d019      	beq.n	80044d8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044a4:	4bab      	ldr	r3, [pc, #684]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 80044a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80044a8:	4baa      	ldr	r3, [pc, #680]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 80044aa:	2101      	movs	r1, #1
 80044ac:	430a      	orrs	r2, r1
 80044ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b0:	f7fe f982 	bl	80027b8 <HAL_GetTick>
 80044b4:	0003      	movs	r3, r0
 80044b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ba:	f7fe f97d 	bl	80027b8 <HAL_GetTick>
 80044be:	0002      	movs	r2, r0
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e1c8      	b.n	800485e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044cc:	4ba1      	ldr	r3, [pc, #644]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 80044ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d0:	2202      	movs	r2, #2
 80044d2:	4013      	ands	r3, r2
 80044d4:	d0f1      	beq.n	80044ba <HAL_RCC_OscConfig+0x3ee>
 80044d6:	e018      	b.n	800450a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044d8:	4b9e      	ldr	r3, [pc, #632]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 80044da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80044dc:	4b9d      	ldr	r3, [pc, #628]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 80044de:	2101      	movs	r1, #1
 80044e0:	438a      	bics	r2, r1
 80044e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e4:	f7fe f968 	bl	80027b8 <HAL_GetTick>
 80044e8:	0003      	movs	r3, r0
 80044ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ee:	f7fe f963 	bl	80027b8 <HAL_GetTick>
 80044f2:	0002      	movs	r2, r0
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e1ae      	b.n	800485e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004500:	4b94      	ldr	r3, [pc, #592]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 8004502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004504:	2202      	movs	r2, #2
 8004506:	4013      	ands	r3, r2
 8004508:	d1f1      	bne.n	80044ee <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2204      	movs	r2, #4
 8004510:	4013      	ands	r3, r2
 8004512:	d100      	bne.n	8004516 <HAL_RCC_OscConfig+0x44a>
 8004514:	e0ae      	b.n	8004674 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004516:	2023      	movs	r0, #35	@ 0x23
 8004518:	183b      	adds	r3, r7, r0
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800451e:	4b8d      	ldr	r3, [pc, #564]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 8004520:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004522:	2380      	movs	r3, #128	@ 0x80
 8004524:	055b      	lsls	r3, r3, #21
 8004526:	4013      	ands	r3, r2
 8004528:	d109      	bne.n	800453e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800452a:	4b8a      	ldr	r3, [pc, #552]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 800452c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800452e:	4b89      	ldr	r3, [pc, #548]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 8004530:	2180      	movs	r1, #128	@ 0x80
 8004532:	0549      	lsls	r1, r1, #21
 8004534:	430a      	orrs	r2, r1
 8004536:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004538:	183b      	adds	r3, r7, r0
 800453a:	2201      	movs	r2, #1
 800453c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453e:	4b88      	ldr	r3, [pc, #544]	@ (8004760 <HAL_RCC_OscConfig+0x694>)
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	2380      	movs	r3, #128	@ 0x80
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	4013      	ands	r3, r2
 8004548:	d11a      	bne.n	8004580 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800454a:	4b85      	ldr	r3, [pc, #532]	@ (8004760 <HAL_RCC_OscConfig+0x694>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4b84      	ldr	r3, [pc, #528]	@ (8004760 <HAL_RCC_OscConfig+0x694>)
 8004550:	2180      	movs	r1, #128	@ 0x80
 8004552:	0049      	lsls	r1, r1, #1
 8004554:	430a      	orrs	r2, r1
 8004556:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004558:	f7fe f92e 	bl	80027b8 <HAL_GetTick>
 800455c:	0003      	movs	r3, r0
 800455e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004562:	f7fe f929 	bl	80027b8 <HAL_GetTick>
 8004566:	0002      	movs	r2, r0
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b64      	cmp	r3, #100	@ 0x64
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e174      	b.n	800485e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004574:	4b7a      	ldr	r3, [pc, #488]	@ (8004760 <HAL_RCC_OscConfig+0x694>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	2380      	movs	r3, #128	@ 0x80
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	4013      	ands	r3, r2
 800457e:	d0f0      	beq.n	8004562 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	2380      	movs	r3, #128	@ 0x80
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	429a      	cmp	r2, r3
 800458a:	d107      	bne.n	800459c <HAL_RCC_OscConfig+0x4d0>
 800458c:	4b71      	ldr	r3, [pc, #452]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 800458e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004590:	4b70      	ldr	r3, [pc, #448]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 8004592:	2180      	movs	r1, #128	@ 0x80
 8004594:	0049      	lsls	r1, r1, #1
 8004596:	430a      	orrs	r2, r1
 8004598:	651a      	str	r2, [r3, #80]	@ 0x50
 800459a:	e031      	b.n	8004600 <HAL_RCC_OscConfig+0x534>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10c      	bne.n	80045be <HAL_RCC_OscConfig+0x4f2>
 80045a4:	4b6b      	ldr	r3, [pc, #428]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 80045a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 80045aa:	496c      	ldr	r1, [pc, #432]	@ (800475c <HAL_RCC_OscConfig+0x690>)
 80045ac:	400a      	ands	r2, r1
 80045ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80045b0:	4b68      	ldr	r3, [pc, #416]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 80045b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045b4:	4b67      	ldr	r3, [pc, #412]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 80045b6:	496b      	ldr	r1, [pc, #428]	@ (8004764 <HAL_RCC_OscConfig+0x698>)
 80045b8:	400a      	ands	r2, r1
 80045ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80045bc:	e020      	b.n	8004600 <HAL_RCC_OscConfig+0x534>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	23a0      	movs	r3, #160	@ 0xa0
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d10e      	bne.n	80045e8 <HAL_RCC_OscConfig+0x51c>
 80045ca:	4b62      	ldr	r3, [pc, #392]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 80045cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045ce:	4b61      	ldr	r3, [pc, #388]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 80045d0:	2180      	movs	r1, #128	@ 0x80
 80045d2:	00c9      	lsls	r1, r1, #3
 80045d4:	430a      	orrs	r2, r1
 80045d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80045d8:	4b5e      	ldr	r3, [pc, #376]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 80045da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045dc:	4b5d      	ldr	r3, [pc, #372]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 80045de:	2180      	movs	r1, #128	@ 0x80
 80045e0:	0049      	lsls	r1, r1, #1
 80045e2:	430a      	orrs	r2, r1
 80045e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80045e6:	e00b      	b.n	8004600 <HAL_RCC_OscConfig+0x534>
 80045e8:	4b5a      	ldr	r3, [pc, #360]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 80045ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045ec:	4b59      	ldr	r3, [pc, #356]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 80045ee:	495b      	ldr	r1, [pc, #364]	@ (800475c <HAL_RCC_OscConfig+0x690>)
 80045f0:	400a      	ands	r2, r1
 80045f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80045f4:	4b57      	ldr	r3, [pc, #348]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 80045f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045f8:	4b56      	ldr	r3, [pc, #344]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 80045fa:	495a      	ldr	r1, [pc, #360]	@ (8004764 <HAL_RCC_OscConfig+0x698>)
 80045fc:	400a      	ands	r2, r1
 80045fe:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d015      	beq.n	8004634 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004608:	f7fe f8d6 	bl	80027b8 <HAL_GetTick>
 800460c:	0003      	movs	r3, r0
 800460e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004610:	e009      	b.n	8004626 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004612:	f7fe f8d1 	bl	80027b8 <HAL_GetTick>
 8004616:	0002      	movs	r2, r0
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	4a52      	ldr	r2, [pc, #328]	@ (8004768 <HAL_RCC_OscConfig+0x69c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e11b      	b.n	800485e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004626:	4b4b      	ldr	r3, [pc, #300]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 8004628:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800462a:	2380      	movs	r3, #128	@ 0x80
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4013      	ands	r3, r2
 8004630:	d0ef      	beq.n	8004612 <HAL_RCC_OscConfig+0x546>
 8004632:	e014      	b.n	800465e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004634:	f7fe f8c0 	bl	80027b8 <HAL_GetTick>
 8004638:	0003      	movs	r3, r0
 800463a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800463c:	e009      	b.n	8004652 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800463e:	f7fe f8bb 	bl	80027b8 <HAL_GetTick>
 8004642:	0002      	movs	r2, r0
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	4a47      	ldr	r2, [pc, #284]	@ (8004768 <HAL_RCC_OscConfig+0x69c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e105      	b.n	800485e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004652:	4b40      	ldr	r3, [pc, #256]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 8004654:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004656:	2380      	movs	r3, #128	@ 0x80
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4013      	ands	r3, r2
 800465c:	d1ef      	bne.n	800463e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800465e:	2323      	movs	r3, #35	@ 0x23
 8004660:	18fb      	adds	r3, r7, r3
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d105      	bne.n	8004674 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004668:	4b3a      	ldr	r3, [pc, #232]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 800466a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800466c:	4b39      	ldr	r3, [pc, #228]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 800466e:	493f      	ldr	r1, [pc, #252]	@ (800476c <HAL_RCC_OscConfig+0x6a0>)
 8004670:	400a      	ands	r2, r1
 8004672:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2220      	movs	r2, #32
 800467a:	4013      	ands	r3, r2
 800467c:	d049      	beq.n	8004712 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d026      	beq.n	80046d4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004686:	4b33      	ldr	r3, [pc, #204]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	4b32      	ldr	r3, [pc, #200]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 800468c:	2101      	movs	r1, #1
 800468e:	430a      	orrs	r2, r1
 8004690:	609a      	str	r2, [r3, #8]
 8004692:	4b30      	ldr	r3, [pc, #192]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 8004694:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004696:	4b2f      	ldr	r3, [pc, #188]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 8004698:	2101      	movs	r1, #1
 800469a:	430a      	orrs	r2, r1
 800469c:	635a      	str	r2, [r3, #52]	@ 0x34
 800469e:	4b34      	ldr	r3, [pc, #208]	@ (8004770 <HAL_RCC_OscConfig+0x6a4>)
 80046a0:	6a1a      	ldr	r2, [r3, #32]
 80046a2:	4b33      	ldr	r3, [pc, #204]	@ (8004770 <HAL_RCC_OscConfig+0x6a4>)
 80046a4:	2180      	movs	r1, #128	@ 0x80
 80046a6:	0189      	lsls	r1, r1, #6
 80046a8:	430a      	orrs	r2, r1
 80046aa:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ac:	f7fe f884 	bl	80027b8 <HAL_GetTick>
 80046b0:	0003      	movs	r3, r0
 80046b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046b4:	e008      	b.n	80046c8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046b6:	f7fe f87f 	bl	80027b8 <HAL_GetTick>
 80046ba:	0002      	movs	r2, r0
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e0ca      	b.n	800485e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046c8:	4b22      	ldr	r3, [pc, #136]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2202      	movs	r2, #2
 80046ce:	4013      	ands	r3, r2
 80046d0:	d0f1      	beq.n	80046b6 <HAL_RCC_OscConfig+0x5ea>
 80046d2:	e01e      	b.n	8004712 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80046d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	4b1e      	ldr	r3, [pc, #120]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 80046da:	2101      	movs	r1, #1
 80046dc:	438a      	bics	r2, r1
 80046de:	609a      	str	r2, [r3, #8]
 80046e0:	4b23      	ldr	r3, [pc, #140]	@ (8004770 <HAL_RCC_OscConfig+0x6a4>)
 80046e2:	6a1a      	ldr	r2, [r3, #32]
 80046e4:	4b22      	ldr	r3, [pc, #136]	@ (8004770 <HAL_RCC_OscConfig+0x6a4>)
 80046e6:	4923      	ldr	r1, [pc, #140]	@ (8004774 <HAL_RCC_OscConfig+0x6a8>)
 80046e8:	400a      	ands	r2, r1
 80046ea:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ec:	f7fe f864 	bl	80027b8 <HAL_GetTick>
 80046f0:	0003      	movs	r3, r0
 80046f2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046f6:	f7fe f85f 	bl	80027b8 <HAL_GetTick>
 80046fa:	0002      	movs	r2, r0
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e0aa      	b.n	800485e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004708:	4b12      	ldr	r3, [pc, #72]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	2202      	movs	r2, #2
 800470e:	4013      	ands	r3, r2
 8004710:	d1f1      	bne.n	80046f6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004716:	2b00      	cmp	r3, #0
 8004718:	d100      	bne.n	800471c <HAL_RCC_OscConfig+0x650>
 800471a:	e09f      	b.n	800485c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	2b0c      	cmp	r3, #12
 8004720:	d100      	bne.n	8004724 <HAL_RCC_OscConfig+0x658>
 8004722:	e078      	b.n	8004816 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004728:	2b02      	cmp	r3, #2
 800472a:	d159      	bne.n	80047e0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800472c:	4b09      	ldr	r3, [pc, #36]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b08      	ldr	r3, [pc, #32]	@ (8004754 <HAL_RCC_OscConfig+0x688>)
 8004732:	4911      	ldr	r1, [pc, #68]	@ (8004778 <HAL_RCC_OscConfig+0x6ac>)
 8004734:	400a      	ands	r2, r1
 8004736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004738:	f7fe f83e 	bl	80027b8 <HAL_GetTick>
 800473c:	0003      	movs	r3, r0
 800473e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004740:	e01c      	b.n	800477c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004742:	f7fe f839 	bl	80027b8 <HAL_GetTick>
 8004746:	0002      	movs	r2, r0
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d915      	bls.n	800477c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e084      	b.n	800485e <HAL_RCC_OscConfig+0x792>
 8004754:	40021000 	.word	0x40021000
 8004758:	ffff1fff 	.word	0xffff1fff
 800475c:	fffffeff 	.word	0xfffffeff
 8004760:	40007000 	.word	0x40007000
 8004764:	fffffbff 	.word	0xfffffbff
 8004768:	00001388 	.word	0x00001388
 800476c:	efffffff 	.word	0xefffffff
 8004770:	40010000 	.word	0x40010000
 8004774:	ffffdfff 	.word	0xffffdfff
 8004778:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800477c:	4b3a      	ldr	r3, [pc, #232]	@ (8004868 <HAL_RCC_OscConfig+0x79c>)
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	2380      	movs	r3, #128	@ 0x80
 8004782:	049b      	lsls	r3, r3, #18
 8004784:	4013      	ands	r3, r2
 8004786:	d1dc      	bne.n	8004742 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004788:	4b37      	ldr	r3, [pc, #220]	@ (8004868 <HAL_RCC_OscConfig+0x79c>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4a37      	ldr	r2, [pc, #220]	@ (800486c <HAL_RCC_OscConfig+0x7a0>)
 800478e:	4013      	ands	r3, r2
 8004790:	0019      	movs	r1, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047a0:	431a      	orrs	r2, r3
 80047a2:	4b31      	ldr	r3, [pc, #196]	@ (8004868 <HAL_RCC_OscConfig+0x79c>)
 80047a4:	430a      	orrs	r2, r1
 80047a6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a8:	4b2f      	ldr	r3, [pc, #188]	@ (8004868 <HAL_RCC_OscConfig+0x79c>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004868 <HAL_RCC_OscConfig+0x79c>)
 80047ae:	2180      	movs	r1, #128	@ 0x80
 80047b0:	0449      	lsls	r1, r1, #17
 80047b2:	430a      	orrs	r2, r1
 80047b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b6:	f7fd ffff 	bl	80027b8 <HAL_GetTick>
 80047ba:	0003      	movs	r3, r0
 80047bc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c0:	f7fd fffa 	bl	80027b8 <HAL_GetTick>
 80047c4:	0002      	movs	r2, r0
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e045      	b.n	800485e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80047d2:	4b25      	ldr	r3, [pc, #148]	@ (8004868 <HAL_RCC_OscConfig+0x79c>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	2380      	movs	r3, #128	@ 0x80
 80047d8:	049b      	lsls	r3, r3, #18
 80047da:	4013      	ands	r3, r2
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0x6f4>
 80047de:	e03d      	b.n	800485c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e0:	4b21      	ldr	r3, [pc, #132]	@ (8004868 <HAL_RCC_OscConfig+0x79c>)
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	4b20      	ldr	r3, [pc, #128]	@ (8004868 <HAL_RCC_OscConfig+0x79c>)
 80047e6:	4922      	ldr	r1, [pc, #136]	@ (8004870 <HAL_RCC_OscConfig+0x7a4>)
 80047e8:	400a      	ands	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ec:	f7fd ffe4 	bl	80027b8 <HAL_GetTick>
 80047f0:	0003      	movs	r3, r0
 80047f2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f6:	f7fd ffdf 	bl	80027b8 <HAL_GetTick>
 80047fa:	0002      	movs	r2, r0
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e02a      	b.n	800485e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004808:	4b17      	ldr	r3, [pc, #92]	@ (8004868 <HAL_RCC_OscConfig+0x79c>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	2380      	movs	r3, #128	@ 0x80
 800480e:	049b      	lsls	r3, r3, #18
 8004810:	4013      	ands	r3, r2
 8004812:	d1f0      	bne.n	80047f6 <HAL_RCC_OscConfig+0x72a>
 8004814:	e022      	b.n	800485c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481a:	2b01      	cmp	r3, #1
 800481c:	d101      	bne.n	8004822 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e01d      	b.n	800485e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004822:	4b11      	ldr	r3, [pc, #68]	@ (8004868 <HAL_RCC_OscConfig+0x79c>)
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	2380      	movs	r3, #128	@ 0x80
 800482c:	025b      	lsls	r3, r3, #9
 800482e:	401a      	ands	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004834:	429a      	cmp	r2, r3
 8004836:	d10f      	bne.n	8004858 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	23f0      	movs	r3, #240	@ 0xf0
 800483c:	039b      	lsls	r3, r3, #14
 800483e:	401a      	ands	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004844:	429a      	cmp	r2, r3
 8004846:	d107      	bne.n	8004858 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	23c0      	movs	r3, #192	@ 0xc0
 800484c:	041b      	lsls	r3, r3, #16
 800484e:	401a      	ands	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004854:	429a      	cmp	r2, r3
 8004856:	d001      	beq.n	800485c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	0018      	movs	r0, r3
 8004860:	46bd      	mov	sp, r7
 8004862:	b00a      	add	sp, #40	@ 0x28
 8004864:	bdb0      	pop	{r4, r5, r7, pc}
 8004866:	46c0      	nop			@ (mov r8, r8)
 8004868:	40021000 	.word	0x40021000
 800486c:	ff02ffff 	.word	0xff02ffff
 8004870:	feffffff 	.word	0xfeffffff

08004874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004874:	b5b0      	push	{r4, r5, r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e128      	b.n	8004ada <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004888:	4b96      	ldr	r3, [pc, #600]	@ (8004ae4 <HAL_RCC_ClockConfig+0x270>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2201      	movs	r2, #1
 800488e:	4013      	ands	r3, r2
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d91e      	bls.n	80048d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004896:	4b93      	ldr	r3, [pc, #588]	@ (8004ae4 <HAL_RCC_ClockConfig+0x270>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2201      	movs	r2, #1
 800489c:	4393      	bics	r3, r2
 800489e:	0019      	movs	r1, r3
 80048a0:	4b90      	ldr	r3, [pc, #576]	@ (8004ae4 <HAL_RCC_ClockConfig+0x270>)
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048a8:	f7fd ff86 	bl	80027b8 <HAL_GetTick>
 80048ac:	0003      	movs	r3, r0
 80048ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b0:	e009      	b.n	80048c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b2:	f7fd ff81 	bl	80027b8 <HAL_GetTick>
 80048b6:	0002      	movs	r2, r0
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	4a8a      	ldr	r2, [pc, #552]	@ (8004ae8 <HAL_RCC_ClockConfig+0x274>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e109      	b.n	8004ada <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c6:	4b87      	ldr	r3, [pc, #540]	@ (8004ae4 <HAL_RCC_ClockConfig+0x270>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2201      	movs	r2, #1
 80048cc:	4013      	ands	r3, r2
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d1ee      	bne.n	80048b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2202      	movs	r2, #2
 80048da:	4013      	ands	r3, r2
 80048dc:	d009      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048de:	4b83      	ldr	r3, [pc, #524]	@ (8004aec <HAL_RCC_ClockConfig+0x278>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	22f0      	movs	r2, #240	@ 0xf0
 80048e4:	4393      	bics	r3, r2
 80048e6:	0019      	movs	r1, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	4b7f      	ldr	r3, [pc, #508]	@ (8004aec <HAL_RCC_ClockConfig+0x278>)
 80048ee:	430a      	orrs	r2, r1
 80048f0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2201      	movs	r2, #1
 80048f8:	4013      	ands	r3, r2
 80048fa:	d100      	bne.n	80048fe <HAL_RCC_ClockConfig+0x8a>
 80048fc:	e089      	b.n	8004a12 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d107      	bne.n	8004916 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004906:	4b79      	ldr	r3, [pc, #484]	@ (8004aec <HAL_RCC_ClockConfig+0x278>)
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	2380      	movs	r3, #128	@ 0x80
 800490c:	029b      	lsls	r3, r3, #10
 800490e:	4013      	ands	r3, r2
 8004910:	d120      	bne.n	8004954 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e0e1      	b.n	8004ada <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b03      	cmp	r3, #3
 800491c:	d107      	bne.n	800492e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800491e:	4b73      	ldr	r3, [pc, #460]	@ (8004aec <HAL_RCC_ClockConfig+0x278>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	2380      	movs	r3, #128	@ 0x80
 8004924:	049b      	lsls	r3, r3, #18
 8004926:	4013      	ands	r3, r2
 8004928:	d114      	bne.n	8004954 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e0d5      	b.n	8004ada <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d106      	bne.n	8004944 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004936:	4b6d      	ldr	r3, [pc, #436]	@ (8004aec <HAL_RCC_ClockConfig+0x278>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2204      	movs	r2, #4
 800493c:	4013      	ands	r3, r2
 800493e:	d109      	bne.n	8004954 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e0ca      	b.n	8004ada <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004944:	4b69      	ldr	r3, [pc, #420]	@ (8004aec <HAL_RCC_ClockConfig+0x278>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	2380      	movs	r3, #128	@ 0x80
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4013      	ands	r3, r2
 800494e:	d101      	bne.n	8004954 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e0c2      	b.n	8004ada <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004954:	4b65      	ldr	r3, [pc, #404]	@ (8004aec <HAL_RCC_ClockConfig+0x278>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	2203      	movs	r2, #3
 800495a:	4393      	bics	r3, r2
 800495c:	0019      	movs	r1, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	4b62      	ldr	r3, [pc, #392]	@ (8004aec <HAL_RCC_ClockConfig+0x278>)
 8004964:	430a      	orrs	r2, r1
 8004966:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004968:	f7fd ff26 	bl	80027b8 <HAL_GetTick>
 800496c:	0003      	movs	r3, r0
 800496e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d111      	bne.n	800499c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004978:	e009      	b.n	800498e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800497a:	f7fd ff1d 	bl	80027b8 <HAL_GetTick>
 800497e:	0002      	movs	r2, r0
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	4a58      	ldr	r2, [pc, #352]	@ (8004ae8 <HAL_RCC_ClockConfig+0x274>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e0a5      	b.n	8004ada <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800498e:	4b57      	ldr	r3, [pc, #348]	@ (8004aec <HAL_RCC_ClockConfig+0x278>)
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	220c      	movs	r2, #12
 8004994:	4013      	ands	r3, r2
 8004996:	2b08      	cmp	r3, #8
 8004998:	d1ef      	bne.n	800497a <HAL_RCC_ClockConfig+0x106>
 800499a:	e03a      	b.n	8004a12 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	2b03      	cmp	r3, #3
 80049a2:	d111      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049a4:	e009      	b.n	80049ba <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a6:	f7fd ff07 	bl	80027b8 <HAL_GetTick>
 80049aa:	0002      	movs	r2, r0
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	4a4d      	ldr	r2, [pc, #308]	@ (8004ae8 <HAL_RCC_ClockConfig+0x274>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e08f      	b.n	8004ada <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049ba:	4b4c      	ldr	r3, [pc, #304]	@ (8004aec <HAL_RCC_ClockConfig+0x278>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	220c      	movs	r2, #12
 80049c0:	4013      	ands	r3, r2
 80049c2:	2b0c      	cmp	r3, #12
 80049c4:	d1ef      	bne.n	80049a6 <HAL_RCC_ClockConfig+0x132>
 80049c6:	e024      	b.n	8004a12 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d11b      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80049d0:	e009      	b.n	80049e6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d2:	f7fd fef1 	bl	80027b8 <HAL_GetTick>
 80049d6:	0002      	movs	r2, r0
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	4a42      	ldr	r2, [pc, #264]	@ (8004ae8 <HAL_RCC_ClockConfig+0x274>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e079      	b.n	8004ada <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80049e6:	4b41      	ldr	r3, [pc, #260]	@ (8004aec <HAL_RCC_ClockConfig+0x278>)
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	220c      	movs	r2, #12
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d1ef      	bne.n	80049d2 <HAL_RCC_ClockConfig+0x15e>
 80049f2:	e00e      	b.n	8004a12 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f4:	f7fd fee0 	bl	80027b8 <HAL_GetTick>
 80049f8:	0002      	movs	r2, r0
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	4a3a      	ldr	r2, [pc, #232]	@ (8004ae8 <HAL_RCC_ClockConfig+0x274>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e068      	b.n	8004ada <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a08:	4b38      	ldr	r3, [pc, #224]	@ (8004aec <HAL_RCC_ClockConfig+0x278>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	220c      	movs	r2, #12
 8004a0e:	4013      	ands	r3, r2
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a12:	4b34      	ldr	r3, [pc, #208]	@ (8004ae4 <HAL_RCC_ClockConfig+0x270>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2201      	movs	r2, #1
 8004a18:	4013      	ands	r3, r2
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d21e      	bcs.n	8004a5e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a20:	4b30      	ldr	r3, [pc, #192]	@ (8004ae4 <HAL_RCC_ClockConfig+0x270>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2201      	movs	r2, #1
 8004a26:	4393      	bics	r3, r2
 8004a28:	0019      	movs	r1, r3
 8004a2a:	4b2e      	ldr	r3, [pc, #184]	@ (8004ae4 <HAL_RCC_ClockConfig+0x270>)
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a32:	f7fd fec1 	bl	80027b8 <HAL_GetTick>
 8004a36:	0003      	movs	r3, r0
 8004a38:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3a:	e009      	b.n	8004a50 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a3c:	f7fd febc 	bl	80027b8 <HAL_GetTick>
 8004a40:	0002      	movs	r2, r0
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	4a28      	ldr	r2, [pc, #160]	@ (8004ae8 <HAL_RCC_ClockConfig+0x274>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e044      	b.n	8004ada <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a50:	4b24      	ldr	r3, [pc, #144]	@ (8004ae4 <HAL_RCC_ClockConfig+0x270>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2201      	movs	r2, #1
 8004a56:	4013      	ands	r3, r2
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d1ee      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2204      	movs	r2, #4
 8004a64:	4013      	ands	r3, r2
 8004a66:	d009      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a68:	4b20      	ldr	r3, [pc, #128]	@ (8004aec <HAL_RCC_ClockConfig+0x278>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	4a20      	ldr	r2, [pc, #128]	@ (8004af0 <HAL_RCC_ClockConfig+0x27c>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	0019      	movs	r1, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	4b1d      	ldr	r3, [pc, #116]	@ (8004aec <HAL_RCC_ClockConfig+0x278>)
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2208      	movs	r2, #8
 8004a82:	4013      	ands	r3, r2
 8004a84:	d00a      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a86:	4b19      	ldr	r3, [pc, #100]	@ (8004aec <HAL_RCC_ClockConfig+0x278>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	4a1a      	ldr	r2, [pc, #104]	@ (8004af4 <HAL_RCC_ClockConfig+0x280>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	0019      	movs	r1, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	00da      	lsls	r2, r3, #3
 8004a96:	4b15      	ldr	r3, [pc, #84]	@ (8004aec <HAL_RCC_ClockConfig+0x278>)
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a9c:	f000 f832 	bl	8004b04 <HAL_RCC_GetSysClockFreq>
 8004aa0:	0001      	movs	r1, r0
 8004aa2:	4b12      	ldr	r3, [pc, #72]	@ (8004aec <HAL_RCC_ClockConfig+0x278>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	091b      	lsrs	r3, r3, #4
 8004aa8:	220f      	movs	r2, #15
 8004aaa:	4013      	ands	r3, r2
 8004aac:	4a12      	ldr	r2, [pc, #72]	@ (8004af8 <HAL_RCC_ClockConfig+0x284>)
 8004aae:	5cd3      	ldrb	r3, [r2, r3]
 8004ab0:	000a      	movs	r2, r1
 8004ab2:	40da      	lsrs	r2, r3
 8004ab4:	4b11      	ldr	r3, [pc, #68]	@ (8004afc <HAL_RCC_ClockConfig+0x288>)
 8004ab6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ab8:	4b11      	ldr	r3, [pc, #68]	@ (8004b00 <HAL_RCC_ClockConfig+0x28c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	250b      	movs	r5, #11
 8004abe:	197c      	adds	r4, r7, r5
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f7fd fe33 	bl	800272c <HAL_InitTick>
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004aca:	197b      	adds	r3, r7, r5
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004ad2:	197b      	adds	r3, r7, r5
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	e000      	b.n	8004ada <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	0018      	movs	r0, r3
 8004adc:	46bd      	mov	sp, r7
 8004ade:	b004      	add	sp, #16
 8004ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae2:	46c0      	nop			@ (mov r8, r8)
 8004ae4:	40022000 	.word	0x40022000
 8004ae8:	00001388 	.word	0x00001388
 8004aec:	40021000 	.word	0x40021000
 8004af0:	fffff8ff 	.word	0xfffff8ff
 8004af4:	ffffc7ff 	.word	0xffffc7ff
 8004af8:	080074d4 	.word	0x080074d4
 8004afc:	20000000 	.word	0x20000000
 8004b00:	20000004 	.word	0x20000004

08004b04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b04:	b5b0      	push	{r4, r5, r7, lr}
 8004b06:	b08e      	sub	sp, #56	@ 0x38
 8004b08:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004b0a:	4b4c      	ldr	r3, [pc, #304]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x138>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b12:	230c      	movs	r3, #12
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b0c      	cmp	r3, #12
 8004b18:	d014      	beq.n	8004b44 <HAL_RCC_GetSysClockFreq+0x40>
 8004b1a:	d900      	bls.n	8004b1e <HAL_RCC_GetSysClockFreq+0x1a>
 8004b1c:	e07b      	b.n	8004c16 <HAL_RCC_GetSysClockFreq+0x112>
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d002      	beq.n	8004b28 <HAL_RCC_GetSysClockFreq+0x24>
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d00b      	beq.n	8004b3e <HAL_RCC_GetSysClockFreq+0x3a>
 8004b26:	e076      	b.n	8004c16 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004b28:	4b44      	ldr	r3, [pc, #272]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x138>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2210      	movs	r2, #16
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d002      	beq.n	8004b38 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004b32:	4b43      	ldr	r3, [pc, #268]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004b34:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004b36:	e07c      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004b38:	4b42      	ldr	r3, [pc, #264]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x140>)
 8004b3a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004b3c:	e079      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b3e:	4b42      	ldr	r3, [pc, #264]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0x144>)
 8004b40:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004b42:	e076      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b46:	0c9a      	lsrs	r2, r3, #18
 8004b48:	230f      	movs	r3, #15
 8004b4a:	401a      	ands	r2, r3
 8004b4c:	4b3f      	ldr	r3, [pc, #252]	@ (8004c4c <HAL_RCC_GetSysClockFreq+0x148>)
 8004b4e:	5c9b      	ldrb	r3, [r3, r2]
 8004b50:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b54:	0d9a      	lsrs	r2, r3, #22
 8004b56:	2303      	movs	r3, #3
 8004b58:	4013      	ands	r3, r2
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b5e:	4b37      	ldr	r3, [pc, #220]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x138>)
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	2380      	movs	r3, #128	@ 0x80
 8004b64:	025b      	lsls	r3, r3, #9
 8004b66:	4013      	ands	r3, r2
 8004b68:	d01a      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6c:	61bb      	str	r3, [r7, #24]
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
 8004b72:	4a35      	ldr	r2, [pc, #212]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0x144>)
 8004b74:	2300      	movs	r3, #0
 8004b76:	69b8      	ldr	r0, [r7, #24]
 8004b78:	69f9      	ldr	r1, [r7, #28]
 8004b7a:	f7fb fca7 	bl	80004cc <__aeabi_lmul>
 8004b7e:	0002      	movs	r2, r0
 8004b80:	000b      	movs	r3, r1
 8004b82:	0010      	movs	r0, r2
 8004b84:	0019      	movs	r1, r3
 8004b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f7fb fc7b 	bl	800048c <__aeabi_uldivmod>
 8004b96:	0002      	movs	r2, r0
 8004b98:	000b      	movs	r3, r1
 8004b9a:	0013      	movs	r3, r2
 8004b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b9e:	e037      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004ba0:	4b26      	ldr	r3, [pc, #152]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x138>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2210      	movs	r2, #16
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	d01a      	beq.n	8004be0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bac:	60bb      	str	r3, [r7, #8]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	4a23      	ldr	r2, [pc, #140]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	68b8      	ldr	r0, [r7, #8]
 8004bb8:	68f9      	ldr	r1, [r7, #12]
 8004bba:	f7fb fc87 	bl	80004cc <__aeabi_lmul>
 8004bbe:	0002      	movs	r2, r0
 8004bc0:	000b      	movs	r3, r1
 8004bc2:	0010      	movs	r0, r2
 8004bc4:	0019      	movs	r1, r3
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc8:	603b      	str	r3, [r7, #0]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	607b      	str	r3, [r7, #4]
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f7fb fc5b 	bl	800048c <__aeabi_uldivmod>
 8004bd6:	0002      	movs	r2, r0
 8004bd8:	000b      	movs	r3, r1
 8004bda:	0013      	movs	r3, r2
 8004bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bde:	e017      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be2:	0018      	movs	r0, r3
 8004be4:	2300      	movs	r3, #0
 8004be6:	0019      	movs	r1, r3
 8004be8:	4a16      	ldr	r2, [pc, #88]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x140>)
 8004bea:	2300      	movs	r3, #0
 8004bec:	f7fb fc6e 	bl	80004cc <__aeabi_lmul>
 8004bf0:	0002      	movs	r2, r0
 8004bf2:	000b      	movs	r3, r1
 8004bf4:	0010      	movs	r0, r2
 8004bf6:	0019      	movs	r1, r3
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfa:	001c      	movs	r4, r3
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	001d      	movs	r5, r3
 8004c00:	0022      	movs	r2, r4
 8004c02:	002b      	movs	r3, r5
 8004c04:	f7fb fc42 	bl	800048c <__aeabi_uldivmod>
 8004c08:	0002      	movs	r2, r0
 8004c0a:	000b      	movs	r3, r1
 8004c0c:	0013      	movs	r3, r2
 8004c0e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8004c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c12:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004c14:	e00d      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004c16:	4b09      	ldr	r3, [pc, #36]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x138>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	0b5b      	lsrs	r3, r3, #13
 8004c1c:	2207      	movs	r2, #7
 8004c1e:	4013      	ands	r3, r2
 8004c20:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	3301      	adds	r3, #1
 8004c26:	2280      	movs	r2, #128	@ 0x80
 8004c28:	0212      	lsls	r2, r2, #8
 8004c2a:	409a      	lsls	r2, r3
 8004c2c:	0013      	movs	r3, r2
 8004c2e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004c30:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8004c34:	0018      	movs	r0, r3
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b00e      	add	sp, #56	@ 0x38
 8004c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	003d0900 	.word	0x003d0900
 8004c44:	00f42400 	.word	0x00f42400
 8004c48:	007a1200 	.word	0x007a1200
 8004c4c:	080074ec 	.word	0x080074ec

08004c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c54:	4b02      	ldr	r3, [pc, #8]	@ (8004c60 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c56:	681b      	ldr	r3, [r3, #0]
}
 8004c58:	0018      	movs	r0, r3
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	46c0      	nop			@ (mov r8, r8)
 8004c60:	20000000 	.word	0x20000000

08004c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c68:	f7ff fff2 	bl	8004c50 <HAL_RCC_GetHCLKFreq>
 8004c6c:	0001      	movs	r1, r0
 8004c6e:	4b06      	ldr	r3, [pc, #24]	@ (8004c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	0a1b      	lsrs	r3, r3, #8
 8004c74:	2207      	movs	r2, #7
 8004c76:	4013      	ands	r3, r2
 8004c78:	4a04      	ldr	r2, [pc, #16]	@ (8004c8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c7a:	5cd3      	ldrb	r3, [r2, r3]
 8004c7c:	40d9      	lsrs	r1, r3
 8004c7e:	000b      	movs	r3, r1
}
 8004c80:	0018      	movs	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	46c0      	nop			@ (mov r8, r8)
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	080074e4 	.word	0x080074e4

08004c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c94:	f7ff ffdc 	bl	8004c50 <HAL_RCC_GetHCLKFreq>
 8004c98:	0001      	movs	r1, r0
 8004c9a:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	0adb      	lsrs	r3, r3, #11
 8004ca0:	2207      	movs	r2, #7
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	4a04      	ldr	r2, [pc, #16]	@ (8004cb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ca6:	5cd3      	ldrb	r3, [r2, r3]
 8004ca8:	40d9      	lsrs	r1, r3
 8004caa:	000b      	movs	r3, r1
}
 8004cac:	0018      	movs	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	46c0      	nop			@ (mov r8, r8)
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	080074e4 	.word	0x080074e4

08004cbc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004cc4:	2317      	movs	r3, #23
 8004cc6:	18fb      	adds	r3, r7, r3
 8004cc8:	2200      	movs	r2, #0
 8004cca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	d106      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	2380      	movs	r3, #128	@ 0x80
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d100      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004ce2:	e104      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ce4:	4bb9      	ldr	r3, [pc, #740]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ce6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ce8:	2380      	movs	r3, #128	@ 0x80
 8004cea:	055b      	lsls	r3, r3, #21
 8004cec:	4013      	ands	r3, r2
 8004cee:	d10a      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cf0:	4bb6      	ldr	r3, [pc, #728]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004cf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cf4:	4bb5      	ldr	r3, [pc, #724]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004cf6:	2180      	movs	r1, #128	@ 0x80
 8004cf8:	0549      	lsls	r1, r1, #21
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004cfe:	2317      	movs	r3, #23
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	2201      	movs	r2, #1
 8004d04:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d06:	4bb2      	ldr	r3, [pc, #712]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	2380      	movs	r3, #128	@ 0x80
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	4013      	ands	r3, r2
 8004d10:	d11a      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d12:	4baf      	ldr	r3, [pc, #700]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	4bae      	ldr	r3, [pc, #696]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004d18:	2180      	movs	r1, #128	@ 0x80
 8004d1a:	0049      	lsls	r1, r1, #1
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d20:	f7fd fd4a 	bl	80027b8 <HAL_GetTick>
 8004d24:	0003      	movs	r3, r0
 8004d26:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d28:	e008      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d2a:	f7fd fd45 	bl	80027b8 <HAL_GetTick>
 8004d2e:	0002      	movs	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b64      	cmp	r3, #100	@ 0x64
 8004d36:	d901      	bls.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e143      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d3c:	4ba4      	ldr	r3, [pc, #656]	@ (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	2380      	movs	r3, #128	@ 0x80
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	4013      	ands	r3, r2
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004d48:	4ba0      	ldr	r3, [pc, #640]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	23c0      	movs	r3, #192	@ 0xc0
 8004d4e:	039b      	lsls	r3, r3, #14
 8004d50:	4013      	ands	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	23c0      	movs	r3, #192	@ 0xc0
 8004d5a:	039b      	lsls	r3, r3, #14
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d107      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	23c0      	movs	r3, #192	@ 0xc0
 8004d6a:	039b      	lsls	r3, r3, #14
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d013      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	23c0      	movs	r3, #192	@ 0xc0
 8004d7a:	029b      	lsls	r3, r3, #10
 8004d7c:	401a      	ands	r2, r3
 8004d7e:	23c0      	movs	r3, #192	@ 0xc0
 8004d80:	029b      	lsls	r3, r3, #10
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d10a      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004d86:	4b91      	ldr	r3, [pc, #580]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	2380      	movs	r3, #128	@ 0x80
 8004d8c:	029b      	lsls	r3, r3, #10
 8004d8e:	401a      	ands	r2, r3
 8004d90:	2380      	movs	r3, #128	@ 0x80
 8004d92:	029b      	lsls	r3, r3, #10
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d101      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e113      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004d9c:	4b8b      	ldr	r3, [pc, #556]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004da0:	23c0      	movs	r3, #192	@ 0xc0
 8004da2:	029b      	lsls	r3, r3, #10
 8004da4:	4013      	ands	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d049      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	23c0      	movs	r3, #192	@ 0xc0
 8004db4:	029b      	lsls	r3, r3, #10
 8004db6:	4013      	ands	r3, r2
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d004      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d10d      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	23c0      	movs	r3, #192	@ 0xc0
 8004dce:	029b      	lsls	r3, r3, #10
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d034      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	2380      	movs	r3, #128	@ 0x80
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	4013      	ands	r3, r2
 8004de2:	d02e      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004de4:	4b79      	ldr	r3, [pc, #484]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004de8:	4a7a      	ldr	r2, [pc, #488]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004dea:	4013      	ands	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dee:	4b77      	ldr	r3, [pc, #476]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004df0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004df2:	4b76      	ldr	r3, [pc, #472]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004df4:	2180      	movs	r1, #128	@ 0x80
 8004df6:	0309      	lsls	r1, r1, #12
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dfc:	4b73      	ldr	r3, [pc, #460]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004dfe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e00:	4b72      	ldr	r3, [pc, #456]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e02:	4975      	ldr	r1, [pc, #468]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004e04:	400a      	ands	r2, r1
 8004e06:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004e08:	4b70      	ldr	r3, [pc, #448]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	2380      	movs	r3, #128	@ 0x80
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	4013      	ands	r3, r2
 8004e16:	d014      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e18:	f7fd fcce 	bl	80027b8 <HAL_GetTick>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e20:	e009      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e22:	f7fd fcc9 	bl	80027b8 <HAL_GetTick>
 8004e26:	0002      	movs	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	4a6b      	ldr	r2, [pc, #428]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e0c6      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e36:	4b65      	ldr	r3, [pc, #404]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e3a:	2380      	movs	r3, #128	@ 0x80
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4013      	ands	r3, r2
 8004e40:	d0ef      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	2380      	movs	r3, #128	@ 0x80
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d01f      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	23c0      	movs	r3, #192	@ 0xc0
 8004e54:	029b      	lsls	r3, r3, #10
 8004e56:	401a      	ands	r2, r3
 8004e58:	23c0      	movs	r3, #192	@ 0xc0
 8004e5a:	029b      	lsls	r3, r3, #10
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d10c      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004e60:	4b5a      	ldr	r3, [pc, #360]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a5e      	ldr	r2, [pc, #376]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	0019      	movs	r1, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	23c0      	movs	r3, #192	@ 0xc0
 8004e70:	039b      	lsls	r3, r3, #14
 8004e72:	401a      	ands	r2, r3
 8004e74:	4b55      	ldr	r3, [pc, #340]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e76:	430a      	orrs	r2, r1
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	4b54      	ldr	r3, [pc, #336]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e7c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	23c0      	movs	r3, #192	@ 0xc0
 8004e84:	029b      	lsls	r3, r3, #10
 8004e86:	401a      	ands	r2, r3
 8004e88:	4b50      	ldr	r3, [pc, #320]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2220      	movs	r2, #32
 8004e94:	4013      	ands	r3, r2
 8004e96:	d01f      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	23c0      	movs	r3, #192	@ 0xc0
 8004e9e:	029b      	lsls	r3, r3, #10
 8004ea0:	401a      	ands	r2, r3
 8004ea2:	23c0      	movs	r3, #192	@ 0xc0
 8004ea4:	029b      	lsls	r3, r3, #10
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d10c      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004eaa:	4b48      	ldr	r3, [pc, #288]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a4c      	ldr	r2, [pc, #304]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	0019      	movs	r1, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	23c0      	movs	r3, #192	@ 0xc0
 8004eba:	039b      	lsls	r3, r3, #14
 8004ebc:	401a      	ands	r2, r3
 8004ebe:	4b43      	ldr	r3, [pc, #268]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	4b41      	ldr	r3, [pc, #260]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ec6:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	23c0      	movs	r3, #192	@ 0xc0
 8004ece:	029b      	lsls	r3, r3, #10
 8004ed0:	401a      	ands	r2, r3
 8004ed2:	4b3e      	ldr	r3, [pc, #248]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ed8:	2317      	movs	r3, #23
 8004eda:	18fb      	adds	r3, r7, r3
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d105      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ee4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ee6:	4b39      	ldr	r3, [pc, #228]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ee8:	493e      	ldr	r1, [pc, #248]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004eea:	400a      	ands	r2, r1
 8004eec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	d009      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ef8:	4b34      	ldr	r3, [pc, #208]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004efc:	2203      	movs	r2, #3
 8004efe:	4393      	bics	r3, r2
 8004f00:	0019      	movs	r1, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	4b31      	ldr	r3, [pc, #196]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2202      	movs	r2, #2
 8004f12:	4013      	ands	r3, r2
 8004f14:	d009      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f16:	4b2d      	ldr	r3, [pc, #180]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f1a:	220c      	movs	r2, #12
 8004f1c:	4393      	bics	r3, r2
 8004f1e:	0019      	movs	r1, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	4b29      	ldr	r3, [pc, #164]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f26:	430a      	orrs	r2, r1
 8004f28:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2204      	movs	r2, #4
 8004f30:	4013      	ands	r3, r2
 8004f32:	d009      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f34:	4b25      	ldr	r3, [pc, #148]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f38:	4a2b      	ldr	r2, [pc, #172]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	0019      	movs	r1, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695a      	ldr	r2, [r3, #20]
 8004f42:	4b22      	ldr	r3, [pc, #136]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f44:	430a      	orrs	r2, r1
 8004f46:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2208      	movs	r2, #8
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d009      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f52:	4b1e      	ldr	r3, [pc, #120]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f56:	4a25      	ldr	r2, [pc, #148]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	0019      	movs	r1, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699a      	ldr	r2, [r3, #24]
 8004f60:	4b1a      	ldr	r3, [pc, #104]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f62:	430a      	orrs	r2, r1
 8004f64:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	2380      	movs	r3, #128	@ 0x80
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	4013      	ands	r3, r2
 8004f70:	d009      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f72:	4b16      	ldr	r3, [pc, #88]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f76:	4a17      	ldr	r2, [pc, #92]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	0019      	movs	r1, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	69da      	ldr	r2, [r3, #28]
 8004f80:	4b12      	ldr	r3, [pc, #72]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f82:	430a      	orrs	r2, r1
 8004f84:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2240      	movs	r2, #64	@ 0x40
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	d009      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f90:	4b0e      	ldr	r3, [pc, #56]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f94:	4a16      	ldr	r2, [pc, #88]	@ (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004f96:	4013      	ands	r3, r2
 8004f98:	0019      	movs	r1, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2280      	movs	r2, #128	@ 0x80
 8004faa:	4013      	ands	r3, r2
 8004fac:	d009      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004fae:	4b07      	ldr	r3, [pc, #28]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fb2:	4a10      	ldr	r2, [pc, #64]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	0019      	movs	r1, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1a      	ldr	r2, [r3, #32]
 8004fbc:	4b03      	ldr	r3, [pc, #12]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b006      	add	sp, #24
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	40007000 	.word	0x40007000
 8004fd4:	fffcffff 	.word	0xfffcffff
 8004fd8:	fff7ffff 	.word	0xfff7ffff
 8004fdc:	00001388 	.word	0x00001388
 8004fe0:	ffcfffff 	.word	0xffcfffff
 8004fe4:	efffffff 	.word	0xefffffff
 8004fe8:	fffff3ff 	.word	0xfffff3ff
 8004fec:	ffffcfff 	.word	0xffffcfff
 8004ff0:	fbffffff 	.word	0xfbffffff
 8004ff4:	fff3ffff 	.word	0xfff3ffff

08004ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e032      	b.n	8005070 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2239      	movs	r2, #57	@ 0x39
 800500e:	5c9b      	ldrb	r3, [r3, r2]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d107      	bne.n	8005026 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2238      	movs	r2, #56	@ 0x38
 800501a:	2100      	movs	r1, #0
 800501c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	0018      	movs	r0, r3
 8005022:	f7fd f9df 	bl	80023e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2239      	movs	r2, #57	@ 0x39
 800502a:	2102      	movs	r1, #2
 800502c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	3304      	adds	r3, #4
 8005036:	0019      	movs	r1, r3
 8005038:	0010      	movs	r0, r2
 800503a:	f000 fd01 	bl	8005a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	223e      	movs	r2, #62	@ 0x3e
 8005042:	2101      	movs	r1, #1
 8005044:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	223a      	movs	r2, #58	@ 0x3a
 800504a:	2101      	movs	r1, #1
 800504c:	5499      	strb	r1, [r3, r2]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	223b      	movs	r2, #59	@ 0x3b
 8005052:	2101      	movs	r1, #1
 8005054:	5499      	strb	r1, [r3, r2]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	223c      	movs	r2, #60	@ 0x3c
 800505a:	2101      	movs	r1, #1
 800505c:	5499      	strb	r1, [r3, r2]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	223d      	movs	r2, #61	@ 0x3d
 8005062:	2101      	movs	r1, #1
 8005064:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2239      	movs	r2, #57	@ 0x39
 800506a:	2101      	movs	r1, #1
 800506c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	0018      	movs	r0, r3
 8005072:	46bd      	mov	sp, r7
 8005074:	b002      	add	sp, #8
 8005076:	bd80      	pop	{r7, pc}

08005078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2239      	movs	r2, #57	@ 0x39
 8005084:	5c9b      	ldrb	r3, [r3, r2]
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	d001      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e03b      	b.n	8005108 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2239      	movs	r2, #57	@ 0x39
 8005094:	2102      	movs	r1, #2
 8005096:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2101      	movs	r1, #1
 80050a4:	430a      	orrs	r2, r1
 80050a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	2380      	movs	r3, #128	@ 0x80
 80050ae:	05db      	lsls	r3, r3, #23
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d00e      	beq.n	80050d2 <HAL_TIM_Base_Start_IT+0x5a>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a15      	ldr	r2, [pc, #84]	@ (8005110 <HAL_TIM_Base_Start_IT+0x98>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d009      	beq.n	80050d2 <HAL_TIM_Base_Start_IT+0x5a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a14      	ldr	r2, [pc, #80]	@ (8005114 <HAL_TIM_Base_Start_IT+0x9c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d004      	beq.n	80050d2 <HAL_TIM_Base_Start_IT+0x5a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a12      	ldr	r2, [pc, #72]	@ (8005118 <HAL_TIM_Base_Start_IT+0xa0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d111      	bne.n	80050f6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	2207      	movs	r2, #7
 80050da:	4013      	ands	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2b06      	cmp	r3, #6
 80050e2:	d010      	beq.n	8005106 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2101      	movs	r1, #1
 80050f0:	430a      	orrs	r2, r1
 80050f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f4:	e007      	b.n	8005106 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2101      	movs	r1, #1
 8005102:	430a      	orrs	r2, r1
 8005104:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	0018      	movs	r0, r3
 800510a:	46bd      	mov	sp, r7
 800510c:	b004      	add	sp, #16
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40000400 	.word	0x40000400
 8005114:	40010800 	.word	0x40010800
 8005118:	40011400 	.word	0x40011400

0800511c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e032      	b.n	8005194 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2239      	movs	r2, #57	@ 0x39
 8005132:	5c9b      	ldrb	r3, [r3, r2]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d107      	bne.n	800514a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2238      	movs	r2, #56	@ 0x38
 800513e:	2100      	movs	r1, #0
 8005140:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	0018      	movs	r0, r3
 8005146:	f000 f829 	bl	800519c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2239      	movs	r2, #57	@ 0x39
 800514e:	2102      	movs	r1, #2
 8005150:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3304      	adds	r3, #4
 800515a:	0019      	movs	r1, r3
 800515c:	0010      	movs	r0, r2
 800515e:	f000 fc6f 	bl	8005a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	223e      	movs	r2, #62	@ 0x3e
 8005166:	2101      	movs	r1, #1
 8005168:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	223a      	movs	r2, #58	@ 0x3a
 800516e:	2101      	movs	r1, #1
 8005170:	5499      	strb	r1, [r3, r2]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	223b      	movs	r2, #59	@ 0x3b
 8005176:	2101      	movs	r1, #1
 8005178:	5499      	strb	r1, [r3, r2]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	223c      	movs	r2, #60	@ 0x3c
 800517e:	2101      	movs	r1, #1
 8005180:	5499      	strb	r1, [r3, r2]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	223d      	movs	r2, #61	@ 0x3d
 8005186:	2101      	movs	r1, #1
 8005188:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2239      	movs	r2, #57	@ 0x39
 800518e:	2101      	movs	r1, #1
 8005190:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	0018      	movs	r0, r3
 8005196:	46bd      	mov	sp, r7
 8005198:	b002      	add	sp, #8
 800519a:	bd80      	pop	{r7, pc}

0800519c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051a4:	46c0      	nop			@ (mov r8, r8)
 80051a6:	46bd      	mov	sp, r7
 80051a8:	b002      	add	sp, #8
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d108      	bne.n	80051ce <HAL_TIM_PWM_Start+0x22>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	223a      	movs	r2, #58	@ 0x3a
 80051c0:	5c9b      	ldrb	r3, [r3, r2]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	1e5a      	subs	r2, r3, #1
 80051c8:	4193      	sbcs	r3, r2
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	e01f      	b.n	800520e <HAL_TIM_PWM_Start+0x62>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d108      	bne.n	80051e6 <HAL_TIM_PWM_Start+0x3a>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	223b      	movs	r2, #59	@ 0x3b
 80051d8:	5c9b      	ldrb	r3, [r3, r2]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	3b01      	subs	r3, #1
 80051de:	1e5a      	subs	r2, r3, #1
 80051e0:	4193      	sbcs	r3, r2
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	e013      	b.n	800520e <HAL_TIM_PWM_Start+0x62>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d108      	bne.n	80051fe <HAL_TIM_PWM_Start+0x52>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	223c      	movs	r2, #60	@ 0x3c
 80051f0:	5c9b      	ldrb	r3, [r3, r2]
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	1e5a      	subs	r2, r3, #1
 80051f8:	4193      	sbcs	r3, r2
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	e007      	b.n	800520e <HAL_TIM_PWM_Start+0x62>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	223d      	movs	r2, #61	@ 0x3d
 8005202:	5c9b      	ldrb	r3, [r3, r2]
 8005204:	b2db      	uxtb	r3, r3
 8005206:	3b01      	subs	r3, #1
 8005208:	1e5a      	subs	r2, r3, #1
 800520a:	4193      	sbcs	r3, r2
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e052      	b.n	80052bc <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d104      	bne.n	8005226 <HAL_TIM_PWM_Start+0x7a>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	223a      	movs	r2, #58	@ 0x3a
 8005220:	2102      	movs	r1, #2
 8005222:	5499      	strb	r1, [r3, r2]
 8005224:	e013      	b.n	800524e <HAL_TIM_PWM_Start+0xa2>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b04      	cmp	r3, #4
 800522a:	d104      	bne.n	8005236 <HAL_TIM_PWM_Start+0x8a>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	223b      	movs	r2, #59	@ 0x3b
 8005230:	2102      	movs	r1, #2
 8005232:	5499      	strb	r1, [r3, r2]
 8005234:	e00b      	b.n	800524e <HAL_TIM_PWM_Start+0xa2>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b08      	cmp	r3, #8
 800523a:	d104      	bne.n	8005246 <HAL_TIM_PWM_Start+0x9a>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	223c      	movs	r2, #60	@ 0x3c
 8005240:	2102      	movs	r1, #2
 8005242:	5499      	strb	r1, [r3, r2]
 8005244:	e003      	b.n	800524e <HAL_TIM_PWM_Start+0xa2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	223d      	movs	r2, #61	@ 0x3d
 800524a:	2102      	movs	r1, #2
 800524c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6839      	ldr	r1, [r7, #0]
 8005254:	2201      	movs	r2, #1
 8005256:	0018      	movs	r0, r3
 8005258:	f000 fdee 	bl	8005e38 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	2380      	movs	r3, #128	@ 0x80
 8005262:	05db      	lsls	r3, r3, #23
 8005264:	429a      	cmp	r2, r3
 8005266:	d00e      	beq.n	8005286 <HAL_TIM_PWM_Start+0xda>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a15      	ldr	r2, [pc, #84]	@ (80052c4 <HAL_TIM_PWM_Start+0x118>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d009      	beq.n	8005286 <HAL_TIM_PWM_Start+0xda>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a14      	ldr	r2, [pc, #80]	@ (80052c8 <HAL_TIM_PWM_Start+0x11c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d004      	beq.n	8005286 <HAL_TIM_PWM_Start+0xda>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a12      	ldr	r2, [pc, #72]	@ (80052cc <HAL_TIM_PWM_Start+0x120>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d111      	bne.n	80052aa <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	2207      	movs	r2, #7
 800528e:	4013      	ands	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b06      	cmp	r3, #6
 8005296:	d010      	beq.n	80052ba <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2101      	movs	r1, #1
 80052a4:	430a      	orrs	r2, r1
 80052a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a8:	e007      	b.n	80052ba <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2101      	movs	r1, #1
 80052b6:	430a      	orrs	r2, r1
 80052b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	0018      	movs	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	b004      	add	sp, #16
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40000400 	.word	0x40000400
 80052c8:	40010800 	.word	0x40010800
 80052cc:	40011400 	.word	0x40011400

080052d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e088      	b.n	80053f6 <HAL_TIM_Encoder_Init+0x126>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2239      	movs	r2, #57	@ 0x39
 80052e8:	5c9b      	ldrb	r3, [r3, r2]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d107      	bne.n	8005300 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2238      	movs	r2, #56	@ 0x38
 80052f4:	2100      	movs	r1, #0
 80052f6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	0018      	movs	r0, r3
 80052fc:	f7fd f89e 	bl	800243c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2239      	movs	r2, #57	@ 0x39
 8005304:	2102      	movs	r1, #2
 8005306:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	493b      	ldr	r1, [pc, #236]	@ (8005400 <HAL_TIM_Encoder_Init+0x130>)
 8005314:	400a      	ands	r2, r1
 8005316:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3304      	adds	r3, #4
 8005320:	0019      	movs	r1, r3
 8005322:	0010      	movs	r0, r2
 8005324:	f000 fb8c 	bl	8005a40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	4a2d      	ldr	r2, [pc, #180]	@ (8005404 <HAL_TIM_Encoder_Init+0x134>)
 800534e:	4013      	ands	r3, r2
 8005350:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	021b      	lsls	r3, r3, #8
 800535c:	4313      	orrs	r3, r2
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	4a28      	ldr	r2, [pc, #160]	@ (8005408 <HAL_TIM_Encoder_Init+0x138>)
 8005368:	4013      	ands	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	4a27      	ldr	r2, [pc, #156]	@ (800540c <HAL_TIM_Encoder_Init+0x13c>)
 8005370:	4013      	ands	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	021b      	lsls	r3, r3, #8
 800537e:	4313      	orrs	r3, r2
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	4313      	orrs	r3, r2
 8005384:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	011a      	lsls	r2, r3, #4
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	031b      	lsls	r3, r3, #12
 8005392:	4313      	orrs	r3, r2
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2222      	movs	r2, #34	@ 0x22
 800539e:	4393      	bics	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2288      	movs	r2, #136	@ 0x88
 80053a6:	4393      	bics	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	4313      	orrs	r3, r2
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	223e      	movs	r2, #62	@ 0x3e
 80053d8:	2101      	movs	r1, #1
 80053da:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	223a      	movs	r2, #58	@ 0x3a
 80053e0:	2101      	movs	r1, #1
 80053e2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	223b      	movs	r2, #59	@ 0x3b
 80053e8:	2101      	movs	r1, #1
 80053ea:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2239      	movs	r2, #57	@ 0x39
 80053f0:	2101      	movs	r1, #1
 80053f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	0018      	movs	r0, r3
 80053f8:	46bd      	mov	sp, r7
 80053fa:	b006      	add	sp, #24
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	46c0      	nop			@ (mov r8, r8)
 8005400:	ffffbff8 	.word	0xffffbff8
 8005404:	fffffcfc 	.word	0xfffffcfc
 8005408:	fffff3f3 	.word	0xfffff3f3
 800540c:	ffff0f0f 	.word	0xffff0f0f

08005410 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800541a:	200f      	movs	r0, #15
 800541c:	183b      	adds	r3, r7, r0
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	213a      	movs	r1, #58	@ 0x3a
 8005422:	5c52      	ldrb	r2, [r2, r1]
 8005424:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005426:	230e      	movs	r3, #14
 8005428:	18fb      	adds	r3, r7, r3
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	213b      	movs	r1, #59	@ 0x3b
 800542e:	5c52      	ldrb	r2, [r2, r1]
 8005430:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10a      	bne.n	800544e <HAL_TIM_Encoder_Start+0x3e>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005438:	183b      	adds	r3, r7, r0
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d001      	beq.n	8005444 <HAL_TIM_Encoder_Start+0x34>
    {
      return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e056      	b.n	80054f2 <HAL_TIM_Encoder_Start+0xe2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	223a      	movs	r2, #58	@ 0x3a
 8005448:	2102      	movs	r1, #2
 800544a:	5499      	strb	r1, [r3, r2]
 800544c:	e022      	b.n	8005494 <HAL_TIM_Encoder_Start+0x84>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b04      	cmp	r3, #4
 8005452:	d10b      	bne.n	800546c <HAL_TIM_Encoder_Start+0x5c>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005454:	230e      	movs	r3, #14
 8005456:	18fb      	adds	r3, r7, r3
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d001      	beq.n	8005462 <HAL_TIM_Encoder_Start+0x52>
    {
      return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e047      	b.n	80054f2 <HAL_TIM_Encoder_Start+0xe2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	223b      	movs	r2, #59	@ 0x3b
 8005466:	2102      	movs	r1, #2
 8005468:	5499      	strb	r1, [r3, r2]
 800546a:	e013      	b.n	8005494 <HAL_TIM_Encoder_Start+0x84>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800546c:	230f      	movs	r3, #15
 800546e:	18fb      	adds	r3, r7, r3
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d104      	bne.n	8005480 <HAL_TIM_Encoder_Start+0x70>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005476:	230e      	movs	r3, #14
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d001      	beq.n	8005484 <HAL_TIM_Encoder_Start+0x74>
    {
      return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e036      	b.n	80054f2 <HAL_TIM_Encoder_Start+0xe2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	223a      	movs	r2, #58	@ 0x3a
 8005488:	2102      	movs	r1, #2
 800548a:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	223b      	movs	r2, #59	@ 0x3b
 8005490:	2102      	movs	r1, #2
 8005492:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_TIM_Encoder_Start+0x92>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b04      	cmp	r3, #4
 800549e:	d008      	beq.n	80054b2 <HAL_TIM_Encoder_Start+0xa2>
 80054a0:	e00f      	b.n	80054c2 <HAL_TIM_Encoder_Start+0xb2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2201      	movs	r2, #1
 80054a8:	2100      	movs	r1, #0
 80054aa:	0018      	movs	r0, r3
 80054ac:	f000 fcc4 	bl	8005e38 <TIM_CCxChannelCmd>
      break;
 80054b0:	e016      	b.n	80054e0 <HAL_TIM_Encoder_Start+0xd0>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2201      	movs	r2, #1
 80054b8:	2104      	movs	r1, #4
 80054ba:	0018      	movs	r0, r3
 80054bc:	f000 fcbc 	bl	8005e38 <TIM_CCxChannelCmd>
      break;
 80054c0:	e00e      	b.n	80054e0 <HAL_TIM_Encoder_Start+0xd0>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2201      	movs	r2, #1
 80054c8:	2100      	movs	r1, #0
 80054ca:	0018      	movs	r0, r3
 80054cc:	f000 fcb4 	bl	8005e38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2201      	movs	r2, #1
 80054d6:	2104      	movs	r1, #4
 80054d8:	0018      	movs	r0, r3
 80054da:	f000 fcad 	bl	8005e38 <TIM_CCxChannelCmd>
      break;
 80054de:	46c0      	nop			@ (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2101      	movs	r1, #1
 80054ec:	430a      	orrs	r2, r1
 80054ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	0018      	movs	r0, r3
 80054f4:	46bd      	mov	sp, r7
 80054f6:	b004      	add	sp, #16
 80054f8:	bd80      	pop	{r7, pc}

080054fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	2202      	movs	r2, #2
 800550a:	4013      	ands	r3, r2
 800550c:	2b02      	cmp	r3, #2
 800550e:	d124      	bne.n	800555a <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	2202      	movs	r2, #2
 8005518:	4013      	ands	r3, r2
 800551a:	2b02      	cmp	r3, #2
 800551c:	d11d      	bne.n	800555a <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2203      	movs	r2, #3
 8005524:	4252      	negs	r2, r2
 8005526:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	2203      	movs	r2, #3
 8005536:	4013      	ands	r3, r2
 8005538:	d004      	beq.n	8005544 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	0018      	movs	r0, r3
 800553e:	f000 fa67 	bl	8005a10 <HAL_TIM_IC_CaptureCallback>
 8005542:	e007      	b.n	8005554 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	0018      	movs	r0, r3
 8005548:	f000 fa5a 	bl	8005a00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	0018      	movs	r0, r3
 8005550:	f000 fa66 	bl	8005a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	2204      	movs	r2, #4
 8005562:	4013      	ands	r3, r2
 8005564:	2b04      	cmp	r3, #4
 8005566:	d125      	bne.n	80055b4 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	2204      	movs	r2, #4
 8005570:	4013      	ands	r3, r2
 8005572:	2b04      	cmp	r3, #4
 8005574:	d11e      	bne.n	80055b4 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2205      	movs	r2, #5
 800557c:	4252      	negs	r2, r2
 800557e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	699a      	ldr	r2, [r3, #24]
 800558c:	23c0      	movs	r3, #192	@ 0xc0
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4013      	ands	r3, r2
 8005592:	d004      	beq.n	800559e <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	0018      	movs	r0, r3
 8005598:	f000 fa3a 	bl	8005a10 <HAL_TIM_IC_CaptureCallback>
 800559c:	e007      	b.n	80055ae <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	0018      	movs	r0, r3
 80055a2:	f000 fa2d 	bl	8005a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	0018      	movs	r0, r3
 80055aa:	f000 fa39 	bl	8005a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2208      	movs	r2, #8
 80055bc:	4013      	ands	r3, r2
 80055be:	2b08      	cmp	r3, #8
 80055c0:	d124      	bne.n	800560c <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	2208      	movs	r2, #8
 80055ca:	4013      	ands	r3, r2
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d11d      	bne.n	800560c <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2209      	movs	r2, #9
 80055d6:	4252      	negs	r2, r2
 80055d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2204      	movs	r2, #4
 80055de:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	2203      	movs	r2, #3
 80055e8:	4013      	ands	r3, r2
 80055ea:	d004      	beq.n	80055f6 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	0018      	movs	r0, r3
 80055f0:	f000 fa0e 	bl	8005a10 <HAL_TIM_IC_CaptureCallback>
 80055f4:	e007      	b.n	8005606 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	0018      	movs	r0, r3
 80055fa:	f000 fa01 	bl	8005a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	0018      	movs	r0, r3
 8005602:	f000 fa0d 	bl	8005a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2210      	movs	r2, #16
 8005614:	4013      	ands	r3, r2
 8005616:	2b10      	cmp	r3, #16
 8005618:	d125      	bne.n	8005666 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	2210      	movs	r2, #16
 8005622:	4013      	ands	r3, r2
 8005624:	2b10      	cmp	r3, #16
 8005626:	d11e      	bne.n	8005666 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2211      	movs	r2, #17
 800562e:	4252      	negs	r2, r2
 8005630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2208      	movs	r2, #8
 8005636:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69da      	ldr	r2, [r3, #28]
 800563e:	23c0      	movs	r3, #192	@ 0xc0
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4013      	ands	r3, r2
 8005644:	d004      	beq.n	8005650 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	0018      	movs	r0, r3
 800564a:	f000 f9e1 	bl	8005a10 <HAL_TIM_IC_CaptureCallback>
 800564e:	e007      	b.n	8005660 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	0018      	movs	r0, r3
 8005654:	f000 f9d4 	bl	8005a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	0018      	movs	r0, r3
 800565c:	f000 f9e0 	bl	8005a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2201      	movs	r2, #1
 800566e:	4013      	ands	r3, r2
 8005670:	2b01      	cmp	r3, #1
 8005672:	d10f      	bne.n	8005694 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	2201      	movs	r2, #1
 800567c:	4013      	ands	r3, r2
 800567e:	2b01      	cmp	r3, #1
 8005680:	d108      	bne.n	8005694 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2202      	movs	r2, #2
 8005688:	4252      	negs	r2, r2
 800568a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	0018      	movs	r0, r3
 8005690:	f7fc fbaa 	bl	8001de8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	2240      	movs	r2, #64	@ 0x40
 800569c:	4013      	ands	r3, r2
 800569e:	2b40      	cmp	r3, #64	@ 0x40
 80056a0:	d10f      	bne.n	80056c2 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	2240      	movs	r2, #64	@ 0x40
 80056aa:	4013      	ands	r3, r2
 80056ac:	2b40      	cmp	r3, #64	@ 0x40
 80056ae:	d108      	bne.n	80056c2 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2241      	movs	r2, #65	@ 0x41
 80056b6:	4252      	negs	r2, r2
 80056b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	0018      	movs	r0, r3
 80056be:	f000 f9b7 	bl	8005a30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056c2:	46c0      	nop			@ (mov r8, r8)
 80056c4:	46bd      	mov	sp, r7
 80056c6:	b002      	add	sp, #8
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056d8:	2317      	movs	r3, #23
 80056da:	18fb      	adds	r3, r7, r3
 80056dc:	2200      	movs	r2, #0
 80056de:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2238      	movs	r2, #56	@ 0x38
 80056e4:	5c9b      	ldrb	r3, [r3, r2]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_TIM_PWM_ConfigChannel+0x22>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e0ad      	b.n	800584a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2238      	movs	r2, #56	@ 0x38
 80056f2:	2101      	movs	r1, #1
 80056f4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b0c      	cmp	r3, #12
 80056fa:	d100      	bne.n	80056fe <HAL_TIM_PWM_ConfigChannel+0x32>
 80056fc:	e076      	b.n	80057ec <HAL_TIM_PWM_ConfigChannel+0x120>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b0c      	cmp	r3, #12
 8005702:	d900      	bls.n	8005706 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005704:	e095      	b.n	8005832 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b08      	cmp	r3, #8
 800570a:	d04e      	beq.n	80057aa <HAL_TIM_PWM_ConfigChannel+0xde>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b08      	cmp	r3, #8
 8005710:	d900      	bls.n	8005714 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005712:	e08e      	b.n	8005832 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_TIM_PWM_ConfigChannel+0x56>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b04      	cmp	r3, #4
 800571e:	d021      	beq.n	8005764 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005720:	e087      	b.n	8005832 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	0011      	movs	r1, r2
 800572a:	0018      	movs	r0, r3
 800572c:	f000 f9e6 	bl	8005afc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699a      	ldr	r2, [r3, #24]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2108      	movs	r1, #8
 800573c:	430a      	orrs	r2, r1
 800573e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699a      	ldr	r2, [r3, #24]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2104      	movs	r1, #4
 800574c:	438a      	bics	r2, r1
 800574e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6999      	ldr	r1, [r3, #24]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	619a      	str	r2, [r3, #24]
      break;
 8005762:	e06b      	b.n	800583c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	0011      	movs	r1, r2
 800576c:	0018      	movs	r0, r3
 800576e:	f000 fa01 	bl	8005b74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	699a      	ldr	r2, [r3, #24]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2180      	movs	r1, #128	@ 0x80
 800577e:	0109      	lsls	r1, r1, #4
 8005780:	430a      	orrs	r2, r1
 8005782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699a      	ldr	r2, [r3, #24]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4931      	ldr	r1, [pc, #196]	@ (8005854 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005790:	400a      	ands	r2, r1
 8005792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6999      	ldr	r1, [r3, #24]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	021a      	lsls	r2, r3, #8
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	619a      	str	r2, [r3, #24]
      break;
 80057a8:	e048      	b.n	800583c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	0011      	movs	r1, r2
 80057b2:	0018      	movs	r0, r3
 80057b4:	f000 fa20 	bl	8005bf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	69da      	ldr	r2, [r3, #28]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2108      	movs	r1, #8
 80057c4:	430a      	orrs	r2, r1
 80057c6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	69da      	ldr	r2, [r3, #28]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2104      	movs	r1, #4
 80057d4:	438a      	bics	r2, r1
 80057d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	69d9      	ldr	r1, [r3, #28]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	61da      	str	r2, [r3, #28]
      break;
 80057ea:	e027      	b.n	800583c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	0011      	movs	r1, r2
 80057f4:	0018      	movs	r0, r3
 80057f6:	f000 fa3f 	bl	8005c78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69da      	ldr	r2, [r3, #28]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2180      	movs	r1, #128	@ 0x80
 8005806:	0109      	lsls	r1, r1, #4
 8005808:	430a      	orrs	r2, r1
 800580a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69da      	ldr	r2, [r3, #28]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	490f      	ldr	r1, [pc, #60]	@ (8005854 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005818:	400a      	ands	r2, r1
 800581a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	69d9      	ldr	r1, [r3, #28]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	021a      	lsls	r2, r3, #8
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	61da      	str	r2, [r3, #28]
      break;
 8005830:	e004      	b.n	800583c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8005832:	2317      	movs	r3, #23
 8005834:	18fb      	adds	r3, r7, r3
 8005836:	2201      	movs	r2, #1
 8005838:	701a      	strb	r2, [r3, #0]
      break;
 800583a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2238      	movs	r2, #56	@ 0x38
 8005840:	2100      	movs	r1, #0
 8005842:	5499      	strb	r1, [r3, r2]

  return status;
 8005844:	2317      	movs	r3, #23
 8005846:	18fb      	adds	r3, r7, r3
 8005848:	781b      	ldrb	r3, [r3, #0]
}
 800584a:	0018      	movs	r0, r3
 800584c:	46bd      	mov	sp, r7
 800584e:	b006      	add	sp, #24
 8005850:	bd80      	pop	{r7, pc}
 8005852:	46c0      	nop			@ (mov r8, r8)
 8005854:	fffffbff 	.word	0xfffffbff

08005858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005862:	230f      	movs	r3, #15
 8005864:	18fb      	adds	r3, r7, r3
 8005866:	2200      	movs	r2, #0
 8005868:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2238      	movs	r2, #56	@ 0x38
 800586e:	5c9b      	ldrb	r3, [r3, r2]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_TIM_ConfigClockSource+0x20>
 8005874:	2302      	movs	r3, #2
 8005876:	e0bc      	b.n	80059f2 <HAL_TIM_ConfigClockSource+0x19a>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2238      	movs	r2, #56	@ 0x38
 800587c:	2101      	movs	r1, #1
 800587e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2239      	movs	r2, #57	@ 0x39
 8005884:	2102      	movs	r1, #2
 8005886:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2277      	movs	r2, #119	@ 0x77
 8005894:	4393      	bics	r3, r2
 8005896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4a58      	ldr	r2, [pc, #352]	@ (80059fc <HAL_TIM_ConfigClockSource+0x1a4>)
 800589c:	4013      	ands	r3, r2
 800589e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2280      	movs	r2, #128	@ 0x80
 80058ae:	0192      	lsls	r2, r2, #6
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d040      	beq.n	8005936 <HAL_TIM_ConfigClockSource+0xde>
 80058b4:	2280      	movs	r2, #128	@ 0x80
 80058b6:	0192      	lsls	r2, r2, #6
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d900      	bls.n	80058be <HAL_TIM_ConfigClockSource+0x66>
 80058bc:	e088      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
 80058be:	2280      	movs	r2, #128	@ 0x80
 80058c0:	0152      	lsls	r2, r2, #5
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d100      	bne.n	80058c8 <HAL_TIM_ConfigClockSource+0x70>
 80058c6:	e088      	b.n	80059da <HAL_TIM_ConfigClockSource+0x182>
 80058c8:	2280      	movs	r2, #128	@ 0x80
 80058ca:	0152      	lsls	r2, r2, #5
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d900      	bls.n	80058d2 <HAL_TIM_ConfigClockSource+0x7a>
 80058d0:	e07e      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
 80058d2:	2b70      	cmp	r3, #112	@ 0x70
 80058d4:	d018      	beq.n	8005908 <HAL_TIM_ConfigClockSource+0xb0>
 80058d6:	d900      	bls.n	80058da <HAL_TIM_ConfigClockSource+0x82>
 80058d8:	e07a      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
 80058da:	2b60      	cmp	r3, #96	@ 0x60
 80058dc:	d04f      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x126>
 80058de:	d900      	bls.n	80058e2 <HAL_TIM_ConfigClockSource+0x8a>
 80058e0:	e076      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
 80058e2:	2b50      	cmp	r3, #80	@ 0x50
 80058e4:	d03b      	beq.n	800595e <HAL_TIM_ConfigClockSource+0x106>
 80058e6:	d900      	bls.n	80058ea <HAL_TIM_ConfigClockSource+0x92>
 80058e8:	e072      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
 80058ea:	2b40      	cmp	r3, #64	@ 0x40
 80058ec:	d057      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x146>
 80058ee:	d900      	bls.n	80058f2 <HAL_TIM_ConfigClockSource+0x9a>
 80058f0:	e06e      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
 80058f2:	2b30      	cmp	r3, #48	@ 0x30
 80058f4:	d063      	beq.n	80059be <HAL_TIM_ConfigClockSource+0x166>
 80058f6:	d86b      	bhi.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
 80058f8:	2b20      	cmp	r3, #32
 80058fa:	d060      	beq.n	80059be <HAL_TIM_ConfigClockSource+0x166>
 80058fc:	d868      	bhi.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d05d      	beq.n	80059be <HAL_TIM_ConfigClockSource+0x166>
 8005902:	2b10      	cmp	r3, #16
 8005904:	d05b      	beq.n	80059be <HAL_TIM_ConfigClockSource+0x166>
 8005906:	e063      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005918:	f000 fa6e 	bl	8005df8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2277      	movs	r2, #119	@ 0x77
 8005928:	4313      	orrs	r3, r2
 800592a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	609a      	str	r2, [r3, #8]
      break;
 8005934:	e052      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005946:	f000 fa57 	bl	8005df8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2180      	movs	r1, #128	@ 0x80
 8005956:	01c9      	lsls	r1, r1, #7
 8005958:	430a      	orrs	r2, r1
 800595a:	609a      	str	r2, [r3, #8]
      break;
 800595c:	e03e      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800596a:	001a      	movs	r2, r3
 800596c:	f000 f9ca 	bl	8005d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2150      	movs	r1, #80	@ 0x50
 8005976:	0018      	movs	r0, r3
 8005978:	f000 fa24 	bl	8005dc4 <TIM_ITRx_SetConfig>
      break;
 800597c:	e02e      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800598a:	001a      	movs	r2, r3
 800598c:	f000 f9e8 	bl	8005d60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2160      	movs	r1, #96	@ 0x60
 8005996:	0018      	movs	r0, r3
 8005998:	f000 fa14 	bl	8005dc4 <TIM_ITRx_SetConfig>
      break;
 800599c:	e01e      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059aa:	001a      	movs	r2, r3
 80059ac:	f000 f9aa 	bl	8005d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2140      	movs	r1, #64	@ 0x40
 80059b6:	0018      	movs	r0, r3
 80059b8:	f000 fa04 	bl	8005dc4 <TIM_ITRx_SetConfig>
      break;
 80059bc:	e00e      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	0019      	movs	r1, r3
 80059c8:	0010      	movs	r0, r2
 80059ca:	f000 f9fb 	bl	8005dc4 <TIM_ITRx_SetConfig>
      break;
 80059ce:	e005      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80059d0:	230f      	movs	r3, #15
 80059d2:	18fb      	adds	r3, r7, r3
 80059d4:	2201      	movs	r2, #1
 80059d6:	701a      	strb	r2, [r3, #0]
      break;
 80059d8:	e000      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80059da:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2239      	movs	r2, #57	@ 0x39
 80059e0:	2101      	movs	r1, #1
 80059e2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2238      	movs	r2, #56	@ 0x38
 80059e8:	2100      	movs	r1, #0
 80059ea:	5499      	strb	r1, [r3, r2]

  return status;
 80059ec:	230f      	movs	r3, #15
 80059ee:	18fb      	adds	r3, r7, r3
 80059f0:	781b      	ldrb	r3, [r3, #0]
}
 80059f2:	0018      	movs	r0, r3
 80059f4:	46bd      	mov	sp, r7
 80059f6:	b004      	add	sp, #16
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	46c0      	nop			@ (mov r8, r8)
 80059fc:	ffff00ff 	.word	0xffff00ff

08005a00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a08:	46c0      	nop			@ (mov r8, r8)
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	b002      	add	sp, #8
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a18:	46c0      	nop			@ (mov r8, r8)
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	b002      	add	sp, #8
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a28:	46c0      	nop			@ (mov r8, r8)
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	b002      	add	sp, #8
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a38:	46c0      	nop			@ (mov r8, r8)
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	b002      	add	sp, #8
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	2380      	movs	r3, #128	@ 0x80
 8005a54:	05db      	lsls	r3, r3, #23
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d00b      	beq.n	8005a72 <TIM_Base_SetConfig+0x32>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a23      	ldr	r2, [pc, #140]	@ (8005aec <TIM_Base_SetConfig+0xac>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d007      	beq.n	8005a72 <TIM_Base_SetConfig+0x32>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a22      	ldr	r2, [pc, #136]	@ (8005af0 <TIM_Base_SetConfig+0xb0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d003      	beq.n	8005a72 <TIM_Base_SetConfig+0x32>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a21      	ldr	r2, [pc, #132]	@ (8005af4 <TIM_Base_SetConfig+0xb4>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d108      	bne.n	8005a84 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2270      	movs	r2, #112	@ 0x70
 8005a76:	4393      	bics	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	2380      	movs	r3, #128	@ 0x80
 8005a88:	05db      	lsls	r3, r3, #23
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d00b      	beq.n	8005aa6 <TIM_Base_SetConfig+0x66>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a16      	ldr	r2, [pc, #88]	@ (8005aec <TIM_Base_SetConfig+0xac>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d007      	beq.n	8005aa6 <TIM_Base_SetConfig+0x66>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a15      	ldr	r2, [pc, #84]	@ (8005af0 <TIM_Base_SetConfig+0xb0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d003      	beq.n	8005aa6 <TIM_Base_SetConfig+0x66>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a14      	ldr	r2, [pc, #80]	@ (8005af4 <TIM_Base_SetConfig+0xb4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d108      	bne.n	8005ab8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4a13      	ldr	r2, [pc, #76]	@ (8005af8 <TIM_Base_SetConfig+0xb8>)
 8005aaa:	4013      	ands	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2280      	movs	r2, #128	@ 0x80
 8005abc:	4393      	bics	r3, r2
 8005abe:	001a      	movs	r2, r3
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	615a      	str	r2, [r3, #20]
}
 8005ae4:	46c0      	nop			@ (mov r8, r8)
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	b004      	add	sp, #16
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	40000400 	.word	0x40000400
 8005af0:	40010800 	.word	0x40010800
 8005af4:	40011400 	.word	0x40011400
 8005af8:	fffffcff 	.word	0xfffffcff

08005afc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	4393      	bics	r3, r2
 8005b0e:	001a      	movs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2270      	movs	r2, #112	@ 0x70
 8005b2a:	4393      	bics	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2203      	movs	r2, #3
 8005b32:	4393      	bics	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	2202      	movs	r2, #2
 8005b44:	4393      	bics	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	621a      	str	r2, [r3, #32]
}
 8005b6c:	46c0      	nop			@ (mov r8, r8)
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	b006      	add	sp, #24
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	2210      	movs	r2, #16
 8005b84:	4393      	bics	r3, r2
 8005b86:	001a      	movs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4a13      	ldr	r2, [pc, #76]	@ (8005bf0 <TIM_OC2_SetConfig+0x7c>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4a12      	ldr	r2, [pc, #72]	@ (8005bf4 <TIM_OC2_SetConfig+0x80>)
 8005baa:	4013      	ands	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	021b      	lsls	r3, r3, #8
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	4393      	bics	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	621a      	str	r2, [r3, #32]
}
 8005be8:	46c0      	nop			@ (mov r8, r8)
 8005bea:	46bd      	mov	sp, r7
 8005bec:	b006      	add	sp, #24
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	ffff8fff 	.word	0xffff8fff
 8005bf4:	fffffcff 	.word	0xfffffcff

08005bf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	4a1a      	ldr	r2, [pc, #104]	@ (8005c70 <TIM_OC3_SetConfig+0x78>)
 8005c08:	401a      	ands	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2270      	movs	r2, #112	@ 0x70
 8005c24:	4393      	bics	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2203      	movs	r2, #3
 8005c2c:	4393      	bics	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8005c74 <TIM_OC3_SetConfig+0x7c>)
 8005c3e:	4013      	ands	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	021b      	lsls	r3, r3, #8
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	621a      	str	r2, [r3, #32]
}
 8005c68:	46c0      	nop			@ (mov r8, r8)
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	b006      	add	sp, #24
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	fffffeff 	.word	0xfffffeff
 8005c74:	fffffdff 	.word	0xfffffdff

08005c78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	4a1b      	ldr	r2, [pc, #108]	@ (8005cf4 <TIM_OC4_SetConfig+0x7c>)
 8005c88:	401a      	ands	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4a15      	ldr	r2, [pc, #84]	@ (8005cf8 <TIM_OC4_SetConfig+0x80>)
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4a14      	ldr	r2, [pc, #80]	@ (8005cfc <TIM_OC4_SetConfig+0x84>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	021b      	lsls	r3, r3, #8
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	4a10      	ldr	r2, [pc, #64]	@ (8005d00 <TIM_OC4_SetConfig+0x88>)
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	031b      	lsls	r3, r3, #12
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	621a      	str	r2, [r3, #32]
}
 8005cea:	46c0      	nop			@ (mov r8, r8)
 8005cec:	46bd      	mov	sp, r7
 8005cee:	b006      	add	sp, #24
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	46c0      	nop			@ (mov r8, r8)
 8005cf4:	ffffefff 	.word	0xffffefff
 8005cf8:	ffff8fff 	.word	0xffff8fff
 8005cfc:	fffffcff 	.word	0xfffffcff
 8005d00:	ffffdfff 	.word	0xffffdfff

08005d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	4393      	bics	r3, r2
 8005d1e:	001a      	movs	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	22f0      	movs	r2, #240	@ 0xf0
 8005d2e:	4393      	bics	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	220a      	movs	r2, #10
 8005d40:	4393      	bics	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	621a      	str	r2, [r3, #32]
}
 8005d58:	46c0      	nop			@ (mov r8, r8)
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	b006      	add	sp, #24
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	2210      	movs	r2, #16
 8005d72:	4393      	bics	r3, r2
 8005d74:	001a      	movs	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	4a0d      	ldr	r2, [pc, #52]	@ (8005dc0 <TIM_TI2_ConfigInputStage+0x60>)
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	031b      	lsls	r3, r3, #12
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	22a0      	movs	r2, #160	@ 0xa0
 8005d9c:	4393      	bics	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	621a      	str	r2, [r3, #32]
}
 8005db6:	46c0      	nop			@ (mov r8, r8)
 8005db8:	46bd      	mov	sp, r7
 8005dba:	b006      	add	sp, #24
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	46c0      	nop			@ (mov r8, r8)
 8005dc0:	ffff0fff 	.word	0xffff0fff

08005dc4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2270      	movs	r2, #112	@ 0x70
 8005dd8:	4393      	bics	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	2207      	movs	r2, #7
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	609a      	str	r2, [r3, #8]
}
 8005dee:	46c0      	nop			@ (mov r8, r8)
 8005df0:	46bd      	mov	sp, r7
 8005df2:	b004      	add	sp, #16
 8005df4:	bd80      	pop	{r7, pc}
	...

08005df8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	4a09      	ldr	r2, [pc, #36]	@ (8005e34 <TIM_ETR_SetConfig+0x3c>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	021a      	lsls	r2, r3, #8
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	609a      	str	r2, [r3, #8]
}
 8005e2c:	46c0      	nop			@ (mov r8, r8)
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	b006      	add	sp, #24
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	ffff00ff 	.word	0xffff00ff

08005e38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	221f      	movs	r2, #31
 8005e48:	4013      	ands	r3, r2
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	409a      	lsls	r2, r3
 8005e4e:	0013      	movs	r3, r2
 8005e50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	43d2      	mvns	r2, r2
 8005e5a:	401a      	ands	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a1a      	ldr	r2, [r3, #32]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	211f      	movs	r1, #31
 8005e68:	400b      	ands	r3, r1
 8005e6a:	6879      	ldr	r1, [r7, #4]
 8005e6c:	4099      	lsls	r1, r3
 8005e6e:	000b      	movs	r3, r1
 8005e70:	431a      	orrs	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	621a      	str	r2, [r3, #32]
}
 8005e76:	46c0      	nop			@ (mov r8, r8)
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	b006      	add	sp, #24
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2238      	movs	r2, #56	@ 0x38
 8005e8e:	5c9b      	ldrb	r3, [r3, r2]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e94:	2302      	movs	r3, #2
 8005e96:	e047      	b.n	8005f28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2238      	movs	r2, #56	@ 0x38
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2239      	movs	r2, #57	@ 0x39
 8005ea4:	2102      	movs	r1, #2
 8005ea6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2270      	movs	r2, #112	@ 0x70
 8005ebc:	4393      	bics	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	2380      	movs	r3, #128	@ 0x80
 8005ed8:	05db      	lsls	r3, r3, #23
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d00e      	beq.n	8005efc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a13      	ldr	r2, [pc, #76]	@ (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d009      	beq.n	8005efc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a11      	ldr	r2, [pc, #68]	@ (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d004      	beq.n	8005efc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a10      	ldr	r2, [pc, #64]	@ (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d10c      	bne.n	8005f16 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2280      	movs	r2, #128	@ 0x80
 8005f00:	4393      	bics	r3, r2
 8005f02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2239      	movs	r2, #57	@ 0x39
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2238      	movs	r2, #56	@ 0x38
 8005f22:	2100      	movs	r1, #0
 8005f24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	0018      	movs	r0, r3
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	b004      	add	sp, #16
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	40000400 	.word	0x40000400
 8005f34:	40010800 	.word	0x40010800
 8005f38:	40011400 	.word	0x40011400

08005f3c <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2238      	movs	r2, #56	@ 0x38
 8005f4a:	5c9b      	ldrb	r3, [r3, r2]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_TIMEx_RemapConfig+0x18>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e00c      	b.n	8005f6e <HAL_TIMEx_RemapConfig+0x32>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2238      	movs	r2, #56	@ 0x38
 8005f58:	2101      	movs	r1, #1
 8005f5a:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2238      	movs	r2, #56	@ 0x38
 8005f68:	2100      	movs	r1, #0
 8005f6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	0018      	movs	r0, r3
 8005f70:	46bd      	mov	sp, r7
 8005f72:	b002      	add	sp, #8
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e044      	b.n	8006014 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d107      	bne.n	8005fa2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2278      	movs	r2, #120	@ 0x78
 8005f96:	2100      	movs	r1, #0
 8005f98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	f7fc facb 	bl	8002538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2224      	movs	r2, #36	@ 0x24
 8005fa6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	438a      	bics	r2, r1
 8005fb6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	0018      	movs	r0, r3
 8005fbc:	f000 f8d0 	bl	8006160 <UART_SetConfig>
 8005fc0:	0003      	movs	r3, r0
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d101      	bne.n	8005fca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e024      	b.n	8006014 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	f000 fb61 	bl	800669c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	490d      	ldr	r1, [pc, #52]	@ (800601c <HAL_UART_Init+0xa4>)
 8005fe6:	400a      	ands	r2, r1
 8005fe8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	212a      	movs	r1, #42	@ 0x2a
 8005ff6:	438a      	bics	r2, r1
 8005ff8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2101      	movs	r1, #1
 8006006:	430a      	orrs	r2, r1
 8006008:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	0018      	movs	r0, r3
 800600e:	f000 fbf9 	bl	8006804 <UART_CheckIdleState>
 8006012:	0003      	movs	r3, r0
}
 8006014:	0018      	movs	r0, r3
 8006016:	46bd      	mov	sp, r7
 8006018:	b002      	add	sp, #8
 800601a:	bd80      	pop	{r7, pc}
 800601c:	ffffb7ff 	.word	0xffffb7ff

08006020 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08a      	sub	sp, #40	@ 0x28
 8006024:	af02      	add	r7, sp, #8
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	603b      	str	r3, [r7, #0]
 800602c:	1dbb      	adds	r3, r7, #6
 800602e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006034:	2b20      	cmp	r3, #32
 8006036:	d000      	beq.n	800603a <HAL_UART_Transmit+0x1a>
 8006038:	e08c      	b.n	8006154 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <HAL_UART_Transmit+0x28>
 8006040:	1dbb      	adds	r3, r7, #6
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e084      	b.n	8006156 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	2380      	movs	r3, #128	@ 0x80
 8006052:	015b      	lsls	r3, r3, #5
 8006054:	429a      	cmp	r2, r3
 8006056:	d109      	bne.n	800606c <HAL_UART_Transmit+0x4c>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d105      	bne.n	800606c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2201      	movs	r2, #1
 8006064:	4013      	ands	r3, r2
 8006066:	d001      	beq.n	800606c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e074      	b.n	8006156 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2284      	movs	r2, #132	@ 0x84
 8006070:	2100      	movs	r1, #0
 8006072:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2221      	movs	r2, #33	@ 0x21
 8006078:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800607a:	f7fc fb9d 	bl	80027b8 <HAL_GetTick>
 800607e:	0003      	movs	r3, r0
 8006080:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	1dba      	adds	r2, r7, #6
 8006086:	2150      	movs	r1, #80	@ 0x50
 8006088:	8812      	ldrh	r2, [r2, #0]
 800608a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	1dba      	adds	r2, r7, #6
 8006090:	2152      	movs	r1, #82	@ 0x52
 8006092:	8812      	ldrh	r2, [r2, #0]
 8006094:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	2380      	movs	r3, #128	@ 0x80
 800609c:	015b      	lsls	r3, r3, #5
 800609e:	429a      	cmp	r2, r3
 80060a0:	d108      	bne.n	80060b4 <HAL_UART_Transmit+0x94>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d104      	bne.n	80060b4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80060aa:	2300      	movs	r3, #0
 80060ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	61bb      	str	r3, [r7, #24]
 80060b2:	e003      	b.n	80060bc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060b8:	2300      	movs	r3, #0
 80060ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060bc:	e02f      	b.n	800611e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	0013      	movs	r3, r2
 80060c8:	2200      	movs	r2, #0
 80060ca:	2180      	movs	r1, #128	@ 0x80
 80060cc:	f000 fc42 	bl	8006954 <UART_WaitOnFlagUntilTimeout>
 80060d0:	1e03      	subs	r3, r0, #0
 80060d2:	d004      	beq.n	80060de <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2220      	movs	r2, #32
 80060d8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e03b      	b.n	8006156 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10b      	bne.n	80060fc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	001a      	movs	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	05d2      	lsls	r2, r2, #23
 80060f0:	0dd2      	lsrs	r2, r2, #23
 80060f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	3302      	adds	r3, #2
 80060f8:	61bb      	str	r3, [r7, #24]
 80060fa:	e007      	b.n	800610c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	781a      	ldrb	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	3301      	adds	r3, #1
 800610a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2252      	movs	r2, #82	@ 0x52
 8006110:	5a9b      	ldrh	r3, [r3, r2]
 8006112:	b29b      	uxth	r3, r3
 8006114:	3b01      	subs	r3, #1
 8006116:	b299      	uxth	r1, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2252      	movs	r2, #82	@ 0x52
 800611c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2252      	movs	r2, #82	@ 0x52
 8006122:	5a9b      	ldrh	r3, [r3, r2]
 8006124:	b29b      	uxth	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1c9      	bne.n	80060be <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	0013      	movs	r3, r2
 8006134:	2200      	movs	r2, #0
 8006136:	2140      	movs	r1, #64	@ 0x40
 8006138:	f000 fc0c 	bl	8006954 <UART_WaitOnFlagUntilTimeout>
 800613c:	1e03      	subs	r3, r0, #0
 800613e:	d004      	beq.n	800614a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2220      	movs	r2, #32
 8006144:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e005      	b.n	8006156 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2220      	movs	r2, #32
 800614e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	e000      	b.n	8006156 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006154:	2302      	movs	r3, #2
  }
}
 8006156:	0018      	movs	r0, r3
 8006158:	46bd      	mov	sp, r7
 800615a:	b008      	add	sp, #32
 800615c:	bd80      	pop	{r7, pc}
	...

08006160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006160:	b5b0      	push	{r4, r5, r7, lr}
 8006162:	b08e      	sub	sp, #56	@ 0x38
 8006164:	af00      	add	r7, sp, #0
 8006166:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006168:	231a      	movs	r3, #26
 800616a:	2218      	movs	r2, #24
 800616c:	189b      	adds	r3, r3, r2
 800616e:	19db      	adds	r3, r3, r7
 8006170:	2200      	movs	r2, #0
 8006172:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	431a      	orrs	r2, r3
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	431a      	orrs	r2, r3
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	4313      	orrs	r3, r2
 800618a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4ac3      	ldr	r2, [pc, #780]	@ (80064a0 <UART_SetConfig+0x340>)
 8006194:	4013      	ands	r3, r2
 8006196:	0019      	movs	r1, r3
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800619e:	430a      	orrs	r2, r1
 80061a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	4abe      	ldr	r2, [pc, #760]	@ (80064a4 <UART_SetConfig+0x344>)
 80061aa:	4013      	ands	r3, r2
 80061ac:	0019      	movs	r1, r3
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4ab8      	ldr	r2, [pc, #736]	@ (80064a8 <UART_SetConfig+0x348>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d004      	beq.n	80061d4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061d0:	4313      	orrs	r3, r2
 80061d2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	4ab4      	ldr	r2, [pc, #720]	@ (80064ac <UART_SetConfig+0x34c>)
 80061dc:	4013      	ands	r3, r2
 80061de:	0019      	movs	r1, r3
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061e6:	430a      	orrs	r2, r1
 80061e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4ab0      	ldr	r2, [pc, #704]	@ (80064b0 <UART_SetConfig+0x350>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d131      	bne.n	8006258 <UART_SetConfig+0xf8>
 80061f4:	4baf      	ldr	r3, [pc, #700]	@ (80064b4 <UART_SetConfig+0x354>)
 80061f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061f8:	2203      	movs	r2, #3
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	d01d      	beq.n	800623c <UART_SetConfig+0xdc>
 8006200:	d823      	bhi.n	800624a <UART_SetConfig+0xea>
 8006202:	2b02      	cmp	r3, #2
 8006204:	d00c      	beq.n	8006220 <UART_SetConfig+0xc0>
 8006206:	d820      	bhi.n	800624a <UART_SetConfig+0xea>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <UART_SetConfig+0xb2>
 800620c:	2b01      	cmp	r3, #1
 800620e:	d00e      	beq.n	800622e <UART_SetConfig+0xce>
 8006210:	e01b      	b.n	800624a <UART_SetConfig+0xea>
 8006212:	231b      	movs	r3, #27
 8006214:	2218      	movs	r2, #24
 8006216:	189b      	adds	r3, r3, r2
 8006218:	19db      	adds	r3, r3, r7
 800621a:	2201      	movs	r2, #1
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	e0b4      	b.n	800638a <UART_SetConfig+0x22a>
 8006220:	231b      	movs	r3, #27
 8006222:	2218      	movs	r2, #24
 8006224:	189b      	adds	r3, r3, r2
 8006226:	19db      	adds	r3, r3, r7
 8006228:	2202      	movs	r2, #2
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	e0ad      	b.n	800638a <UART_SetConfig+0x22a>
 800622e:	231b      	movs	r3, #27
 8006230:	2218      	movs	r2, #24
 8006232:	189b      	adds	r3, r3, r2
 8006234:	19db      	adds	r3, r3, r7
 8006236:	2204      	movs	r2, #4
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	e0a6      	b.n	800638a <UART_SetConfig+0x22a>
 800623c:	231b      	movs	r3, #27
 800623e:	2218      	movs	r2, #24
 8006240:	189b      	adds	r3, r3, r2
 8006242:	19db      	adds	r3, r3, r7
 8006244:	2208      	movs	r2, #8
 8006246:	701a      	strb	r2, [r3, #0]
 8006248:	e09f      	b.n	800638a <UART_SetConfig+0x22a>
 800624a:	231b      	movs	r3, #27
 800624c:	2218      	movs	r2, #24
 800624e:	189b      	adds	r3, r3, r2
 8006250:	19db      	adds	r3, r3, r7
 8006252:	2210      	movs	r2, #16
 8006254:	701a      	strb	r2, [r3, #0]
 8006256:	e098      	b.n	800638a <UART_SetConfig+0x22a>
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a96      	ldr	r2, [pc, #600]	@ (80064b8 <UART_SetConfig+0x358>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d131      	bne.n	80062c6 <UART_SetConfig+0x166>
 8006262:	4b94      	ldr	r3, [pc, #592]	@ (80064b4 <UART_SetConfig+0x354>)
 8006264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006266:	220c      	movs	r2, #12
 8006268:	4013      	ands	r3, r2
 800626a:	2b0c      	cmp	r3, #12
 800626c:	d01d      	beq.n	80062aa <UART_SetConfig+0x14a>
 800626e:	d823      	bhi.n	80062b8 <UART_SetConfig+0x158>
 8006270:	2b08      	cmp	r3, #8
 8006272:	d00c      	beq.n	800628e <UART_SetConfig+0x12e>
 8006274:	d820      	bhi.n	80062b8 <UART_SetConfig+0x158>
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <UART_SetConfig+0x120>
 800627a:	2b04      	cmp	r3, #4
 800627c:	d00e      	beq.n	800629c <UART_SetConfig+0x13c>
 800627e:	e01b      	b.n	80062b8 <UART_SetConfig+0x158>
 8006280:	231b      	movs	r3, #27
 8006282:	2218      	movs	r2, #24
 8006284:	189b      	adds	r3, r3, r2
 8006286:	19db      	adds	r3, r3, r7
 8006288:	2200      	movs	r2, #0
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	e07d      	b.n	800638a <UART_SetConfig+0x22a>
 800628e:	231b      	movs	r3, #27
 8006290:	2218      	movs	r2, #24
 8006292:	189b      	adds	r3, r3, r2
 8006294:	19db      	adds	r3, r3, r7
 8006296:	2202      	movs	r2, #2
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	e076      	b.n	800638a <UART_SetConfig+0x22a>
 800629c:	231b      	movs	r3, #27
 800629e:	2218      	movs	r2, #24
 80062a0:	189b      	adds	r3, r3, r2
 80062a2:	19db      	adds	r3, r3, r7
 80062a4:	2204      	movs	r2, #4
 80062a6:	701a      	strb	r2, [r3, #0]
 80062a8:	e06f      	b.n	800638a <UART_SetConfig+0x22a>
 80062aa:	231b      	movs	r3, #27
 80062ac:	2218      	movs	r2, #24
 80062ae:	189b      	adds	r3, r3, r2
 80062b0:	19db      	adds	r3, r3, r7
 80062b2:	2208      	movs	r2, #8
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	e068      	b.n	800638a <UART_SetConfig+0x22a>
 80062b8:	231b      	movs	r3, #27
 80062ba:	2218      	movs	r2, #24
 80062bc:	189b      	adds	r3, r3, r2
 80062be:	19db      	adds	r3, r3, r7
 80062c0:	2210      	movs	r2, #16
 80062c2:	701a      	strb	r2, [r3, #0]
 80062c4:	e061      	b.n	800638a <UART_SetConfig+0x22a>
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a7c      	ldr	r2, [pc, #496]	@ (80064bc <UART_SetConfig+0x35c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d106      	bne.n	80062de <UART_SetConfig+0x17e>
 80062d0:	231b      	movs	r3, #27
 80062d2:	2218      	movs	r2, #24
 80062d4:	189b      	adds	r3, r3, r2
 80062d6:	19db      	adds	r3, r3, r7
 80062d8:	2200      	movs	r2, #0
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	e055      	b.n	800638a <UART_SetConfig+0x22a>
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a77      	ldr	r2, [pc, #476]	@ (80064c0 <UART_SetConfig+0x360>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d106      	bne.n	80062f6 <UART_SetConfig+0x196>
 80062e8:	231b      	movs	r3, #27
 80062ea:	2218      	movs	r2, #24
 80062ec:	189b      	adds	r3, r3, r2
 80062ee:	19db      	adds	r3, r3, r7
 80062f0:	2200      	movs	r2, #0
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	e049      	b.n	800638a <UART_SetConfig+0x22a>
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a6b      	ldr	r2, [pc, #428]	@ (80064a8 <UART_SetConfig+0x348>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d13e      	bne.n	800637e <UART_SetConfig+0x21e>
 8006300:	4b6c      	ldr	r3, [pc, #432]	@ (80064b4 <UART_SetConfig+0x354>)
 8006302:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006304:	23c0      	movs	r3, #192	@ 0xc0
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	4013      	ands	r3, r2
 800630a:	22c0      	movs	r2, #192	@ 0xc0
 800630c:	0112      	lsls	r2, r2, #4
 800630e:	4293      	cmp	r3, r2
 8006310:	d027      	beq.n	8006362 <UART_SetConfig+0x202>
 8006312:	22c0      	movs	r2, #192	@ 0xc0
 8006314:	0112      	lsls	r2, r2, #4
 8006316:	4293      	cmp	r3, r2
 8006318:	d82a      	bhi.n	8006370 <UART_SetConfig+0x210>
 800631a:	2280      	movs	r2, #128	@ 0x80
 800631c:	0112      	lsls	r2, r2, #4
 800631e:	4293      	cmp	r3, r2
 8006320:	d011      	beq.n	8006346 <UART_SetConfig+0x1e6>
 8006322:	2280      	movs	r2, #128	@ 0x80
 8006324:	0112      	lsls	r2, r2, #4
 8006326:	4293      	cmp	r3, r2
 8006328:	d822      	bhi.n	8006370 <UART_SetConfig+0x210>
 800632a:	2b00      	cmp	r3, #0
 800632c:	d004      	beq.n	8006338 <UART_SetConfig+0x1d8>
 800632e:	2280      	movs	r2, #128	@ 0x80
 8006330:	00d2      	lsls	r2, r2, #3
 8006332:	4293      	cmp	r3, r2
 8006334:	d00e      	beq.n	8006354 <UART_SetConfig+0x1f4>
 8006336:	e01b      	b.n	8006370 <UART_SetConfig+0x210>
 8006338:	231b      	movs	r3, #27
 800633a:	2218      	movs	r2, #24
 800633c:	189b      	adds	r3, r3, r2
 800633e:	19db      	adds	r3, r3, r7
 8006340:	2200      	movs	r2, #0
 8006342:	701a      	strb	r2, [r3, #0]
 8006344:	e021      	b.n	800638a <UART_SetConfig+0x22a>
 8006346:	231b      	movs	r3, #27
 8006348:	2218      	movs	r2, #24
 800634a:	189b      	adds	r3, r3, r2
 800634c:	19db      	adds	r3, r3, r7
 800634e:	2202      	movs	r2, #2
 8006350:	701a      	strb	r2, [r3, #0]
 8006352:	e01a      	b.n	800638a <UART_SetConfig+0x22a>
 8006354:	231b      	movs	r3, #27
 8006356:	2218      	movs	r2, #24
 8006358:	189b      	adds	r3, r3, r2
 800635a:	19db      	adds	r3, r3, r7
 800635c:	2204      	movs	r2, #4
 800635e:	701a      	strb	r2, [r3, #0]
 8006360:	e013      	b.n	800638a <UART_SetConfig+0x22a>
 8006362:	231b      	movs	r3, #27
 8006364:	2218      	movs	r2, #24
 8006366:	189b      	adds	r3, r3, r2
 8006368:	19db      	adds	r3, r3, r7
 800636a:	2208      	movs	r2, #8
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	e00c      	b.n	800638a <UART_SetConfig+0x22a>
 8006370:	231b      	movs	r3, #27
 8006372:	2218      	movs	r2, #24
 8006374:	189b      	adds	r3, r3, r2
 8006376:	19db      	adds	r3, r3, r7
 8006378:	2210      	movs	r2, #16
 800637a:	701a      	strb	r2, [r3, #0]
 800637c:	e005      	b.n	800638a <UART_SetConfig+0x22a>
 800637e:	231b      	movs	r3, #27
 8006380:	2218      	movs	r2, #24
 8006382:	189b      	adds	r3, r3, r2
 8006384:	19db      	adds	r3, r3, r7
 8006386:	2210      	movs	r2, #16
 8006388:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a46      	ldr	r2, [pc, #280]	@ (80064a8 <UART_SetConfig+0x348>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d000      	beq.n	8006396 <UART_SetConfig+0x236>
 8006394:	e09a      	b.n	80064cc <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006396:	231b      	movs	r3, #27
 8006398:	2218      	movs	r2, #24
 800639a:	189b      	adds	r3, r3, r2
 800639c:	19db      	adds	r3, r3, r7
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d01d      	beq.n	80063e0 <UART_SetConfig+0x280>
 80063a4:	dc20      	bgt.n	80063e8 <UART_SetConfig+0x288>
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d015      	beq.n	80063d6 <UART_SetConfig+0x276>
 80063aa:	dc1d      	bgt.n	80063e8 <UART_SetConfig+0x288>
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <UART_SetConfig+0x256>
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d005      	beq.n	80063c0 <UART_SetConfig+0x260>
 80063b4:	e018      	b.n	80063e8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063b6:	f7fe fc55 	bl	8004c64 <HAL_RCC_GetPCLK1Freq>
 80063ba:	0003      	movs	r3, r0
 80063bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80063be:	e01c      	b.n	80063fa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063c0:	4b3c      	ldr	r3, [pc, #240]	@ (80064b4 <UART_SetConfig+0x354>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2210      	movs	r2, #16
 80063c6:	4013      	ands	r3, r2
 80063c8:	d002      	beq.n	80063d0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80063ca:	4b3e      	ldr	r3, [pc, #248]	@ (80064c4 <UART_SetConfig+0x364>)
 80063cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063ce:	e014      	b.n	80063fa <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80063d0:	4b3d      	ldr	r3, [pc, #244]	@ (80064c8 <UART_SetConfig+0x368>)
 80063d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80063d4:	e011      	b.n	80063fa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063d6:	f7fe fb95 	bl	8004b04 <HAL_RCC_GetSysClockFreq>
 80063da:	0003      	movs	r3, r0
 80063dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80063de:	e00c      	b.n	80063fa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063e0:	2380      	movs	r3, #128	@ 0x80
 80063e2:	021b      	lsls	r3, r3, #8
 80063e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80063e6:	e008      	b.n	80063fa <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80063ec:	231a      	movs	r3, #26
 80063ee:	2218      	movs	r2, #24
 80063f0:	189b      	adds	r3, r3, r2
 80063f2:	19db      	adds	r3, r3, r7
 80063f4:	2201      	movs	r2, #1
 80063f6:	701a      	strb	r2, [r3, #0]
        break;
 80063f8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d100      	bne.n	8006402 <UART_SetConfig+0x2a2>
 8006400:	e133      	b.n	800666a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	0013      	movs	r3, r2
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	189b      	adds	r3, r3, r2
 800640c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800640e:	429a      	cmp	r2, r3
 8006410:	d305      	bcc.n	800641e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006418:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800641a:	429a      	cmp	r2, r3
 800641c:	d906      	bls.n	800642c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800641e:	231a      	movs	r3, #26
 8006420:	2218      	movs	r2, #24
 8006422:	189b      	adds	r3, r3, r2
 8006424:	19db      	adds	r3, r3, r7
 8006426:	2201      	movs	r2, #1
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	e11e      	b.n	800666a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800642c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642e:	613b      	str	r3, [r7, #16]
 8006430:	2300      	movs	r3, #0
 8006432:	617b      	str	r3, [r7, #20]
 8006434:	6939      	ldr	r1, [r7, #16]
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	000b      	movs	r3, r1
 800643a:	0e1b      	lsrs	r3, r3, #24
 800643c:	0010      	movs	r0, r2
 800643e:	0205      	lsls	r5, r0, #8
 8006440:	431d      	orrs	r5, r3
 8006442:	000b      	movs	r3, r1
 8006444:	021c      	lsls	r4, r3, #8
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	085b      	lsrs	r3, r3, #1
 800644c:	60bb      	str	r3, [r7, #8]
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	68b8      	ldr	r0, [r7, #8]
 8006454:	68f9      	ldr	r1, [r7, #12]
 8006456:	1900      	adds	r0, r0, r4
 8006458:	4169      	adcs	r1, r5
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	603b      	str	r3, [r7, #0]
 8006460:	2300      	movs	r3, #0
 8006462:	607b      	str	r3, [r7, #4]
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f7fa f810 	bl	800048c <__aeabi_uldivmod>
 800646c:	0002      	movs	r2, r0
 800646e:	000b      	movs	r3, r1
 8006470:	0013      	movs	r3, r2
 8006472:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006474:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006476:	23c0      	movs	r3, #192	@ 0xc0
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	429a      	cmp	r2, r3
 800647c:	d309      	bcc.n	8006492 <UART_SetConfig+0x332>
 800647e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006480:	2380      	movs	r3, #128	@ 0x80
 8006482:	035b      	lsls	r3, r3, #13
 8006484:	429a      	cmp	r2, r3
 8006486:	d204      	bcs.n	8006492 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800648e:	60da      	str	r2, [r3, #12]
 8006490:	e0eb      	b.n	800666a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8006492:	231a      	movs	r3, #26
 8006494:	2218      	movs	r2, #24
 8006496:	189b      	adds	r3, r3, r2
 8006498:	19db      	adds	r3, r3, r7
 800649a:	2201      	movs	r2, #1
 800649c:	701a      	strb	r2, [r3, #0]
 800649e:	e0e4      	b.n	800666a <UART_SetConfig+0x50a>
 80064a0:	efff69f3 	.word	0xefff69f3
 80064a4:	ffffcfff 	.word	0xffffcfff
 80064a8:	40004800 	.word	0x40004800
 80064ac:	fffff4ff 	.word	0xfffff4ff
 80064b0:	40013800 	.word	0x40013800
 80064b4:	40021000 	.word	0x40021000
 80064b8:	40004400 	.word	0x40004400
 80064bc:	40004c00 	.word	0x40004c00
 80064c0:	40005000 	.word	0x40005000
 80064c4:	003d0900 	.word	0x003d0900
 80064c8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	69da      	ldr	r2, [r3, #28]
 80064d0:	2380      	movs	r3, #128	@ 0x80
 80064d2:	021b      	lsls	r3, r3, #8
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d000      	beq.n	80064da <UART_SetConfig+0x37a>
 80064d8:	e070      	b.n	80065bc <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80064da:	231b      	movs	r3, #27
 80064dc:	2218      	movs	r2, #24
 80064de:	189b      	adds	r3, r3, r2
 80064e0:	19db      	adds	r3, r3, r7
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	d822      	bhi.n	800652e <UART_SetConfig+0x3ce>
 80064e8:	009a      	lsls	r2, r3, #2
 80064ea:	4b67      	ldr	r3, [pc, #412]	@ (8006688 <UART_SetConfig+0x528>)
 80064ec:	18d3      	adds	r3, r2, r3
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064f2:	f7fe fbb7 	bl	8004c64 <HAL_RCC_GetPCLK1Freq>
 80064f6:	0003      	movs	r3, r0
 80064f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80064fa:	e021      	b.n	8006540 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064fc:	f7fe fbc8 	bl	8004c90 <HAL_RCC_GetPCLK2Freq>
 8006500:	0003      	movs	r3, r0
 8006502:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006504:	e01c      	b.n	8006540 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006506:	4b61      	ldr	r3, [pc, #388]	@ (800668c <UART_SetConfig+0x52c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2210      	movs	r2, #16
 800650c:	4013      	ands	r3, r2
 800650e:	d002      	beq.n	8006516 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006510:	4b5f      	ldr	r3, [pc, #380]	@ (8006690 <UART_SetConfig+0x530>)
 8006512:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006514:	e014      	b.n	8006540 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8006516:	4b5f      	ldr	r3, [pc, #380]	@ (8006694 <UART_SetConfig+0x534>)
 8006518:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800651a:	e011      	b.n	8006540 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800651c:	f7fe faf2 	bl	8004b04 <HAL_RCC_GetSysClockFreq>
 8006520:	0003      	movs	r3, r0
 8006522:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006524:	e00c      	b.n	8006540 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006526:	2380      	movs	r3, #128	@ 0x80
 8006528:	021b      	lsls	r3, r3, #8
 800652a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800652c:	e008      	b.n	8006540 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006532:	231a      	movs	r3, #26
 8006534:	2218      	movs	r2, #24
 8006536:	189b      	adds	r3, r3, r2
 8006538:	19db      	adds	r3, r3, r7
 800653a:	2201      	movs	r2, #1
 800653c:	701a      	strb	r2, [r3, #0]
        break;
 800653e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006542:	2b00      	cmp	r3, #0
 8006544:	d100      	bne.n	8006548 <UART_SetConfig+0x3e8>
 8006546:	e090      	b.n	800666a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800654a:	005a      	lsls	r2, r3, #1
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	085b      	lsrs	r3, r3, #1
 8006552:	18d2      	adds	r2, r2, r3
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	0019      	movs	r1, r3
 800655a:	0010      	movs	r0, r2
 800655c:	f7f9 fde6 	bl	800012c <__udivsi3>
 8006560:	0003      	movs	r3, r0
 8006562:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006566:	2b0f      	cmp	r3, #15
 8006568:	d921      	bls.n	80065ae <UART_SetConfig+0x44e>
 800656a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800656c:	2380      	movs	r3, #128	@ 0x80
 800656e:	025b      	lsls	r3, r3, #9
 8006570:	429a      	cmp	r2, r3
 8006572:	d21c      	bcs.n	80065ae <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006576:	b29a      	uxth	r2, r3
 8006578:	200e      	movs	r0, #14
 800657a:	2418      	movs	r4, #24
 800657c:	1903      	adds	r3, r0, r4
 800657e:	19db      	adds	r3, r3, r7
 8006580:	210f      	movs	r1, #15
 8006582:	438a      	bics	r2, r1
 8006584:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006588:	085b      	lsrs	r3, r3, #1
 800658a:	b29b      	uxth	r3, r3
 800658c:	2207      	movs	r2, #7
 800658e:	4013      	ands	r3, r2
 8006590:	b299      	uxth	r1, r3
 8006592:	1903      	adds	r3, r0, r4
 8006594:	19db      	adds	r3, r3, r7
 8006596:	1902      	adds	r2, r0, r4
 8006598:	19d2      	adds	r2, r2, r7
 800659a:	8812      	ldrh	r2, [r2, #0]
 800659c:	430a      	orrs	r2, r1
 800659e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	1902      	adds	r2, r0, r4
 80065a6:	19d2      	adds	r2, r2, r7
 80065a8:	8812      	ldrh	r2, [r2, #0]
 80065aa:	60da      	str	r2, [r3, #12]
 80065ac:	e05d      	b.n	800666a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80065ae:	231a      	movs	r3, #26
 80065b0:	2218      	movs	r2, #24
 80065b2:	189b      	adds	r3, r3, r2
 80065b4:	19db      	adds	r3, r3, r7
 80065b6:	2201      	movs	r2, #1
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	e056      	b.n	800666a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065bc:	231b      	movs	r3, #27
 80065be:	2218      	movs	r2, #24
 80065c0:	189b      	adds	r3, r3, r2
 80065c2:	19db      	adds	r3, r3, r7
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d822      	bhi.n	8006610 <UART_SetConfig+0x4b0>
 80065ca:	009a      	lsls	r2, r3, #2
 80065cc:	4b32      	ldr	r3, [pc, #200]	@ (8006698 <UART_SetConfig+0x538>)
 80065ce:	18d3      	adds	r3, r2, r3
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065d4:	f7fe fb46 	bl	8004c64 <HAL_RCC_GetPCLK1Freq>
 80065d8:	0003      	movs	r3, r0
 80065da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80065dc:	e021      	b.n	8006622 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065de:	f7fe fb57 	bl	8004c90 <HAL_RCC_GetPCLK2Freq>
 80065e2:	0003      	movs	r3, r0
 80065e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80065e6:	e01c      	b.n	8006622 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065e8:	4b28      	ldr	r3, [pc, #160]	@ (800668c <UART_SetConfig+0x52c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2210      	movs	r2, #16
 80065ee:	4013      	ands	r3, r2
 80065f0:	d002      	beq.n	80065f8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80065f2:	4b27      	ldr	r3, [pc, #156]	@ (8006690 <UART_SetConfig+0x530>)
 80065f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065f6:	e014      	b.n	8006622 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80065f8:	4b26      	ldr	r3, [pc, #152]	@ (8006694 <UART_SetConfig+0x534>)
 80065fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80065fc:	e011      	b.n	8006622 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065fe:	f7fe fa81 	bl	8004b04 <HAL_RCC_GetSysClockFreq>
 8006602:	0003      	movs	r3, r0
 8006604:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006606:	e00c      	b.n	8006622 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006608:	2380      	movs	r3, #128	@ 0x80
 800660a:	021b      	lsls	r3, r3, #8
 800660c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800660e:	e008      	b.n	8006622 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006614:	231a      	movs	r3, #26
 8006616:	2218      	movs	r2, #24
 8006618:	189b      	adds	r3, r3, r2
 800661a:	19db      	adds	r3, r3, r7
 800661c:	2201      	movs	r2, #1
 800661e:	701a      	strb	r2, [r3, #0]
        break;
 8006620:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006624:	2b00      	cmp	r3, #0
 8006626:	d020      	beq.n	800666a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	085a      	lsrs	r2, r3, #1
 800662e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006630:	18d2      	adds	r2, r2, r3
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	0019      	movs	r1, r3
 8006638:	0010      	movs	r0, r2
 800663a:	f7f9 fd77 	bl	800012c <__udivsi3>
 800663e:	0003      	movs	r3, r0
 8006640:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006644:	2b0f      	cmp	r3, #15
 8006646:	d90a      	bls.n	800665e <UART_SetConfig+0x4fe>
 8006648:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800664a:	2380      	movs	r3, #128	@ 0x80
 800664c:	025b      	lsls	r3, r3, #9
 800664e:	429a      	cmp	r2, r3
 8006650:	d205      	bcs.n	800665e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006654:	b29a      	uxth	r2, r3
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	60da      	str	r2, [r3, #12]
 800665c:	e005      	b.n	800666a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800665e:	231a      	movs	r3, #26
 8006660:	2218      	movs	r2, #24
 8006662:	189b      	adds	r3, r3, r2
 8006664:	19db      	adds	r3, r3, r7
 8006666:	2201      	movs	r2, #1
 8006668:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	2200      	movs	r2, #0
 800666e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	2200      	movs	r2, #0
 8006674:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006676:	231a      	movs	r3, #26
 8006678:	2218      	movs	r2, #24
 800667a:	189b      	adds	r3, r3, r2
 800667c:	19db      	adds	r3, r3, r7
 800667e:	781b      	ldrb	r3, [r3, #0]
}
 8006680:	0018      	movs	r0, r3
 8006682:	46bd      	mov	sp, r7
 8006684:	b00e      	add	sp, #56	@ 0x38
 8006686:	bdb0      	pop	{r4, r5, r7, pc}
 8006688:	080074f8 	.word	0x080074f8
 800668c:	40021000 	.word	0x40021000
 8006690:	003d0900 	.word	0x003d0900
 8006694:	00f42400 	.word	0x00f42400
 8006698:	0800751c 	.word	0x0800751c

0800669c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a8:	2201      	movs	r2, #1
 80066aa:	4013      	ands	r3, r2
 80066ac:	d00b      	beq.n	80066c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	4a4a      	ldr	r2, [pc, #296]	@ (80067e0 <UART_AdvFeatureConfig+0x144>)
 80066b6:	4013      	ands	r3, r2
 80066b8:	0019      	movs	r1, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ca:	2202      	movs	r2, #2
 80066cc:	4013      	ands	r3, r2
 80066ce:	d00b      	beq.n	80066e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	4a43      	ldr	r2, [pc, #268]	@ (80067e4 <UART_AdvFeatureConfig+0x148>)
 80066d8:	4013      	ands	r3, r2
 80066da:	0019      	movs	r1, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ec:	2204      	movs	r2, #4
 80066ee:	4013      	ands	r3, r2
 80066f0:	d00b      	beq.n	800670a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	4a3b      	ldr	r2, [pc, #236]	@ (80067e8 <UART_AdvFeatureConfig+0x14c>)
 80066fa:	4013      	ands	r3, r2
 80066fc:	0019      	movs	r1, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670e:	2208      	movs	r2, #8
 8006710:	4013      	ands	r3, r2
 8006712:	d00b      	beq.n	800672c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	4a34      	ldr	r2, [pc, #208]	@ (80067ec <UART_AdvFeatureConfig+0x150>)
 800671c:	4013      	ands	r3, r2
 800671e:	0019      	movs	r1, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006730:	2210      	movs	r2, #16
 8006732:	4013      	ands	r3, r2
 8006734:	d00b      	beq.n	800674e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	4a2c      	ldr	r2, [pc, #176]	@ (80067f0 <UART_AdvFeatureConfig+0x154>)
 800673e:	4013      	ands	r3, r2
 8006740:	0019      	movs	r1, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006752:	2220      	movs	r2, #32
 8006754:	4013      	ands	r3, r2
 8006756:	d00b      	beq.n	8006770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	4a25      	ldr	r2, [pc, #148]	@ (80067f4 <UART_AdvFeatureConfig+0x158>)
 8006760:	4013      	ands	r3, r2
 8006762:	0019      	movs	r1, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006774:	2240      	movs	r2, #64	@ 0x40
 8006776:	4013      	ands	r3, r2
 8006778:	d01d      	beq.n	80067b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	4a1d      	ldr	r2, [pc, #116]	@ (80067f8 <UART_AdvFeatureConfig+0x15c>)
 8006782:	4013      	ands	r3, r2
 8006784:	0019      	movs	r1, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006796:	2380      	movs	r3, #128	@ 0x80
 8006798:	035b      	lsls	r3, r3, #13
 800679a:	429a      	cmp	r2, r3
 800679c:	d10b      	bne.n	80067b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	4a15      	ldr	r2, [pc, #84]	@ (80067fc <UART_AdvFeatureConfig+0x160>)
 80067a6:	4013      	ands	r3, r2
 80067a8:	0019      	movs	r1, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ba:	2280      	movs	r2, #128	@ 0x80
 80067bc:	4013      	ands	r3, r2
 80067be:	d00b      	beq.n	80067d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	4a0e      	ldr	r2, [pc, #56]	@ (8006800 <UART_AdvFeatureConfig+0x164>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	0019      	movs	r1, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	605a      	str	r2, [r3, #4]
  }
}
 80067d8:	46c0      	nop			@ (mov r8, r8)
 80067da:	46bd      	mov	sp, r7
 80067dc:	b002      	add	sp, #8
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	fffdffff 	.word	0xfffdffff
 80067e4:	fffeffff 	.word	0xfffeffff
 80067e8:	fffbffff 	.word	0xfffbffff
 80067ec:	ffff7fff 	.word	0xffff7fff
 80067f0:	ffffefff 	.word	0xffffefff
 80067f4:	ffffdfff 	.word	0xffffdfff
 80067f8:	ffefffff 	.word	0xffefffff
 80067fc:	ff9fffff 	.word	0xff9fffff
 8006800:	fff7ffff 	.word	0xfff7ffff

08006804 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b092      	sub	sp, #72	@ 0x48
 8006808:	af02      	add	r7, sp, #8
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2284      	movs	r2, #132	@ 0x84
 8006810:	2100      	movs	r1, #0
 8006812:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006814:	f7fb ffd0 	bl	80027b8 <HAL_GetTick>
 8006818:	0003      	movs	r3, r0
 800681a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2208      	movs	r2, #8
 8006824:	4013      	ands	r3, r2
 8006826:	2b08      	cmp	r3, #8
 8006828:	d12c      	bne.n	8006884 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800682a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800682c:	2280      	movs	r2, #128	@ 0x80
 800682e:	0391      	lsls	r1, r2, #14
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	4a46      	ldr	r2, [pc, #280]	@ (800694c <UART_CheckIdleState+0x148>)
 8006834:	9200      	str	r2, [sp, #0]
 8006836:	2200      	movs	r2, #0
 8006838:	f000 f88c 	bl	8006954 <UART_WaitOnFlagUntilTimeout>
 800683c:	1e03      	subs	r3, r0, #0
 800683e:	d021      	beq.n	8006884 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006840:	f3ef 8310 	mrs	r3, PRIMASK
 8006844:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006848:	63bb      	str	r3, [r7, #56]	@ 0x38
 800684a:	2301      	movs	r3, #1
 800684c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800684e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006850:	f383 8810 	msr	PRIMASK, r3
}
 8006854:	46c0      	nop			@ (mov r8, r8)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2180      	movs	r1, #128	@ 0x80
 8006862:	438a      	bics	r2, r1
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006868:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800686a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686c:	f383 8810 	msr	PRIMASK, r3
}
 8006870:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2220      	movs	r2, #32
 8006876:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2278      	movs	r2, #120	@ 0x78
 800687c:	2100      	movs	r1, #0
 800687e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e05f      	b.n	8006944 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2204      	movs	r2, #4
 800688c:	4013      	ands	r3, r2
 800688e:	2b04      	cmp	r3, #4
 8006890:	d146      	bne.n	8006920 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006894:	2280      	movs	r2, #128	@ 0x80
 8006896:	03d1      	lsls	r1, r2, #15
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	4a2c      	ldr	r2, [pc, #176]	@ (800694c <UART_CheckIdleState+0x148>)
 800689c:	9200      	str	r2, [sp, #0]
 800689e:	2200      	movs	r2, #0
 80068a0:	f000 f858 	bl	8006954 <UART_WaitOnFlagUntilTimeout>
 80068a4:	1e03      	subs	r3, r0, #0
 80068a6:	d03b      	beq.n	8006920 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068a8:	f3ef 8310 	mrs	r3, PRIMASK
 80068ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80068ae:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80068b2:	2301      	movs	r3, #1
 80068b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f383 8810 	msr	PRIMASK, r3
}
 80068bc:	46c0      	nop			@ (mov r8, r8)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4921      	ldr	r1, [pc, #132]	@ (8006950 <UART_CheckIdleState+0x14c>)
 80068ca:	400a      	ands	r2, r1
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f383 8810 	msr	PRIMASK, r3
}
 80068d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068da:	f3ef 8310 	mrs	r3, PRIMASK
 80068de:	61bb      	str	r3, [r7, #24]
  return(result);
 80068e0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80068e4:	2301      	movs	r3, #1
 80068e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	f383 8810 	msr	PRIMASK, r3
}
 80068ee:	46c0      	nop			@ (mov r8, r8)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2101      	movs	r1, #1
 80068fc:	438a      	bics	r2, r1
 80068fe:	609a      	str	r2, [r3, #8]
 8006900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006902:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	f383 8810 	msr	PRIMASK, r3
}
 800690a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2280      	movs	r2, #128	@ 0x80
 8006910:	2120      	movs	r1, #32
 8006912:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2278      	movs	r2, #120	@ 0x78
 8006918:	2100      	movs	r1, #0
 800691a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e011      	b.n	8006944 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2220      	movs	r2, #32
 8006924:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2280      	movs	r2, #128	@ 0x80
 800692a:	2120      	movs	r1, #32
 800692c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2278      	movs	r2, #120	@ 0x78
 800693e:	2100      	movs	r1, #0
 8006940:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	0018      	movs	r0, r3
 8006946:	46bd      	mov	sp, r7
 8006948:	b010      	add	sp, #64	@ 0x40
 800694a:	bd80      	pop	{r7, pc}
 800694c:	01ffffff 	.word	0x01ffffff
 8006950:	fffffedf 	.word	0xfffffedf

08006954 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	603b      	str	r3, [r7, #0]
 8006960:	1dfb      	adds	r3, r7, #7
 8006962:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006964:	e04b      	b.n	80069fe <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	3301      	adds	r3, #1
 800696a:	d048      	beq.n	80069fe <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800696c:	f7fb ff24 	bl	80027b8 <HAL_GetTick>
 8006970:	0002      	movs	r2, r0
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	429a      	cmp	r2, r3
 800697a:	d302      	bcc.n	8006982 <UART_WaitOnFlagUntilTimeout+0x2e>
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e04b      	b.n	8006a1e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2204      	movs	r2, #4
 800698e:	4013      	ands	r3, r2
 8006990:	d035      	beq.n	80069fe <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	2208      	movs	r2, #8
 800699a:	4013      	ands	r3, r2
 800699c:	2b08      	cmp	r3, #8
 800699e:	d111      	bne.n	80069c4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2208      	movs	r2, #8
 80069a6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	0018      	movs	r0, r3
 80069ac:	f000 f83c 	bl	8006a28 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2284      	movs	r2, #132	@ 0x84
 80069b4:	2108      	movs	r1, #8
 80069b6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2278      	movs	r2, #120	@ 0x78
 80069bc:	2100      	movs	r1, #0
 80069be:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e02c      	b.n	8006a1e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	69da      	ldr	r2, [r3, #28]
 80069ca:	2380      	movs	r3, #128	@ 0x80
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	401a      	ands	r2, r3
 80069d0:	2380      	movs	r3, #128	@ 0x80
 80069d2:	011b      	lsls	r3, r3, #4
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d112      	bne.n	80069fe <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2280      	movs	r2, #128	@ 0x80
 80069de:	0112      	lsls	r2, r2, #4
 80069e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	0018      	movs	r0, r3
 80069e6:	f000 f81f 	bl	8006a28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2284      	movs	r2, #132	@ 0x84
 80069ee:	2120      	movs	r1, #32
 80069f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2278      	movs	r2, #120	@ 0x78
 80069f6:	2100      	movs	r1, #0
 80069f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e00f      	b.n	8006a1e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	4013      	ands	r3, r2
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	425a      	negs	r2, r3
 8006a0e:	4153      	adcs	r3, r2
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	001a      	movs	r2, r3
 8006a14:	1dfb      	adds	r3, r7, #7
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d0a4      	beq.n	8006966 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	0018      	movs	r0, r3
 8006a20:	46bd      	mov	sp, r7
 8006a22:	b004      	add	sp, #16
 8006a24:	bd80      	pop	{r7, pc}
	...

08006a28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08e      	sub	sp, #56	@ 0x38
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a30:	f3ef 8310 	mrs	r3, PRIMASK
 8006a34:	617b      	str	r3, [r7, #20]
  return(result);
 8006a36:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	f383 8810 	msr	PRIMASK, r3
}
 8006a44:	46c0      	nop			@ (mov r8, r8)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4926      	ldr	r1, [pc, #152]	@ (8006aec <UART_EndRxTransfer+0xc4>)
 8006a52:	400a      	ands	r2, r1
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	f383 8810 	msr	PRIMASK, r3
}
 8006a60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a62:	f3ef 8310 	mrs	r3, PRIMASK
 8006a66:	623b      	str	r3, [r7, #32]
  return(result);
 8006a68:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a72:	f383 8810 	msr	PRIMASK, r3
}
 8006a76:	46c0      	nop			@ (mov r8, r8)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689a      	ldr	r2, [r3, #8]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2101      	movs	r1, #1
 8006a84:	438a      	bics	r2, r1
 8006a86:	609a      	str	r2, [r3, #8]
 8006a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8e:	f383 8810 	msr	PRIMASK, r3
}
 8006a92:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d118      	bne.n	8006ace <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006aa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f383 8810 	msr	PRIMASK, r3
}
 8006ab0:	46c0      	nop			@ (mov r8, r8)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2110      	movs	r1, #16
 8006abe:	438a      	bics	r2, r1
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f383 8810 	msr	PRIMASK, r3
}
 8006acc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2280      	movs	r2, #128	@ 0x80
 8006ad2:	2120      	movs	r1, #32
 8006ad4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006ae2:	46c0      	nop			@ (mov r8, r8)
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	b00e      	add	sp, #56	@ 0x38
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	46c0      	nop			@ (mov r8, r8)
 8006aec:	fffffedf 	.word	0xfffffedf

08006af0 <sniprintf>:
 8006af0:	b40c      	push	{r2, r3}
 8006af2:	b530      	push	{r4, r5, lr}
 8006af4:	4b17      	ldr	r3, [pc, #92]	@ (8006b54 <sniprintf+0x64>)
 8006af6:	000c      	movs	r4, r1
 8006af8:	681d      	ldr	r5, [r3, #0]
 8006afa:	b09d      	sub	sp, #116	@ 0x74
 8006afc:	2900      	cmp	r1, #0
 8006afe:	da08      	bge.n	8006b12 <sniprintf+0x22>
 8006b00:	238b      	movs	r3, #139	@ 0x8b
 8006b02:	2001      	movs	r0, #1
 8006b04:	602b      	str	r3, [r5, #0]
 8006b06:	4240      	negs	r0, r0
 8006b08:	b01d      	add	sp, #116	@ 0x74
 8006b0a:	bc30      	pop	{r4, r5}
 8006b0c:	bc08      	pop	{r3}
 8006b0e:	b002      	add	sp, #8
 8006b10:	4718      	bx	r3
 8006b12:	2382      	movs	r3, #130	@ 0x82
 8006b14:	466a      	mov	r2, sp
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	8293      	strh	r3, [r2, #20]
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	9002      	str	r0, [sp, #8]
 8006b1e:	9006      	str	r0, [sp, #24]
 8006b20:	4299      	cmp	r1, r3
 8006b22:	d000      	beq.n	8006b26 <sniprintf+0x36>
 8006b24:	1e4b      	subs	r3, r1, #1
 8006b26:	9304      	str	r3, [sp, #16]
 8006b28:	9307      	str	r3, [sp, #28]
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	466a      	mov	r2, sp
 8006b2e:	425b      	negs	r3, r3
 8006b30:	82d3      	strh	r3, [r2, #22]
 8006b32:	0028      	movs	r0, r5
 8006b34:	ab21      	add	r3, sp, #132	@ 0x84
 8006b36:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006b38:	a902      	add	r1, sp, #8
 8006b3a:	9301      	str	r3, [sp, #4]
 8006b3c:	f000 f99c 	bl	8006e78 <_svfiprintf_r>
 8006b40:	1c43      	adds	r3, r0, #1
 8006b42:	da01      	bge.n	8006b48 <sniprintf+0x58>
 8006b44:	238b      	movs	r3, #139	@ 0x8b
 8006b46:	602b      	str	r3, [r5, #0]
 8006b48:	2c00      	cmp	r4, #0
 8006b4a:	d0dd      	beq.n	8006b08 <sniprintf+0x18>
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	9b02      	ldr	r3, [sp, #8]
 8006b50:	701a      	strb	r2, [r3, #0]
 8006b52:	e7d9      	b.n	8006b08 <sniprintf+0x18>
 8006b54:	2000000c 	.word	0x2000000c

08006b58 <memset>:
 8006b58:	0003      	movs	r3, r0
 8006b5a:	1882      	adds	r2, r0, r2
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d100      	bne.n	8006b62 <memset+0xa>
 8006b60:	4770      	bx	lr
 8006b62:	7019      	strb	r1, [r3, #0]
 8006b64:	3301      	adds	r3, #1
 8006b66:	e7f9      	b.n	8006b5c <memset+0x4>

08006b68 <__errno>:
 8006b68:	4b01      	ldr	r3, [pc, #4]	@ (8006b70 <__errno+0x8>)
 8006b6a:	6818      	ldr	r0, [r3, #0]
 8006b6c:	4770      	bx	lr
 8006b6e:	46c0      	nop			@ (mov r8, r8)
 8006b70:	2000000c 	.word	0x2000000c

08006b74 <__libc_init_array>:
 8006b74:	b570      	push	{r4, r5, r6, lr}
 8006b76:	2600      	movs	r6, #0
 8006b78:	4c0c      	ldr	r4, [pc, #48]	@ (8006bac <__libc_init_array+0x38>)
 8006b7a:	4d0d      	ldr	r5, [pc, #52]	@ (8006bb0 <__libc_init_array+0x3c>)
 8006b7c:	1b64      	subs	r4, r4, r5
 8006b7e:	10a4      	asrs	r4, r4, #2
 8006b80:	42a6      	cmp	r6, r4
 8006b82:	d109      	bne.n	8006b98 <__libc_init_array+0x24>
 8006b84:	2600      	movs	r6, #0
 8006b86:	f000 fc65 	bl	8007454 <_init>
 8006b8a:	4c0a      	ldr	r4, [pc, #40]	@ (8006bb4 <__libc_init_array+0x40>)
 8006b8c:	4d0a      	ldr	r5, [pc, #40]	@ (8006bb8 <__libc_init_array+0x44>)
 8006b8e:	1b64      	subs	r4, r4, r5
 8006b90:	10a4      	asrs	r4, r4, #2
 8006b92:	42a6      	cmp	r6, r4
 8006b94:	d105      	bne.n	8006ba2 <__libc_init_array+0x2e>
 8006b96:	bd70      	pop	{r4, r5, r6, pc}
 8006b98:	00b3      	lsls	r3, r6, #2
 8006b9a:	58eb      	ldr	r3, [r5, r3]
 8006b9c:	4798      	blx	r3
 8006b9e:	3601      	adds	r6, #1
 8006ba0:	e7ee      	b.n	8006b80 <__libc_init_array+0xc>
 8006ba2:	00b3      	lsls	r3, r6, #2
 8006ba4:	58eb      	ldr	r3, [r5, r3]
 8006ba6:	4798      	blx	r3
 8006ba8:	3601      	adds	r6, #1
 8006baa:	e7f2      	b.n	8006b92 <__libc_init_array+0x1e>
 8006bac:	0800757c 	.word	0x0800757c
 8006bb0:	0800757c 	.word	0x0800757c
 8006bb4:	08007580 	.word	0x08007580
 8006bb8:	0800757c 	.word	0x0800757c

08006bbc <__retarget_lock_acquire_recursive>:
 8006bbc:	4770      	bx	lr

08006bbe <__retarget_lock_release_recursive>:
 8006bbe:	4770      	bx	lr

08006bc0 <_free_r>:
 8006bc0:	b570      	push	{r4, r5, r6, lr}
 8006bc2:	0005      	movs	r5, r0
 8006bc4:	1e0c      	subs	r4, r1, #0
 8006bc6:	d010      	beq.n	8006bea <_free_r+0x2a>
 8006bc8:	3c04      	subs	r4, #4
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	da00      	bge.n	8006bd2 <_free_r+0x12>
 8006bd0:	18e4      	adds	r4, r4, r3
 8006bd2:	0028      	movs	r0, r5
 8006bd4:	f000 f8e0 	bl	8006d98 <__malloc_lock>
 8006bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c50 <_free_r+0x90>)
 8006bda:	6813      	ldr	r3, [r2, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d105      	bne.n	8006bec <_free_r+0x2c>
 8006be0:	6063      	str	r3, [r4, #4]
 8006be2:	6014      	str	r4, [r2, #0]
 8006be4:	0028      	movs	r0, r5
 8006be6:	f000 f8df 	bl	8006da8 <__malloc_unlock>
 8006bea:	bd70      	pop	{r4, r5, r6, pc}
 8006bec:	42a3      	cmp	r3, r4
 8006bee:	d908      	bls.n	8006c02 <_free_r+0x42>
 8006bf0:	6820      	ldr	r0, [r4, #0]
 8006bf2:	1821      	adds	r1, r4, r0
 8006bf4:	428b      	cmp	r3, r1
 8006bf6:	d1f3      	bne.n	8006be0 <_free_r+0x20>
 8006bf8:	6819      	ldr	r1, [r3, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	1809      	adds	r1, r1, r0
 8006bfe:	6021      	str	r1, [r4, #0]
 8006c00:	e7ee      	b.n	8006be0 <_free_r+0x20>
 8006c02:	001a      	movs	r2, r3
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <_free_r+0x4e>
 8006c0a:	42a3      	cmp	r3, r4
 8006c0c:	d9f9      	bls.n	8006c02 <_free_r+0x42>
 8006c0e:	6811      	ldr	r1, [r2, #0]
 8006c10:	1850      	adds	r0, r2, r1
 8006c12:	42a0      	cmp	r0, r4
 8006c14:	d10b      	bne.n	8006c2e <_free_r+0x6e>
 8006c16:	6820      	ldr	r0, [r4, #0]
 8006c18:	1809      	adds	r1, r1, r0
 8006c1a:	1850      	adds	r0, r2, r1
 8006c1c:	6011      	str	r1, [r2, #0]
 8006c1e:	4283      	cmp	r3, r0
 8006c20:	d1e0      	bne.n	8006be4 <_free_r+0x24>
 8006c22:	6818      	ldr	r0, [r3, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	1841      	adds	r1, r0, r1
 8006c28:	6011      	str	r1, [r2, #0]
 8006c2a:	6053      	str	r3, [r2, #4]
 8006c2c:	e7da      	b.n	8006be4 <_free_r+0x24>
 8006c2e:	42a0      	cmp	r0, r4
 8006c30:	d902      	bls.n	8006c38 <_free_r+0x78>
 8006c32:	230c      	movs	r3, #12
 8006c34:	602b      	str	r3, [r5, #0]
 8006c36:	e7d5      	b.n	8006be4 <_free_r+0x24>
 8006c38:	6820      	ldr	r0, [r4, #0]
 8006c3a:	1821      	adds	r1, r4, r0
 8006c3c:	428b      	cmp	r3, r1
 8006c3e:	d103      	bne.n	8006c48 <_free_r+0x88>
 8006c40:	6819      	ldr	r1, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	1809      	adds	r1, r1, r0
 8006c46:	6021      	str	r1, [r4, #0]
 8006c48:	6063      	str	r3, [r4, #4]
 8006c4a:	6054      	str	r4, [r2, #4]
 8006c4c:	e7ca      	b.n	8006be4 <_free_r+0x24>
 8006c4e:	46c0      	nop			@ (mov r8, r8)
 8006c50:	200004c8 	.word	0x200004c8

08006c54 <sbrk_aligned>:
 8006c54:	b570      	push	{r4, r5, r6, lr}
 8006c56:	4e0f      	ldr	r6, [pc, #60]	@ (8006c94 <sbrk_aligned+0x40>)
 8006c58:	000d      	movs	r5, r1
 8006c5a:	6831      	ldr	r1, [r6, #0]
 8006c5c:	0004      	movs	r4, r0
 8006c5e:	2900      	cmp	r1, #0
 8006c60:	d102      	bne.n	8006c68 <sbrk_aligned+0x14>
 8006c62:	f000 fb99 	bl	8007398 <_sbrk_r>
 8006c66:	6030      	str	r0, [r6, #0]
 8006c68:	0029      	movs	r1, r5
 8006c6a:	0020      	movs	r0, r4
 8006c6c:	f000 fb94 	bl	8007398 <_sbrk_r>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d103      	bne.n	8006c7c <sbrk_aligned+0x28>
 8006c74:	2501      	movs	r5, #1
 8006c76:	426d      	negs	r5, r5
 8006c78:	0028      	movs	r0, r5
 8006c7a:	bd70      	pop	{r4, r5, r6, pc}
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	1cc5      	adds	r5, r0, #3
 8006c80:	439d      	bics	r5, r3
 8006c82:	42a8      	cmp	r0, r5
 8006c84:	d0f8      	beq.n	8006c78 <sbrk_aligned+0x24>
 8006c86:	1a29      	subs	r1, r5, r0
 8006c88:	0020      	movs	r0, r4
 8006c8a:	f000 fb85 	bl	8007398 <_sbrk_r>
 8006c8e:	3001      	adds	r0, #1
 8006c90:	d1f2      	bne.n	8006c78 <sbrk_aligned+0x24>
 8006c92:	e7ef      	b.n	8006c74 <sbrk_aligned+0x20>
 8006c94:	200004c4 	.word	0x200004c4

08006c98 <_malloc_r>:
 8006c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c9a:	2203      	movs	r2, #3
 8006c9c:	1ccb      	adds	r3, r1, #3
 8006c9e:	4393      	bics	r3, r2
 8006ca0:	3308      	adds	r3, #8
 8006ca2:	0005      	movs	r5, r0
 8006ca4:	001f      	movs	r7, r3
 8006ca6:	2b0c      	cmp	r3, #12
 8006ca8:	d234      	bcs.n	8006d14 <_malloc_r+0x7c>
 8006caa:	270c      	movs	r7, #12
 8006cac:	42b9      	cmp	r1, r7
 8006cae:	d833      	bhi.n	8006d18 <_malloc_r+0x80>
 8006cb0:	0028      	movs	r0, r5
 8006cb2:	f000 f871 	bl	8006d98 <__malloc_lock>
 8006cb6:	4e37      	ldr	r6, [pc, #220]	@ (8006d94 <_malloc_r+0xfc>)
 8006cb8:	6833      	ldr	r3, [r6, #0]
 8006cba:	001c      	movs	r4, r3
 8006cbc:	2c00      	cmp	r4, #0
 8006cbe:	d12f      	bne.n	8006d20 <_malloc_r+0x88>
 8006cc0:	0039      	movs	r1, r7
 8006cc2:	0028      	movs	r0, r5
 8006cc4:	f7ff ffc6 	bl	8006c54 <sbrk_aligned>
 8006cc8:	0004      	movs	r4, r0
 8006cca:	1c43      	adds	r3, r0, #1
 8006ccc:	d15f      	bne.n	8006d8e <_malloc_r+0xf6>
 8006cce:	6834      	ldr	r4, [r6, #0]
 8006cd0:	9400      	str	r4, [sp, #0]
 8006cd2:	9b00      	ldr	r3, [sp, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d14a      	bne.n	8006d6e <_malloc_r+0xd6>
 8006cd8:	2c00      	cmp	r4, #0
 8006cda:	d052      	beq.n	8006d82 <_malloc_r+0xea>
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	0028      	movs	r0, r5
 8006ce0:	18e3      	adds	r3, r4, r3
 8006ce2:	9900      	ldr	r1, [sp, #0]
 8006ce4:	9301      	str	r3, [sp, #4]
 8006ce6:	f000 fb57 	bl	8007398 <_sbrk_r>
 8006cea:	9b01      	ldr	r3, [sp, #4]
 8006cec:	4283      	cmp	r3, r0
 8006cee:	d148      	bne.n	8006d82 <_malloc_r+0xea>
 8006cf0:	6823      	ldr	r3, [r4, #0]
 8006cf2:	0028      	movs	r0, r5
 8006cf4:	1aff      	subs	r7, r7, r3
 8006cf6:	0039      	movs	r1, r7
 8006cf8:	f7ff ffac 	bl	8006c54 <sbrk_aligned>
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	d040      	beq.n	8006d82 <_malloc_r+0xea>
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	19db      	adds	r3, r3, r7
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	6833      	ldr	r3, [r6, #0]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	2a00      	cmp	r2, #0
 8006d0c:	d133      	bne.n	8006d76 <_malloc_r+0xde>
 8006d0e:	9b00      	ldr	r3, [sp, #0]
 8006d10:	6033      	str	r3, [r6, #0]
 8006d12:	e019      	b.n	8006d48 <_malloc_r+0xb0>
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	dac9      	bge.n	8006cac <_malloc_r+0x14>
 8006d18:	230c      	movs	r3, #12
 8006d1a:	602b      	str	r3, [r5, #0]
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d20:	6821      	ldr	r1, [r4, #0]
 8006d22:	1bc9      	subs	r1, r1, r7
 8006d24:	d420      	bmi.n	8006d68 <_malloc_r+0xd0>
 8006d26:	290b      	cmp	r1, #11
 8006d28:	d90a      	bls.n	8006d40 <_malloc_r+0xa8>
 8006d2a:	19e2      	adds	r2, r4, r7
 8006d2c:	6027      	str	r7, [r4, #0]
 8006d2e:	42a3      	cmp	r3, r4
 8006d30:	d104      	bne.n	8006d3c <_malloc_r+0xa4>
 8006d32:	6032      	str	r2, [r6, #0]
 8006d34:	6863      	ldr	r3, [r4, #4]
 8006d36:	6011      	str	r1, [r2, #0]
 8006d38:	6053      	str	r3, [r2, #4]
 8006d3a:	e005      	b.n	8006d48 <_malloc_r+0xb0>
 8006d3c:	605a      	str	r2, [r3, #4]
 8006d3e:	e7f9      	b.n	8006d34 <_malloc_r+0x9c>
 8006d40:	6862      	ldr	r2, [r4, #4]
 8006d42:	42a3      	cmp	r3, r4
 8006d44:	d10e      	bne.n	8006d64 <_malloc_r+0xcc>
 8006d46:	6032      	str	r2, [r6, #0]
 8006d48:	0028      	movs	r0, r5
 8006d4a:	f000 f82d 	bl	8006da8 <__malloc_unlock>
 8006d4e:	0020      	movs	r0, r4
 8006d50:	2207      	movs	r2, #7
 8006d52:	300b      	adds	r0, #11
 8006d54:	1d23      	adds	r3, r4, #4
 8006d56:	4390      	bics	r0, r2
 8006d58:	1ac2      	subs	r2, r0, r3
 8006d5a:	4298      	cmp	r0, r3
 8006d5c:	d0df      	beq.n	8006d1e <_malloc_r+0x86>
 8006d5e:	1a1b      	subs	r3, r3, r0
 8006d60:	50a3      	str	r3, [r4, r2]
 8006d62:	e7dc      	b.n	8006d1e <_malloc_r+0x86>
 8006d64:	605a      	str	r2, [r3, #4]
 8006d66:	e7ef      	b.n	8006d48 <_malloc_r+0xb0>
 8006d68:	0023      	movs	r3, r4
 8006d6a:	6864      	ldr	r4, [r4, #4]
 8006d6c:	e7a6      	b.n	8006cbc <_malloc_r+0x24>
 8006d6e:	9c00      	ldr	r4, [sp, #0]
 8006d70:	6863      	ldr	r3, [r4, #4]
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	e7ad      	b.n	8006cd2 <_malloc_r+0x3a>
 8006d76:	001a      	movs	r2, r3
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	42a3      	cmp	r3, r4
 8006d7c:	d1fb      	bne.n	8006d76 <_malloc_r+0xde>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	e7da      	b.n	8006d38 <_malloc_r+0xa0>
 8006d82:	230c      	movs	r3, #12
 8006d84:	0028      	movs	r0, r5
 8006d86:	602b      	str	r3, [r5, #0]
 8006d88:	f000 f80e 	bl	8006da8 <__malloc_unlock>
 8006d8c:	e7c6      	b.n	8006d1c <_malloc_r+0x84>
 8006d8e:	6007      	str	r7, [r0, #0]
 8006d90:	e7da      	b.n	8006d48 <_malloc_r+0xb0>
 8006d92:	46c0      	nop			@ (mov r8, r8)
 8006d94:	200004c8 	.word	0x200004c8

08006d98 <__malloc_lock>:
 8006d98:	b510      	push	{r4, lr}
 8006d9a:	4802      	ldr	r0, [pc, #8]	@ (8006da4 <__malloc_lock+0xc>)
 8006d9c:	f7ff ff0e 	bl	8006bbc <__retarget_lock_acquire_recursive>
 8006da0:	bd10      	pop	{r4, pc}
 8006da2:	46c0      	nop			@ (mov r8, r8)
 8006da4:	200004c0 	.word	0x200004c0

08006da8 <__malloc_unlock>:
 8006da8:	b510      	push	{r4, lr}
 8006daa:	4802      	ldr	r0, [pc, #8]	@ (8006db4 <__malloc_unlock+0xc>)
 8006dac:	f7ff ff07 	bl	8006bbe <__retarget_lock_release_recursive>
 8006db0:	bd10      	pop	{r4, pc}
 8006db2:	46c0      	nop			@ (mov r8, r8)
 8006db4:	200004c0 	.word	0x200004c0

08006db8 <__ssputs_r>:
 8006db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dba:	688e      	ldr	r6, [r1, #8]
 8006dbc:	b085      	sub	sp, #20
 8006dbe:	001f      	movs	r7, r3
 8006dc0:	000c      	movs	r4, r1
 8006dc2:	680b      	ldr	r3, [r1, #0]
 8006dc4:	9002      	str	r0, [sp, #8]
 8006dc6:	9203      	str	r2, [sp, #12]
 8006dc8:	42be      	cmp	r6, r7
 8006dca:	d830      	bhi.n	8006e2e <__ssputs_r+0x76>
 8006dcc:	210c      	movs	r1, #12
 8006dce:	5e62      	ldrsh	r2, [r4, r1]
 8006dd0:	2190      	movs	r1, #144	@ 0x90
 8006dd2:	00c9      	lsls	r1, r1, #3
 8006dd4:	420a      	tst	r2, r1
 8006dd6:	d028      	beq.n	8006e2a <__ssputs_r+0x72>
 8006dd8:	2003      	movs	r0, #3
 8006dda:	6921      	ldr	r1, [r4, #16]
 8006ddc:	1a5b      	subs	r3, r3, r1
 8006dde:	9301      	str	r3, [sp, #4]
 8006de0:	6963      	ldr	r3, [r4, #20]
 8006de2:	4343      	muls	r3, r0
 8006de4:	9801      	ldr	r0, [sp, #4]
 8006de6:	0fdd      	lsrs	r5, r3, #31
 8006de8:	18ed      	adds	r5, r5, r3
 8006dea:	1c7b      	adds	r3, r7, #1
 8006dec:	181b      	adds	r3, r3, r0
 8006dee:	106d      	asrs	r5, r5, #1
 8006df0:	42ab      	cmp	r3, r5
 8006df2:	d900      	bls.n	8006df6 <__ssputs_r+0x3e>
 8006df4:	001d      	movs	r5, r3
 8006df6:	0552      	lsls	r2, r2, #21
 8006df8:	d528      	bpl.n	8006e4c <__ssputs_r+0x94>
 8006dfa:	0029      	movs	r1, r5
 8006dfc:	9802      	ldr	r0, [sp, #8]
 8006dfe:	f7ff ff4b 	bl	8006c98 <_malloc_r>
 8006e02:	1e06      	subs	r6, r0, #0
 8006e04:	d02c      	beq.n	8006e60 <__ssputs_r+0xa8>
 8006e06:	9a01      	ldr	r2, [sp, #4]
 8006e08:	6921      	ldr	r1, [r4, #16]
 8006e0a:	f000 fae2 	bl	80073d2 <memcpy>
 8006e0e:	89a2      	ldrh	r2, [r4, #12]
 8006e10:	4b18      	ldr	r3, [pc, #96]	@ (8006e74 <__ssputs_r+0xbc>)
 8006e12:	401a      	ands	r2, r3
 8006e14:	2380      	movs	r3, #128	@ 0x80
 8006e16:	4313      	orrs	r3, r2
 8006e18:	81a3      	strh	r3, [r4, #12]
 8006e1a:	9b01      	ldr	r3, [sp, #4]
 8006e1c:	6126      	str	r6, [r4, #16]
 8006e1e:	18f6      	adds	r6, r6, r3
 8006e20:	6026      	str	r6, [r4, #0]
 8006e22:	003e      	movs	r6, r7
 8006e24:	6165      	str	r5, [r4, #20]
 8006e26:	1aed      	subs	r5, r5, r3
 8006e28:	60a5      	str	r5, [r4, #8]
 8006e2a:	42be      	cmp	r6, r7
 8006e2c:	d900      	bls.n	8006e30 <__ssputs_r+0x78>
 8006e2e:	003e      	movs	r6, r7
 8006e30:	0032      	movs	r2, r6
 8006e32:	9903      	ldr	r1, [sp, #12]
 8006e34:	6820      	ldr	r0, [r4, #0]
 8006e36:	f000 fa9b 	bl	8007370 <memmove>
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	68a3      	ldr	r3, [r4, #8]
 8006e3e:	1b9b      	subs	r3, r3, r6
 8006e40:	60a3      	str	r3, [r4, #8]
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	199b      	adds	r3, r3, r6
 8006e46:	6023      	str	r3, [r4, #0]
 8006e48:	b005      	add	sp, #20
 8006e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e4c:	002a      	movs	r2, r5
 8006e4e:	9802      	ldr	r0, [sp, #8]
 8006e50:	f000 fac8 	bl	80073e4 <_realloc_r>
 8006e54:	1e06      	subs	r6, r0, #0
 8006e56:	d1e0      	bne.n	8006e1a <__ssputs_r+0x62>
 8006e58:	6921      	ldr	r1, [r4, #16]
 8006e5a:	9802      	ldr	r0, [sp, #8]
 8006e5c:	f7ff feb0 	bl	8006bc0 <_free_r>
 8006e60:	230c      	movs	r3, #12
 8006e62:	2001      	movs	r0, #1
 8006e64:	9a02      	ldr	r2, [sp, #8]
 8006e66:	4240      	negs	r0, r0
 8006e68:	6013      	str	r3, [r2, #0]
 8006e6a:	89a2      	ldrh	r2, [r4, #12]
 8006e6c:	3334      	adds	r3, #52	@ 0x34
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	81a3      	strh	r3, [r4, #12]
 8006e72:	e7e9      	b.n	8006e48 <__ssputs_r+0x90>
 8006e74:	fffffb7f 	.word	0xfffffb7f

08006e78 <_svfiprintf_r>:
 8006e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e7a:	b0a1      	sub	sp, #132	@ 0x84
 8006e7c:	9003      	str	r0, [sp, #12]
 8006e7e:	001d      	movs	r5, r3
 8006e80:	898b      	ldrh	r3, [r1, #12]
 8006e82:	000f      	movs	r7, r1
 8006e84:	0016      	movs	r6, r2
 8006e86:	061b      	lsls	r3, r3, #24
 8006e88:	d511      	bpl.n	8006eae <_svfiprintf_r+0x36>
 8006e8a:	690b      	ldr	r3, [r1, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10e      	bne.n	8006eae <_svfiprintf_r+0x36>
 8006e90:	2140      	movs	r1, #64	@ 0x40
 8006e92:	f7ff ff01 	bl	8006c98 <_malloc_r>
 8006e96:	6038      	str	r0, [r7, #0]
 8006e98:	6138      	str	r0, [r7, #16]
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	d105      	bne.n	8006eaa <_svfiprintf_r+0x32>
 8006e9e:	230c      	movs	r3, #12
 8006ea0:	9a03      	ldr	r2, [sp, #12]
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	2001      	movs	r0, #1
 8006ea6:	4240      	negs	r0, r0
 8006ea8:	e0cf      	b.n	800704a <_svfiprintf_r+0x1d2>
 8006eaa:	2340      	movs	r3, #64	@ 0x40
 8006eac:	617b      	str	r3, [r7, #20]
 8006eae:	2300      	movs	r3, #0
 8006eb0:	ac08      	add	r4, sp, #32
 8006eb2:	6163      	str	r3, [r4, #20]
 8006eb4:	3320      	adds	r3, #32
 8006eb6:	7663      	strb	r3, [r4, #25]
 8006eb8:	3310      	adds	r3, #16
 8006eba:	76a3      	strb	r3, [r4, #26]
 8006ebc:	9507      	str	r5, [sp, #28]
 8006ebe:	0035      	movs	r5, r6
 8006ec0:	782b      	ldrb	r3, [r5, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <_svfiprintf_r+0x52>
 8006ec6:	2b25      	cmp	r3, #37	@ 0x25
 8006ec8:	d148      	bne.n	8006f5c <_svfiprintf_r+0xe4>
 8006eca:	1bab      	subs	r3, r5, r6
 8006ecc:	9305      	str	r3, [sp, #20]
 8006ece:	42b5      	cmp	r5, r6
 8006ed0:	d00b      	beq.n	8006eea <_svfiprintf_r+0x72>
 8006ed2:	0032      	movs	r2, r6
 8006ed4:	0039      	movs	r1, r7
 8006ed6:	9803      	ldr	r0, [sp, #12]
 8006ed8:	f7ff ff6e 	bl	8006db8 <__ssputs_r>
 8006edc:	3001      	adds	r0, #1
 8006ede:	d100      	bne.n	8006ee2 <_svfiprintf_r+0x6a>
 8006ee0:	e0ae      	b.n	8007040 <_svfiprintf_r+0x1c8>
 8006ee2:	6963      	ldr	r3, [r4, #20]
 8006ee4:	9a05      	ldr	r2, [sp, #20]
 8006ee6:	189b      	adds	r3, r3, r2
 8006ee8:	6163      	str	r3, [r4, #20]
 8006eea:	782b      	ldrb	r3, [r5, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d100      	bne.n	8006ef2 <_svfiprintf_r+0x7a>
 8006ef0:	e0a6      	b.n	8007040 <_svfiprintf_r+0x1c8>
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	4252      	negs	r2, r2
 8006ef8:	6062      	str	r2, [r4, #4]
 8006efa:	a904      	add	r1, sp, #16
 8006efc:	3254      	adds	r2, #84	@ 0x54
 8006efe:	1852      	adds	r2, r2, r1
 8006f00:	1c6e      	adds	r6, r5, #1
 8006f02:	6023      	str	r3, [r4, #0]
 8006f04:	60e3      	str	r3, [r4, #12]
 8006f06:	60a3      	str	r3, [r4, #8]
 8006f08:	7013      	strb	r3, [r2, #0]
 8006f0a:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006f0c:	4b54      	ldr	r3, [pc, #336]	@ (8007060 <_svfiprintf_r+0x1e8>)
 8006f0e:	2205      	movs	r2, #5
 8006f10:	0018      	movs	r0, r3
 8006f12:	7831      	ldrb	r1, [r6, #0]
 8006f14:	9305      	str	r3, [sp, #20]
 8006f16:	f000 fa51 	bl	80073bc <memchr>
 8006f1a:	1c75      	adds	r5, r6, #1
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	d11f      	bne.n	8006f60 <_svfiprintf_r+0xe8>
 8006f20:	6822      	ldr	r2, [r4, #0]
 8006f22:	06d3      	lsls	r3, r2, #27
 8006f24:	d504      	bpl.n	8006f30 <_svfiprintf_r+0xb8>
 8006f26:	2353      	movs	r3, #83	@ 0x53
 8006f28:	a904      	add	r1, sp, #16
 8006f2a:	185b      	adds	r3, r3, r1
 8006f2c:	2120      	movs	r1, #32
 8006f2e:	7019      	strb	r1, [r3, #0]
 8006f30:	0713      	lsls	r3, r2, #28
 8006f32:	d504      	bpl.n	8006f3e <_svfiprintf_r+0xc6>
 8006f34:	2353      	movs	r3, #83	@ 0x53
 8006f36:	a904      	add	r1, sp, #16
 8006f38:	185b      	adds	r3, r3, r1
 8006f3a:	212b      	movs	r1, #43	@ 0x2b
 8006f3c:	7019      	strb	r1, [r3, #0]
 8006f3e:	7833      	ldrb	r3, [r6, #0]
 8006f40:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f42:	d016      	beq.n	8006f72 <_svfiprintf_r+0xfa>
 8006f44:	0035      	movs	r5, r6
 8006f46:	2100      	movs	r1, #0
 8006f48:	200a      	movs	r0, #10
 8006f4a:	68e3      	ldr	r3, [r4, #12]
 8006f4c:	782a      	ldrb	r2, [r5, #0]
 8006f4e:	1c6e      	adds	r6, r5, #1
 8006f50:	3a30      	subs	r2, #48	@ 0x30
 8006f52:	2a09      	cmp	r2, #9
 8006f54:	d950      	bls.n	8006ff8 <_svfiprintf_r+0x180>
 8006f56:	2900      	cmp	r1, #0
 8006f58:	d111      	bne.n	8006f7e <_svfiprintf_r+0x106>
 8006f5a:	e017      	b.n	8006f8c <_svfiprintf_r+0x114>
 8006f5c:	3501      	adds	r5, #1
 8006f5e:	e7af      	b.n	8006ec0 <_svfiprintf_r+0x48>
 8006f60:	9b05      	ldr	r3, [sp, #20]
 8006f62:	6822      	ldr	r2, [r4, #0]
 8006f64:	1ac0      	subs	r0, r0, r3
 8006f66:	2301      	movs	r3, #1
 8006f68:	4083      	lsls	r3, r0
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	002e      	movs	r6, r5
 8006f6e:	6023      	str	r3, [r4, #0]
 8006f70:	e7cc      	b.n	8006f0c <_svfiprintf_r+0x94>
 8006f72:	9b07      	ldr	r3, [sp, #28]
 8006f74:	1d19      	adds	r1, r3, #4
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	9107      	str	r1, [sp, #28]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	db01      	blt.n	8006f82 <_svfiprintf_r+0x10a>
 8006f7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f80:	e004      	b.n	8006f8c <_svfiprintf_r+0x114>
 8006f82:	425b      	negs	r3, r3
 8006f84:	60e3      	str	r3, [r4, #12]
 8006f86:	2302      	movs	r3, #2
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	6023      	str	r3, [r4, #0]
 8006f8c:	782b      	ldrb	r3, [r5, #0]
 8006f8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f90:	d10c      	bne.n	8006fac <_svfiprintf_r+0x134>
 8006f92:	786b      	ldrb	r3, [r5, #1]
 8006f94:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f96:	d134      	bne.n	8007002 <_svfiprintf_r+0x18a>
 8006f98:	9b07      	ldr	r3, [sp, #28]
 8006f9a:	3502      	adds	r5, #2
 8006f9c:	1d1a      	adds	r2, r3, #4
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	9207      	str	r2, [sp, #28]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	da01      	bge.n	8006faa <_svfiprintf_r+0x132>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	425b      	negs	r3, r3
 8006faa:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fac:	4e2d      	ldr	r6, [pc, #180]	@ (8007064 <_svfiprintf_r+0x1ec>)
 8006fae:	2203      	movs	r2, #3
 8006fb0:	0030      	movs	r0, r6
 8006fb2:	7829      	ldrb	r1, [r5, #0]
 8006fb4:	f000 fa02 	bl	80073bc <memchr>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d006      	beq.n	8006fca <_svfiprintf_r+0x152>
 8006fbc:	2340      	movs	r3, #64	@ 0x40
 8006fbe:	1b80      	subs	r0, r0, r6
 8006fc0:	4083      	lsls	r3, r0
 8006fc2:	6822      	ldr	r2, [r4, #0]
 8006fc4:	3501      	adds	r5, #1
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	7829      	ldrb	r1, [r5, #0]
 8006fcc:	2206      	movs	r2, #6
 8006fce:	4826      	ldr	r0, [pc, #152]	@ (8007068 <_svfiprintf_r+0x1f0>)
 8006fd0:	1c6e      	adds	r6, r5, #1
 8006fd2:	7621      	strb	r1, [r4, #24]
 8006fd4:	f000 f9f2 	bl	80073bc <memchr>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d038      	beq.n	800704e <_svfiprintf_r+0x1d6>
 8006fdc:	4b23      	ldr	r3, [pc, #140]	@ (800706c <_svfiprintf_r+0x1f4>)
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d122      	bne.n	8007028 <_svfiprintf_r+0x1b0>
 8006fe2:	2207      	movs	r2, #7
 8006fe4:	9b07      	ldr	r3, [sp, #28]
 8006fe6:	3307      	adds	r3, #7
 8006fe8:	4393      	bics	r3, r2
 8006fea:	3308      	adds	r3, #8
 8006fec:	9307      	str	r3, [sp, #28]
 8006fee:	6963      	ldr	r3, [r4, #20]
 8006ff0:	9a04      	ldr	r2, [sp, #16]
 8006ff2:	189b      	adds	r3, r3, r2
 8006ff4:	6163      	str	r3, [r4, #20]
 8006ff6:	e762      	b.n	8006ebe <_svfiprintf_r+0x46>
 8006ff8:	4343      	muls	r3, r0
 8006ffa:	0035      	movs	r5, r6
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	189b      	adds	r3, r3, r2
 8007000:	e7a4      	b.n	8006f4c <_svfiprintf_r+0xd4>
 8007002:	2300      	movs	r3, #0
 8007004:	200a      	movs	r0, #10
 8007006:	0019      	movs	r1, r3
 8007008:	3501      	adds	r5, #1
 800700a:	6063      	str	r3, [r4, #4]
 800700c:	782a      	ldrb	r2, [r5, #0]
 800700e:	1c6e      	adds	r6, r5, #1
 8007010:	3a30      	subs	r2, #48	@ 0x30
 8007012:	2a09      	cmp	r2, #9
 8007014:	d903      	bls.n	800701e <_svfiprintf_r+0x1a6>
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0c8      	beq.n	8006fac <_svfiprintf_r+0x134>
 800701a:	9109      	str	r1, [sp, #36]	@ 0x24
 800701c:	e7c6      	b.n	8006fac <_svfiprintf_r+0x134>
 800701e:	4341      	muls	r1, r0
 8007020:	0035      	movs	r5, r6
 8007022:	2301      	movs	r3, #1
 8007024:	1889      	adds	r1, r1, r2
 8007026:	e7f1      	b.n	800700c <_svfiprintf_r+0x194>
 8007028:	aa07      	add	r2, sp, #28
 800702a:	9200      	str	r2, [sp, #0]
 800702c:	0021      	movs	r1, r4
 800702e:	003a      	movs	r2, r7
 8007030:	4b0f      	ldr	r3, [pc, #60]	@ (8007070 <_svfiprintf_r+0x1f8>)
 8007032:	9803      	ldr	r0, [sp, #12]
 8007034:	e000      	b.n	8007038 <_svfiprintf_r+0x1c0>
 8007036:	bf00      	nop
 8007038:	9004      	str	r0, [sp, #16]
 800703a:	9b04      	ldr	r3, [sp, #16]
 800703c:	3301      	adds	r3, #1
 800703e:	d1d6      	bne.n	8006fee <_svfiprintf_r+0x176>
 8007040:	89bb      	ldrh	r3, [r7, #12]
 8007042:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007044:	065b      	lsls	r3, r3, #25
 8007046:	d500      	bpl.n	800704a <_svfiprintf_r+0x1d2>
 8007048:	e72c      	b.n	8006ea4 <_svfiprintf_r+0x2c>
 800704a:	b021      	add	sp, #132	@ 0x84
 800704c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800704e:	aa07      	add	r2, sp, #28
 8007050:	9200      	str	r2, [sp, #0]
 8007052:	0021      	movs	r1, r4
 8007054:	003a      	movs	r2, r7
 8007056:	4b06      	ldr	r3, [pc, #24]	@ (8007070 <_svfiprintf_r+0x1f8>)
 8007058:	9803      	ldr	r0, [sp, #12]
 800705a:	f000 f87b 	bl	8007154 <_printf_i>
 800705e:	e7eb      	b.n	8007038 <_svfiprintf_r+0x1c0>
 8007060:	08007540 	.word	0x08007540
 8007064:	08007546 	.word	0x08007546
 8007068:	0800754a 	.word	0x0800754a
 800706c:	00000000 	.word	0x00000000
 8007070:	08006db9 	.word	0x08006db9

08007074 <_printf_common>:
 8007074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007076:	0016      	movs	r6, r2
 8007078:	9301      	str	r3, [sp, #4]
 800707a:	688a      	ldr	r2, [r1, #8]
 800707c:	690b      	ldr	r3, [r1, #16]
 800707e:	000c      	movs	r4, r1
 8007080:	9000      	str	r0, [sp, #0]
 8007082:	4293      	cmp	r3, r2
 8007084:	da00      	bge.n	8007088 <_printf_common+0x14>
 8007086:	0013      	movs	r3, r2
 8007088:	0022      	movs	r2, r4
 800708a:	6033      	str	r3, [r6, #0]
 800708c:	3243      	adds	r2, #67	@ 0x43
 800708e:	7812      	ldrb	r2, [r2, #0]
 8007090:	2a00      	cmp	r2, #0
 8007092:	d001      	beq.n	8007098 <_printf_common+0x24>
 8007094:	3301      	adds	r3, #1
 8007096:	6033      	str	r3, [r6, #0]
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	069b      	lsls	r3, r3, #26
 800709c:	d502      	bpl.n	80070a4 <_printf_common+0x30>
 800709e:	6833      	ldr	r3, [r6, #0]
 80070a0:	3302      	adds	r3, #2
 80070a2:	6033      	str	r3, [r6, #0]
 80070a4:	6822      	ldr	r2, [r4, #0]
 80070a6:	2306      	movs	r3, #6
 80070a8:	0015      	movs	r5, r2
 80070aa:	401d      	ands	r5, r3
 80070ac:	421a      	tst	r2, r3
 80070ae:	d027      	beq.n	8007100 <_printf_common+0x8c>
 80070b0:	0023      	movs	r3, r4
 80070b2:	3343      	adds	r3, #67	@ 0x43
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	1e5a      	subs	r2, r3, #1
 80070b8:	4193      	sbcs	r3, r2
 80070ba:	6822      	ldr	r2, [r4, #0]
 80070bc:	0692      	lsls	r2, r2, #26
 80070be:	d430      	bmi.n	8007122 <_printf_common+0xae>
 80070c0:	0022      	movs	r2, r4
 80070c2:	9901      	ldr	r1, [sp, #4]
 80070c4:	9800      	ldr	r0, [sp, #0]
 80070c6:	9d08      	ldr	r5, [sp, #32]
 80070c8:	3243      	adds	r2, #67	@ 0x43
 80070ca:	47a8      	blx	r5
 80070cc:	3001      	adds	r0, #1
 80070ce:	d025      	beq.n	800711c <_printf_common+0xa8>
 80070d0:	2206      	movs	r2, #6
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	2500      	movs	r5, #0
 80070d6:	4013      	ands	r3, r2
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d105      	bne.n	80070e8 <_printf_common+0x74>
 80070dc:	6833      	ldr	r3, [r6, #0]
 80070de:	68e5      	ldr	r5, [r4, #12]
 80070e0:	1aed      	subs	r5, r5, r3
 80070e2:	43eb      	mvns	r3, r5
 80070e4:	17db      	asrs	r3, r3, #31
 80070e6:	401d      	ands	r5, r3
 80070e8:	68a3      	ldr	r3, [r4, #8]
 80070ea:	6922      	ldr	r2, [r4, #16]
 80070ec:	4293      	cmp	r3, r2
 80070ee:	dd01      	ble.n	80070f4 <_printf_common+0x80>
 80070f0:	1a9b      	subs	r3, r3, r2
 80070f2:	18ed      	adds	r5, r5, r3
 80070f4:	2600      	movs	r6, #0
 80070f6:	42b5      	cmp	r5, r6
 80070f8:	d120      	bne.n	800713c <_printf_common+0xc8>
 80070fa:	2000      	movs	r0, #0
 80070fc:	e010      	b.n	8007120 <_printf_common+0xac>
 80070fe:	3501      	adds	r5, #1
 8007100:	68e3      	ldr	r3, [r4, #12]
 8007102:	6832      	ldr	r2, [r6, #0]
 8007104:	1a9b      	subs	r3, r3, r2
 8007106:	42ab      	cmp	r3, r5
 8007108:	ddd2      	ble.n	80070b0 <_printf_common+0x3c>
 800710a:	0022      	movs	r2, r4
 800710c:	2301      	movs	r3, #1
 800710e:	9901      	ldr	r1, [sp, #4]
 8007110:	9800      	ldr	r0, [sp, #0]
 8007112:	9f08      	ldr	r7, [sp, #32]
 8007114:	3219      	adds	r2, #25
 8007116:	47b8      	blx	r7
 8007118:	3001      	adds	r0, #1
 800711a:	d1f0      	bne.n	80070fe <_printf_common+0x8a>
 800711c:	2001      	movs	r0, #1
 800711e:	4240      	negs	r0, r0
 8007120:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007122:	2030      	movs	r0, #48	@ 0x30
 8007124:	18e1      	adds	r1, r4, r3
 8007126:	3143      	adds	r1, #67	@ 0x43
 8007128:	7008      	strb	r0, [r1, #0]
 800712a:	0021      	movs	r1, r4
 800712c:	1c5a      	adds	r2, r3, #1
 800712e:	3145      	adds	r1, #69	@ 0x45
 8007130:	7809      	ldrb	r1, [r1, #0]
 8007132:	18a2      	adds	r2, r4, r2
 8007134:	3243      	adds	r2, #67	@ 0x43
 8007136:	3302      	adds	r3, #2
 8007138:	7011      	strb	r1, [r2, #0]
 800713a:	e7c1      	b.n	80070c0 <_printf_common+0x4c>
 800713c:	0022      	movs	r2, r4
 800713e:	2301      	movs	r3, #1
 8007140:	9901      	ldr	r1, [sp, #4]
 8007142:	9800      	ldr	r0, [sp, #0]
 8007144:	9f08      	ldr	r7, [sp, #32]
 8007146:	321a      	adds	r2, #26
 8007148:	47b8      	blx	r7
 800714a:	3001      	adds	r0, #1
 800714c:	d0e6      	beq.n	800711c <_printf_common+0xa8>
 800714e:	3601      	adds	r6, #1
 8007150:	e7d1      	b.n	80070f6 <_printf_common+0x82>
	...

08007154 <_printf_i>:
 8007154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007156:	b08b      	sub	sp, #44	@ 0x2c
 8007158:	9206      	str	r2, [sp, #24]
 800715a:	000a      	movs	r2, r1
 800715c:	3243      	adds	r2, #67	@ 0x43
 800715e:	9307      	str	r3, [sp, #28]
 8007160:	9005      	str	r0, [sp, #20]
 8007162:	9203      	str	r2, [sp, #12]
 8007164:	7e0a      	ldrb	r2, [r1, #24]
 8007166:	000c      	movs	r4, r1
 8007168:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800716a:	2a78      	cmp	r2, #120	@ 0x78
 800716c:	d809      	bhi.n	8007182 <_printf_i+0x2e>
 800716e:	2a62      	cmp	r2, #98	@ 0x62
 8007170:	d80b      	bhi.n	800718a <_printf_i+0x36>
 8007172:	2a00      	cmp	r2, #0
 8007174:	d100      	bne.n	8007178 <_printf_i+0x24>
 8007176:	e0bc      	b.n	80072f2 <_printf_i+0x19e>
 8007178:	497b      	ldr	r1, [pc, #492]	@ (8007368 <_printf_i+0x214>)
 800717a:	9104      	str	r1, [sp, #16]
 800717c:	2a58      	cmp	r2, #88	@ 0x58
 800717e:	d100      	bne.n	8007182 <_printf_i+0x2e>
 8007180:	e090      	b.n	80072a4 <_printf_i+0x150>
 8007182:	0025      	movs	r5, r4
 8007184:	3542      	adds	r5, #66	@ 0x42
 8007186:	702a      	strb	r2, [r5, #0]
 8007188:	e022      	b.n	80071d0 <_printf_i+0x7c>
 800718a:	0010      	movs	r0, r2
 800718c:	3863      	subs	r0, #99	@ 0x63
 800718e:	2815      	cmp	r0, #21
 8007190:	d8f7      	bhi.n	8007182 <_printf_i+0x2e>
 8007192:	f7f8 ffc1 	bl	8000118 <__gnu_thumb1_case_shi>
 8007196:	0016      	.short	0x0016
 8007198:	fff6001f 	.word	0xfff6001f
 800719c:	fff6fff6 	.word	0xfff6fff6
 80071a0:	001ffff6 	.word	0x001ffff6
 80071a4:	fff6fff6 	.word	0xfff6fff6
 80071a8:	fff6fff6 	.word	0xfff6fff6
 80071ac:	003600a1 	.word	0x003600a1
 80071b0:	fff60080 	.word	0xfff60080
 80071b4:	00b2fff6 	.word	0x00b2fff6
 80071b8:	0036fff6 	.word	0x0036fff6
 80071bc:	fff6fff6 	.word	0xfff6fff6
 80071c0:	0084      	.short	0x0084
 80071c2:	0025      	movs	r5, r4
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	3542      	adds	r5, #66	@ 0x42
 80071c8:	1d11      	adds	r1, r2, #4
 80071ca:	6019      	str	r1, [r3, #0]
 80071cc:	6813      	ldr	r3, [r2, #0]
 80071ce:	702b      	strb	r3, [r5, #0]
 80071d0:	2301      	movs	r3, #1
 80071d2:	e0a0      	b.n	8007316 <_printf_i+0x1c2>
 80071d4:	6818      	ldr	r0, [r3, #0]
 80071d6:	6809      	ldr	r1, [r1, #0]
 80071d8:	1d02      	adds	r2, r0, #4
 80071da:	060d      	lsls	r5, r1, #24
 80071dc:	d50b      	bpl.n	80071f6 <_printf_i+0xa2>
 80071de:	6806      	ldr	r6, [r0, #0]
 80071e0:	601a      	str	r2, [r3, #0]
 80071e2:	2e00      	cmp	r6, #0
 80071e4:	da03      	bge.n	80071ee <_printf_i+0x9a>
 80071e6:	232d      	movs	r3, #45	@ 0x2d
 80071e8:	9a03      	ldr	r2, [sp, #12]
 80071ea:	4276      	negs	r6, r6
 80071ec:	7013      	strb	r3, [r2, #0]
 80071ee:	4b5e      	ldr	r3, [pc, #376]	@ (8007368 <_printf_i+0x214>)
 80071f0:	270a      	movs	r7, #10
 80071f2:	9304      	str	r3, [sp, #16]
 80071f4:	e018      	b.n	8007228 <_printf_i+0xd4>
 80071f6:	6806      	ldr	r6, [r0, #0]
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	0649      	lsls	r1, r1, #25
 80071fc:	d5f1      	bpl.n	80071e2 <_printf_i+0x8e>
 80071fe:	b236      	sxth	r6, r6
 8007200:	e7ef      	b.n	80071e2 <_printf_i+0x8e>
 8007202:	6808      	ldr	r0, [r1, #0]
 8007204:	6819      	ldr	r1, [r3, #0]
 8007206:	c940      	ldmia	r1!, {r6}
 8007208:	0605      	lsls	r5, r0, #24
 800720a:	d402      	bmi.n	8007212 <_printf_i+0xbe>
 800720c:	0640      	lsls	r0, r0, #25
 800720e:	d500      	bpl.n	8007212 <_printf_i+0xbe>
 8007210:	b2b6      	uxth	r6, r6
 8007212:	6019      	str	r1, [r3, #0]
 8007214:	4b54      	ldr	r3, [pc, #336]	@ (8007368 <_printf_i+0x214>)
 8007216:	270a      	movs	r7, #10
 8007218:	9304      	str	r3, [sp, #16]
 800721a:	2a6f      	cmp	r2, #111	@ 0x6f
 800721c:	d100      	bne.n	8007220 <_printf_i+0xcc>
 800721e:	3f02      	subs	r7, #2
 8007220:	0023      	movs	r3, r4
 8007222:	2200      	movs	r2, #0
 8007224:	3343      	adds	r3, #67	@ 0x43
 8007226:	701a      	strb	r2, [r3, #0]
 8007228:	6863      	ldr	r3, [r4, #4]
 800722a:	60a3      	str	r3, [r4, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	db03      	blt.n	8007238 <_printf_i+0xe4>
 8007230:	2104      	movs	r1, #4
 8007232:	6822      	ldr	r2, [r4, #0]
 8007234:	438a      	bics	r2, r1
 8007236:	6022      	str	r2, [r4, #0]
 8007238:	2e00      	cmp	r6, #0
 800723a:	d102      	bne.n	8007242 <_printf_i+0xee>
 800723c:	9d03      	ldr	r5, [sp, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00c      	beq.n	800725c <_printf_i+0x108>
 8007242:	9d03      	ldr	r5, [sp, #12]
 8007244:	0030      	movs	r0, r6
 8007246:	0039      	movs	r1, r7
 8007248:	f7f8 fff6 	bl	8000238 <__aeabi_uidivmod>
 800724c:	9b04      	ldr	r3, [sp, #16]
 800724e:	3d01      	subs	r5, #1
 8007250:	5c5b      	ldrb	r3, [r3, r1]
 8007252:	702b      	strb	r3, [r5, #0]
 8007254:	0033      	movs	r3, r6
 8007256:	0006      	movs	r6, r0
 8007258:	429f      	cmp	r7, r3
 800725a:	d9f3      	bls.n	8007244 <_printf_i+0xf0>
 800725c:	2f08      	cmp	r7, #8
 800725e:	d109      	bne.n	8007274 <_printf_i+0x120>
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	07db      	lsls	r3, r3, #31
 8007264:	d506      	bpl.n	8007274 <_printf_i+0x120>
 8007266:	6862      	ldr	r2, [r4, #4]
 8007268:	6923      	ldr	r3, [r4, #16]
 800726a:	429a      	cmp	r2, r3
 800726c:	dc02      	bgt.n	8007274 <_printf_i+0x120>
 800726e:	2330      	movs	r3, #48	@ 0x30
 8007270:	3d01      	subs	r5, #1
 8007272:	702b      	strb	r3, [r5, #0]
 8007274:	9b03      	ldr	r3, [sp, #12]
 8007276:	1b5b      	subs	r3, r3, r5
 8007278:	6123      	str	r3, [r4, #16]
 800727a:	9b07      	ldr	r3, [sp, #28]
 800727c:	0021      	movs	r1, r4
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	9805      	ldr	r0, [sp, #20]
 8007282:	9b06      	ldr	r3, [sp, #24]
 8007284:	aa09      	add	r2, sp, #36	@ 0x24
 8007286:	f7ff fef5 	bl	8007074 <_printf_common>
 800728a:	3001      	adds	r0, #1
 800728c:	d148      	bne.n	8007320 <_printf_i+0x1cc>
 800728e:	2001      	movs	r0, #1
 8007290:	4240      	negs	r0, r0
 8007292:	b00b      	add	sp, #44	@ 0x2c
 8007294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007296:	2220      	movs	r2, #32
 8007298:	6809      	ldr	r1, [r1, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	6022      	str	r2, [r4, #0]
 800729e:	2278      	movs	r2, #120	@ 0x78
 80072a0:	4932      	ldr	r1, [pc, #200]	@ (800736c <_printf_i+0x218>)
 80072a2:	9104      	str	r1, [sp, #16]
 80072a4:	0021      	movs	r1, r4
 80072a6:	3145      	adds	r1, #69	@ 0x45
 80072a8:	700a      	strb	r2, [r1, #0]
 80072aa:	6819      	ldr	r1, [r3, #0]
 80072ac:	6822      	ldr	r2, [r4, #0]
 80072ae:	c940      	ldmia	r1!, {r6}
 80072b0:	0610      	lsls	r0, r2, #24
 80072b2:	d402      	bmi.n	80072ba <_printf_i+0x166>
 80072b4:	0650      	lsls	r0, r2, #25
 80072b6:	d500      	bpl.n	80072ba <_printf_i+0x166>
 80072b8:	b2b6      	uxth	r6, r6
 80072ba:	6019      	str	r1, [r3, #0]
 80072bc:	07d3      	lsls	r3, r2, #31
 80072be:	d502      	bpl.n	80072c6 <_printf_i+0x172>
 80072c0:	2320      	movs	r3, #32
 80072c2:	4313      	orrs	r3, r2
 80072c4:	6023      	str	r3, [r4, #0]
 80072c6:	2e00      	cmp	r6, #0
 80072c8:	d001      	beq.n	80072ce <_printf_i+0x17a>
 80072ca:	2710      	movs	r7, #16
 80072cc:	e7a8      	b.n	8007220 <_printf_i+0xcc>
 80072ce:	2220      	movs	r2, #32
 80072d0:	6823      	ldr	r3, [r4, #0]
 80072d2:	4393      	bics	r3, r2
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	e7f8      	b.n	80072ca <_printf_i+0x176>
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	680d      	ldr	r5, [r1, #0]
 80072dc:	1d10      	adds	r0, r2, #4
 80072de:	6949      	ldr	r1, [r1, #20]
 80072e0:	6018      	str	r0, [r3, #0]
 80072e2:	6813      	ldr	r3, [r2, #0]
 80072e4:	062e      	lsls	r6, r5, #24
 80072e6:	d501      	bpl.n	80072ec <_printf_i+0x198>
 80072e8:	6019      	str	r1, [r3, #0]
 80072ea:	e002      	b.n	80072f2 <_printf_i+0x19e>
 80072ec:	066d      	lsls	r5, r5, #25
 80072ee:	d5fb      	bpl.n	80072e8 <_printf_i+0x194>
 80072f0:	8019      	strh	r1, [r3, #0]
 80072f2:	2300      	movs	r3, #0
 80072f4:	9d03      	ldr	r5, [sp, #12]
 80072f6:	6123      	str	r3, [r4, #16]
 80072f8:	e7bf      	b.n	800727a <_printf_i+0x126>
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	1d11      	adds	r1, r2, #4
 80072fe:	6019      	str	r1, [r3, #0]
 8007300:	6815      	ldr	r5, [r2, #0]
 8007302:	2100      	movs	r1, #0
 8007304:	0028      	movs	r0, r5
 8007306:	6862      	ldr	r2, [r4, #4]
 8007308:	f000 f858 	bl	80073bc <memchr>
 800730c:	2800      	cmp	r0, #0
 800730e:	d001      	beq.n	8007314 <_printf_i+0x1c0>
 8007310:	1b40      	subs	r0, r0, r5
 8007312:	6060      	str	r0, [r4, #4]
 8007314:	6863      	ldr	r3, [r4, #4]
 8007316:	6123      	str	r3, [r4, #16]
 8007318:	2300      	movs	r3, #0
 800731a:	9a03      	ldr	r2, [sp, #12]
 800731c:	7013      	strb	r3, [r2, #0]
 800731e:	e7ac      	b.n	800727a <_printf_i+0x126>
 8007320:	002a      	movs	r2, r5
 8007322:	6923      	ldr	r3, [r4, #16]
 8007324:	9906      	ldr	r1, [sp, #24]
 8007326:	9805      	ldr	r0, [sp, #20]
 8007328:	9d07      	ldr	r5, [sp, #28]
 800732a:	47a8      	blx	r5
 800732c:	3001      	adds	r0, #1
 800732e:	d0ae      	beq.n	800728e <_printf_i+0x13a>
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	079b      	lsls	r3, r3, #30
 8007334:	d415      	bmi.n	8007362 <_printf_i+0x20e>
 8007336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007338:	68e0      	ldr	r0, [r4, #12]
 800733a:	4298      	cmp	r0, r3
 800733c:	daa9      	bge.n	8007292 <_printf_i+0x13e>
 800733e:	0018      	movs	r0, r3
 8007340:	e7a7      	b.n	8007292 <_printf_i+0x13e>
 8007342:	0022      	movs	r2, r4
 8007344:	2301      	movs	r3, #1
 8007346:	9906      	ldr	r1, [sp, #24]
 8007348:	9805      	ldr	r0, [sp, #20]
 800734a:	9e07      	ldr	r6, [sp, #28]
 800734c:	3219      	adds	r2, #25
 800734e:	47b0      	blx	r6
 8007350:	3001      	adds	r0, #1
 8007352:	d09c      	beq.n	800728e <_printf_i+0x13a>
 8007354:	3501      	adds	r5, #1
 8007356:	68e3      	ldr	r3, [r4, #12]
 8007358:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800735a:	1a9b      	subs	r3, r3, r2
 800735c:	42ab      	cmp	r3, r5
 800735e:	dcf0      	bgt.n	8007342 <_printf_i+0x1ee>
 8007360:	e7e9      	b.n	8007336 <_printf_i+0x1e2>
 8007362:	2500      	movs	r5, #0
 8007364:	e7f7      	b.n	8007356 <_printf_i+0x202>
 8007366:	46c0      	nop			@ (mov r8, r8)
 8007368:	08007551 	.word	0x08007551
 800736c:	08007562 	.word	0x08007562

08007370 <memmove>:
 8007370:	b510      	push	{r4, lr}
 8007372:	4288      	cmp	r0, r1
 8007374:	d806      	bhi.n	8007384 <memmove+0x14>
 8007376:	2300      	movs	r3, #0
 8007378:	429a      	cmp	r2, r3
 800737a:	d008      	beq.n	800738e <memmove+0x1e>
 800737c:	5ccc      	ldrb	r4, [r1, r3]
 800737e:	54c4      	strb	r4, [r0, r3]
 8007380:	3301      	adds	r3, #1
 8007382:	e7f9      	b.n	8007378 <memmove+0x8>
 8007384:	188b      	adds	r3, r1, r2
 8007386:	4298      	cmp	r0, r3
 8007388:	d2f5      	bcs.n	8007376 <memmove+0x6>
 800738a:	3a01      	subs	r2, #1
 800738c:	d200      	bcs.n	8007390 <memmove+0x20>
 800738e:	bd10      	pop	{r4, pc}
 8007390:	5c8b      	ldrb	r3, [r1, r2]
 8007392:	5483      	strb	r3, [r0, r2]
 8007394:	e7f9      	b.n	800738a <memmove+0x1a>
	...

08007398 <_sbrk_r>:
 8007398:	2300      	movs	r3, #0
 800739a:	b570      	push	{r4, r5, r6, lr}
 800739c:	4d06      	ldr	r5, [pc, #24]	@ (80073b8 <_sbrk_r+0x20>)
 800739e:	0004      	movs	r4, r0
 80073a0:	0008      	movs	r0, r1
 80073a2:	602b      	str	r3, [r5, #0]
 80073a4:	f7fb f93c 	bl	8002620 <_sbrk>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d103      	bne.n	80073b4 <_sbrk_r+0x1c>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d000      	beq.n	80073b4 <_sbrk_r+0x1c>
 80073b2:	6023      	str	r3, [r4, #0]
 80073b4:	bd70      	pop	{r4, r5, r6, pc}
 80073b6:	46c0      	nop			@ (mov r8, r8)
 80073b8:	200004bc 	.word	0x200004bc

080073bc <memchr>:
 80073bc:	b2c9      	uxtb	r1, r1
 80073be:	1882      	adds	r2, r0, r2
 80073c0:	4290      	cmp	r0, r2
 80073c2:	d101      	bne.n	80073c8 <memchr+0xc>
 80073c4:	2000      	movs	r0, #0
 80073c6:	4770      	bx	lr
 80073c8:	7803      	ldrb	r3, [r0, #0]
 80073ca:	428b      	cmp	r3, r1
 80073cc:	d0fb      	beq.n	80073c6 <memchr+0xa>
 80073ce:	3001      	adds	r0, #1
 80073d0:	e7f6      	b.n	80073c0 <memchr+0x4>

080073d2 <memcpy>:
 80073d2:	2300      	movs	r3, #0
 80073d4:	b510      	push	{r4, lr}
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d100      	bne.n	80073dc <memcpy+0xa>
 80073da:	bd10      	pop	{r4, pc}
 80073dc:	5ccc      	ldrb	r4, [r1, r3]
 80073de:	54c4      	strb	r4, [r0, r3]
 80073e0:	3301      	adds	r3, #1
 80073e2:	e7f8      	b.n	80073d6 <memcpy+0x4>

080073e4 <_realloc_r>:
 80073e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073e6:	0006      	movs	r6, r0
 80073e8:	000c      	movs	r4, r1
 80073ea:	0015      	movs	r5, r2
 80073ec:	2900      	cmp	r1, #0
 80073ee:	d105      	bne.n	80073fc <_realloc_r+0x18>
 80073f0:	0011      	movs	r1, r2
 80073f2:	f7ff fc51 	bl	8006c98 <_malloc_r>
 80073f6:	0004      	movs	r4, r0
 80073f8:	0020      	movs	r0, r4
 80073fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80073fc:	2a00      	cmp	r2, #0
 80073fe:	d103      	bne.n	8007408 <_realloc_r+0x24>
 8007400:	f7ff fbde 	bl	8006bc0 <_free_r>
 8007404:	2400      	movs	r4, #0
 8007406:	e7f7      	b.n	80073f8 <_realloc_r+0x14>
 8007408:	f000 f81b 	bl	8007442 <_malloc_usable_size_r>
 800740c:	0007      	movs	r7, r0
 800740e:	4285      	cmp	r5, r0
 8007410:	d802      	bhi.n	8007418 <_realloc_r+0x34>
 8007412:	0843      	lsrs	r3, r0, #1
 8007414:	42ab      	cmp	r3, r5
 8007416:	d3ef      	bcc.n	80073f8 <_realloc_r+0x14>
 8007418:	0029      	movs	r1, r5
 800741a:	0030      	movs	r0, r6
 800741c:	f7ff fc3c 	bl	8006c98 <_malloc_r>
 8007420:	9001      	str	r0, [sp, #4]
 8007422:	2800      	cmp	r0, #0
 8007424:	d0ee      	beq.n	8007404 <_realloc_r+0x20>
 8007426:	002a      	movs	r2, r5
 8007428:	42bd      	cmp	r5, r7
 800742a:	d900      	bls.n	800742e <_realloc_r+0x4a>
 800742c:	003a      	movs	r2, r7
 800742e:	0021      	movs	r1, r4
 8007430:	9801      	ldr	r0, [sp, #4]
 8007432:	f7ff ffce 	bl	80073d2 <memcpy>
 8007436:	0021      	movs	r1, r4
 8007438:	0030      	movs	r0, r6
 800743a:	f7ff fbc1 	bl	8006bc0 <_free_r>
 800743e:	9c01      	ldr	r4, [sp, #4]
 8007440:	e7da      	b.n	80073f8 <_realloc_r+0x14>

08007442 <_malloc_usable_size_r>:
 8007442:	1f0b      	subs	r3, r1, #4
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	1f18      	subs	r0, r3, #4
 8007448:	2b00      	cmp	r3, #0
 800744a:	da01      	bge.n	8007450 <_malloc_usable_size_r+0xe>
 800744c:	580b      	ldr	r3, [r1, r0]
 800744e:	18c0      	adds	r0, r0, r3
 8007450:	4770      	bx	lr
	...

08007454 <_init>:
 8007454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007456:	46c0      	nop			@ (mov r8, r8)
 8007458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800745a:	bc08      	pop	{r3}
 800745c:	469e      	mov	lr, r3
 800745e:	4770      	bx	lr

08007460 <_fini>:
 8007460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007462:	46c0      	nop			@ (mov r8, r8)
 8007464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007466:	bc08      	pop	{r3}
 8007468:	469e      	mov	lr, r3
 800746a:	4770      	bx	lr
